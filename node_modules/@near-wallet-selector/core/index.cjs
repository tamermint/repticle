'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var nearAPI = require('near-api-js');
var events = require('events');
var rxjs = require('rxjs');
var borsh = require('borsh');
var jsSha256 = require('js-sha256');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var nearAPI__namespace = /*#__PURE__*/_interopNamespace(nearAPI);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

class Provider {
  constructor(url) {
    this.provider = new nearAPI__namespace.providers.JsonRpcProvider({
      url
    });
  }
  query(params) {
    return this.provider.query(params);
  }
  viewAccessKey({
    accountId,
    publicKey
  }) {
    return this.query({
      request_type: "view_access_key",
      finality: "final",
      account_id: accountId,
      public_key: publicKey
    });
  }
  block(reference) {
    return this.provider.block(reference);
  }
  sendTransaction(signedTransaction) {
    return this.provider.sendTransaction(signedTransaction);
  }
}

const KEY_DELIMITER = ":";
class JsonStorage {
  constructor(storage, namespace) {
    this.storage = storage;
    this.namespace = Array.isArray(namespace) ? namespace.join(KEY_DELIMITER) : namespace;
  }
  resolveKey(key) {
    return [this.namespace, key].join(KEY_DELIMITER);
  }
  getItem(key) {
    return this.storage.getItem(this.resolveKey(key)).then(item => {
      return typeof item === "string" ? JSON.parse(item) : null;
    });
  }
  setItem(key, value) {
    return this.storage.setItem(this.resolveKey(key), JSON.stringify(value));
  }
  removeItem(key) {
    return this.storage.removeItem(this.resolveKey(key));
  }
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global$t =
  // eslint-disable-next-line es-x/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();

var objectGetOwnPropertyDescriptor = {};

var fails$s = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};

var fails$r = fails$s;

// Detect IE8's incomplete defineProperty implementation
var descriptors = !fails$r(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});

var fails$q = fails$s;

var functionBindNative = !fails$q(function () {
  // eslint-disable-next-line es-x/no-function-prototype-bind -- safe
  var test = (function () { /* empty */ }).bind();
  // eslint-disable-next-line no-prototype-builtins -- safe
  return typeof test != 'function' || test.hasOwnProperty('prototype');
});

var NATIVE_BIND$3 = functionBindNative;

var call$l = Function.prototype.call;

var functionCall = NATIVE_BIND$3 ? call$l.bind(call$l) : function () {
  return call$l.apply(call$l, arguments);
};

var objectPropertyIsEnumerable = {};

var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor$2 = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor$2 && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
objectPropertyIsEnumerable.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor$2(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;

var createPropertyDescriptor$5 = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

var NATIVE_BIND$2 = functionBindNative;

var FunctionPrototype$2 = Function.prototype;
var bind$7 = FunctionPrototype$2.bind;
var call$k = FunctionPrototype$2.call;
var uncurryThis$p = NATIVE_BIND$2 && bind$7.bind(call$k, call$k);

var functionUncurryThis = NATIVE_BIND$2 ? function (fn) {
  return fn && uncurryThis$p(fn);
} : function (fn) {
  return fn && function () {
    return call$k.apply(fn, arguments);
  };
};

var uncurryThis$o = functionUncurryThis;

var toString$7 = uncurryThis$o({}.toString);
var stringSlice$3 = uncurryThis$o(''.slice);

var classofRaw$1 = function (it) {
  return stringSlice$3(toString$7(it), 8, -1);
};

var uncurryThis$n = functionUncurryThis;
var fails$p = fails$s;
var classof$b = classofRaw$1;

var $Object$4 = Object;
var split = uncurryThis$n(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var indexedObject = fails$p(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !$Object$4('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof$b(it) == 'String' ? split(it, '') : $Object$4(it);
} : $Object$4;

var $TypeError$f = TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
var requireObjectCoercible$6 = function (it) {
  if (it == undefined) throw $TypeError$f("Can't call method on " + it);
  return it;
};

// toObject with fallback for non-array-like ES3 strings
var IndexedObject$3 = indexedObject;
var requireObjectCoercible$5 = requireObjectCoercible$6;

var toIndexedObject$6 = function (it) {
  return IndexedObject$3(requireObjectCoercible$5(it));
};

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
var isCallable$n = function (argument) {
  return typeof argument == 'function';
};

var isCallable$m = isCallable$n;

var isObject$d = function (it) {
  return typeof it == 'object' ? it !== null : isCallable$m(it);
};

var global$s = global$t;
var isCallable$l = isCallable$n;

var aFunction = function (argument) {
  return isCallable$l(argument) ? argument : undefined;
};

var getBuiltIn$8 = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global$s[namespace]) : global$s[namespace] && global$s[namespace][method];
};

var uncurryThis$m = functionUncurryThis;

var objectIsPrototypeOf = uncurryThis$m({}.isPrototypeOf);

var getBuiltIn$7 = getBuiltIn$8;

var engineUserAgent = getBuiltIn$7('navigator', 'userAgent') || '';

var global$r = global$t;
var userAgent$5 = engineUserAgent;

var process$3 = global$r.process;
var Deno$1 = global$r.Deno;
var versions = process$3 && process$3.versions || Deno$1 && Deno$1.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent$5) {
  match = userAgent$5.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent$5.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

var engineV8Version = version;

/* eslint-disable es-x/no-symbol -- required for testing */

var V8_VERSION$1 = engineV8Version;
var fails$o = fails$s;

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- required for testing
var nativeSymbol = !!Object.getOwnPropertySymbols && !fails$o(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION$1 && V8_VERSION$1 < 41;
});

/* eslint-disable es-x/no-symbol -- required for testing */

var NATIVE_SYMBOL$1 = nativeSymbol;

var useSymbolAsUid = NATIVE_SYMBOL$1
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';

var getBuiltIn$6 = getBuiltIn$8;
var isCallable$k = isCallable$n;
var isPrototypeOf$4 = objectIsPrototypeOf;
var USE_SYMBOL_AS_UID$1 = useSymbolAsUid;

var $Object$3 = Object;

var isSymbol$3 = USE_SYMBOL_AS_UID$1 ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn$6('Symbol');
  return isCallable$k($Symbol) && isPrototypeOf$4($Symbol.prototype, $Object$3(it));
};

var $String$3 = String;

var tryToString$5 = function (argument) {
  try {
    return $String$3(argument);
  } catch (error) {
    return 'Object';
  }
};

var isCallable$j = isCallable$n;
var tryToString$4 = tryToString$5;

var $TypeError$e = TypeError;

// `Assert: IsCallable(argument) is true`
var aCallable$9 = function (argument) {
  if (isCallable$j(argument)) return argument;
  throw $TypeError$e(tryToString$4(argument) + ' is not a function');
};

var aCallable$8 = aCallable$9;

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
var getMethod$4 = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable$8(func);
};

var call$j = functionCall;
var isCallable$i = isCallable$n;
var isObject$c = isObject$d;

var $TypeError$d = TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
var ordinaryToPrimitive$1 = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable$i(fn = input.toString) && !isObject$c(val = call$j(fn, input))) return val;
  if (isCallable$i(fn = input.valueOf) && !isObject$c(val = call$j(fn, input))) return val;
  if (pref !== 'string' && isCallable$i(fn = input.toString) && !isObject$c(val = call$j(fn, input))) return val;
  throw $TypeError$d("Can't convert object to primitive value");
};

var shared$4 = {exports: {}};

var global$q = global$t;

// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty$7 = Object.defineProperty;

var defineGlobalProperty$3 = function (key, value) {
  try {
    defineProperty$7(global$q, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global$q[key] = value;
  } return value;
};

var global$p = global$t;
var defineGlobalProperty$2 = defineGlobalProperty$3;

var SHARED = '__core-js_shared__';
var store$3 = global$p[SHARED] || defineGlobalProperty$2(SHARED, {});

var sharedStore = store$3;

var store$2 = sharedStore;

(shared$4.exports = function (key, value) {
  return store$2[key] || (store$2[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.23.3',
  mode: 'global',
  copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
  license: 'https://github.com/zloirock/core-js/blob/v3.23.3/LICENSE',
  source: 'https://github.com/zloirock/core-js'
});

var requireObjectCoercible$4 = requireObjectCoercible$6;

var $Object$2 = Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
var toObject$7 = function (argument) {
  return $Object$2(requireObjectCoercible$4(argument));
};

var uncurryThis$l = functionUncurryThis;
var toObject$6 = toObject$7;

var hasOwnProperty = uncurryThis$l({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
// eslint-disable-next-line es-x/no-object-hasown -- safe
var hasOwnProperty_1 = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject$6(it), key);
};

var uncurryThis$k = functionUncurryThis;

var id = 0;
var postfix = Math.random();
var toString$6 = uncurryThis$k(1.0.toString);

var uid$3 = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString$6(++id + postfix, 36);
};

var global$o = global$t;
var shared$3 = shared$4.exports;
var hasOwn$b = hasOwnProperty_1;
var uid$2 = uid$3;
var NATIVE_SYMBOL = nativeSymbol;
var USE_SYMBOL_AS_UID = useSymbolAsUid;

var WellKnownSymbolsStore = shared$3('wks');
var Symbol$1 = global$o.Symbol;
var symbolFor = Symbol$1 && Symbol$1['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid$2;

var wellKnownSymbol$j = function (name) {
  if (!hasOwn$b(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn$b(Symbol$1, name)) {
      WellKnownSymbolsStore[name] = Symbol$1[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};

var call$i = functionCall;
var isObject$b = isObject$d;
var isSymbol$2 = isSymbol$3;
var getMethod$3 = getMethod$4;
var ordinaryToPrimitive = ordinaryToPrimitive$1;
var wellKnownSymbol$i = wellKnownSymbol$j;

var $TypeError$c = TypeError;
var TO_PRIMITIVE = wellKnownSymbol$i('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
var toPrimitive$2 = function (input, pref) {
  if (!isObject$b(input) || isSymbol$2(input)) return input;
  var exoticToPrim = getMethod$3(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call$i(exoticToPrim, input, pref);
    if (!isObject$b(result) || isSymbol$2(result)) return result;
    throw $TypeError$c("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};

var toPrimitive$1 = toPrimitive$2;
var isSymbol$1 = isSymbol$3;

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
var toPropertyKey$4 = function (argument) {
  var key = toPrimitive$1(argument, 'string');
  return isSymbol$1(key) ? key : key + '';
};

var global$n = global$t;
var isObject$a = isObject$d;

var document$3 = global$n.document;
// typeof document.createElement is 'object' in old IE
var EXISTS$1 = isObject$a(document$3) && isObject$a(document$3.createElement);

var documentCreateElement$2 = function (it) {
  return EXISTS$1 ? document$3.createElement(it) : {};
};

var DESCRIPTORS$d = descriptors;
var fails$n = fails$s;
var createElement$1 = documentCreateElement$2;

// Thanks to IE8 for its funny defineProperty
var ie8DomDefine = !DESCRIPTORS$d && !fails$n(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(createElement$1('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

var DESCRIPTORS$c = descriptors;
var call$h = functionCall;
var propertyIsEnumerableModule$1 = objectPropertyIsEnumerable;
var createPropertyDescriptor$4 = createPropertyDescriptor$5;
var toIndexedObject$5 = toIndexedObject$6;
var toPropertyKey$3 = toPropertyKey$4;
var hasOwn$a = hasOwnProperty_1;
var IE8_DOM_DEFINE$1 = ie8DomDefine;

// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor$1 = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
objectGetOwnPropertyDescriptor.f = DESCRIPTORS$c ? $getOwnPropertyDescriptor$1 : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject$5(O);
  P = toPropertyKey$3(P);
  if (IE8_DOM_DEFINE$1) try {
    return $getOwnPropertyDescriptor$1(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn$a(O, P)) return createPropertyDescriptor$4(!call$h(propertyIsEnumerableModule$1.f, O, P), O[P]);
};

var objectDefineProperty = {};

var DESCRIPTORS$b = descriptors;
var fails$m = fails$s;

// V8 ~ Chrome 36-
// https://bugs.chromium.org/p/v8/issues/detail?id=3334
var v8PrototypeDefineBug = DESCRIPTORS$b && fails$m(function () {
  // eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
  return Object.defineProperty(function () { /* empty */ }, 'prototype', {
    value: 42,
    writable: false
  }).prototype != 42;
});

var isObject$9 = isObject$d;

var $String$2 = String;
var $TypeError$b = TypeError;

// `Assert: Type(argument) is Object`
var anObject$e = function (argument) {
  if (isObject$9(argument)) return argument;
  throw $TypeError$b($String$2(argument) + ' is not an object');
};

var DESCRIPTORS$a = descriptors;
var IE8_DOM_DEFINE = ie8DomDefine;
var V8_PROTOTYPE_DEFINE_BUG$1 = v8PrototypeDefineBug;
var anObject$d = anObject$e;
var toPropertyKey$2 = toPropertyKey$4;

var $TypeError$a = TypeError;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var ENUMERABLE = 'enumerable';
var CONFIGURABLE$1 = 'configurable';
var WRITABLE = 'writable';

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
objectDefineProperty.f = DESCRIPTORS$a ? V8_PROTOTYPE_DEFINE_BUG$1 ? function defineProperty(O, P, Attributes) {
  anObject$d(O);
  P = toPropertyKey$2(P);
  anObject$d(Attributes);
  if (typeof O === 'function' && P === 'prototype' && 'value' in Attributes && WRITABLE in Attributes && !Attributes[WRITABLE]) {
    var current = $getOwnPropertyDescriptor(O, P);
    if (current && current[WRITABLE]) {
      O[P] = Attributes.value;
      Attributes = {
        configurable: CONFIGURABLE$1 in Attributes ? Attributes[CONFIGURABLE$1] : current[CONFIGURABLE$1],
        enumerable: ENUMERABLE in Attributes ? Attributes[ENUMERABLE] : current[ENUMERABLE],
        writable: false
      };
    }
  } return $defineProperty(O, P, Attributes);
} : $defineProperty : function defineProperty(O, P, Attributes) {
  anObject$d(O);
  P = toPropertyKey$2(P);
  anObject$d(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw $TypeError$a('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

var DESCRIPTORS$9 = descriptors;
var definePropertyModule$6 = objectDefineProperty;
var createPropertyDescriptor$3 = createPropertyDescriptor$5;

var createNonEnumerableProperty$8 = DESCRIPTORS$9 ? function (object, key, value) {
  return definePropertyModule$6.f(object, key, createPropertyDescriptor$3(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

var makeBuiltIn$2 = {exports: {}};

var DESCRIPTORS$8 = descriptors;
var hasOwn$9 = hasOwnProperty_1;

var FunctionPrototype$1 = Function.prototype;
// eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS$8 && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn$9(FunctionPrototype$1, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS$8 || (DESCRIPTORS$8 && getDescriptor(FunctionPrototype$1, 'name').configurable));

var functionName = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};

var uncurryThis$j = functionUncurryThis;
var isCallable$h = isCallable$n;
var store$1 = sharedStore;

var functionToString = uncurryThis$j(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable$h(store$1.inspectSource)) {
  store$1.inspectSource = function (it) {
    return functionToString(it);
  };
}

var inspectSource$4 = store$1.inspectSource;

var global$m = global$t;
var isCallable$g = isCallable$n;
var inspectSource$3 = inspectSource$4;

var WeakMap$1 = global$m.WeakMap;

var nativeWeakMap = isCallable$g(WeakMap$1) && /native code/.test(inspectSource$3(WeakMap$1));

var shared$2 = shared$4.exports;
var uid$1 = uid$3;

var keys$1 = shared$2('keys');

var sharedKey$3 = function (key) {
  return keys$1[key] || (keys$1[key] = uid$1(key));
};

var hiddenKeys$4 = {};

var NATIVE_WEAK_MAP = nativeWeakMap;
var global$l = global$t;
var uncurryThis$i = functionUncurryThis;
var isObject$8 = isObject$d;
var createNonEnumerableProperty$7 = createNonEnumerableProperty$8;
var hasOwn$8 = hasOwnProperty_1;
var shared$1 = sharedStore;
var sharedKey$2 = sharedKey$3;
var hiddenKeys$3 = hiddenKeys$4;

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError$3 = global$l.TypeError;
var WeakMap = global$l.WeakMap;
var set$2, get$1, has;

var enforce = function (it) {
  return has(it) ? get$1(it) : set$2(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject$8(it) || (state = get$1(it)).type !== TYPE) {
      throw TypeError$3('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared$1.state) {
  var store = shared$1.state || (shared$1.state = new WeakMap());
  var wmget = uncurryThis$i(store.get);
  var wmhas = uncurryThis$i(store.has);
  var wmset = uncurryThis$i(store.set);
  set$2 = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get$1 = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey$2('state');
  hiddenKeys$3[STATE] = true;
  set$2 = function (it, metadata) {
    if (hasOwn$8(it, STATE)) throw new TypeError$3(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty$7(it, STATE, metadata);
    return metadata;
  };
  get$1 = function (it) {
    return hasOwn$8(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn$8(it, STATE);
  };
}

var internalState = {
  set: set$2,
  get: get$1,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

var fails$l = fails$s;
var isCallable$f = isCallable$n;
var hasOwn$7 = hasOwnProperty_1;
var DESCRIPTORS$7 = descriptors;
var CONFIGURABLE_FUNCTION_NAME$2 = functionName.CONFIGURABLE;
var inspectSource$2 = inspectSource$4;
var InternalStateModule$5 = internalState;

var enforceInternalState$2 = InternalStateModule$5.enforce;
var getInternalState$5 = InternalStateModule$5.get;
// eslint-disable-next-line es-x/no-object-defineproperty -- safe
var defineProperty$6 = Object.defineProperty;

var CONFIGURABLE_LENGTH = DESCRIPTORS$7 && !fails$l(function () {
  return defineProperty$6(function () { /* empty */ }, 'length', { value: 8 }).length !== 8;
});

var TEMPLATE = String(String).split('String');

var makeBuiltIn$1 = makeBuiltIn$2.exports = function (value, name, options) {
  if (String(name).slice(0, 7) === 'Symbol(') {
    name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
  }
  if (options && options.getter) name = 'get ' + name;
  if (options && options.setter) name = 'set ' + name;
  if (!hasOwn$7(value, 'name') || (CONFIGURABLE_FUNCTION_NAME$2 && value.name !== name)) {
    if (DESCRIPTORS$7) defineProperty$6(value, 'name', { value: name, configurable: true });
    else value.name = name;
  }
  if (CONFIGURABLE_LENGTH && options && hasOwn$7(options, 'arity') && value.length !== options.arity) {
    defineProperty$6(value, 'length', { value: options.arity });
  }
  try {
    if (options && hasOwn$7(options, 'constructor') && options.constructor) {
      if (DESCRIPTORS$7) defineProperty$6(value, 'prototype', { writable: false });
    // in V8 ~ Chrome 53, prototypes of some methods, like `Array.prototype.values`, are non-writable
    } else if (value.prototype) value.prototype = undefined;
  } catch (error) { /* empty */ }
  var state = enforceInternalState$2(value);
  if (!hasOwn$7(state, 'source')) {
    state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
  } return value;
};

// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
// eslint-disable-next-line no-extend-native -- required
Function.prototype.toString = makeBuiltIn$1(function toString() {
  return isCallable$f(this) && getInternalState$5(this).source || inspectSource$2(this);
}, 'toString');

var isCallable$e = isCallable$n;
var definePropertyModule$5 = objectDefineProperty;
var makeBuiltIn = makeBuiltIn$2.exports;
var defineGlobalProperty$1 = defineGlobalProperty$3;

var defineBuiltIn$8 = function (O, key, value, options) {
  if (!options) options = {};
  var simple = options.enumerable;
  var name = options.name !== undefined ? options.name : key;
  if (isCallable$e(value)) makeBuiltIn(value, name, options);
  if (options.global) {
    if (simple) O[key] = value;
    else defineGlobalProperty$1(key, value);
  } else {
    try {
      if (!options.unsafe) delete O[key];
      else if (O[key]) simple = true;
    } catch (error) { /* empty */ }
    if (simple) O[key] = value;
    else definePropertyModule$5.f(O, key, {
      value: value,
      enumerable: false,
      configurable: !options.nonConfigurable,
      writable: !options.nonWritable
    });
  } return O;
};

var objectGetOwnPropertyNames = {};

var ceil = Math.ceil;
var floor$3 = Math.floor;

// `Math.trunc` method
// https://tc39.es/ecma262/#sec-math.trunc
// eslint-disable-next-line es-x/no-math-trunc -- safe
var mathTrunc = Math.trunc || function trunc(x) {
  var n = +x;
  return (n > 0 ? floor$3 : ceil)(n);
};

var trunc = mathTrunc;

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
var toIntegerOrInfinity$6 = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- NaN check
  return number !== number || number === 0 ? 0 : trunc(number);
};

var toIntegerOrInfinity$5 = toIntegerOrInfinity$6;

var max$1 = Math.max;
var min$2 = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
var toAbsoluteIndex$4 = function (index, length) {
  var integer = toIntegerOrInfinity$5(index);
  return integer < 0 ? max$1(integer + length, 0) : min$2(integer, length);
};

var toIntegerOrInfinity$4 = toIntegerOrInfinity$6;

var min$1 = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
var toLength$6 = function (argument) {
  return argument > 0 ? min$1(toIntegerOrInfinity$4(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};

var toLength$5 = toLength$6;

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
var lengthOfArrayLike$8 = function (obj) {
  return toLength$5(obj.length);
};

var toIndexedObject$4 = toIndexedObject$6;
var toAbsoluteIndex$3 = toAbsoluteIndex$4;
var lengthOfArrayLike$7 = lengthOfArrayLike$8;

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod$4 = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject$4($this);
    var length = lengthOfArrayLike$7(O);
    var index = toAbsoluteIndex$3(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

var arrayIncludes = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod$4(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod$4(false)
};

var uncurryThis$h = functionUncurryThis;
var hasOwn$6 = hasOwnProperty_1;
var toIndexedObject$3 = toIndexedObject$6;
var indexOf$1 = arrayIncludes.indexOf;
var hiddenKeys$2 = hiddenKeys$4;

var push$2 = uncurryThis$h([].push);

var objectKeysInternal = function (object, names) {
  var O = toIndexedObject$3(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn$6(hiddenKeys$2, key) && hasOwn$6(O, key) && push$2(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn$6(O, key = names[i++])) {
    ~indexOf$1(result, key) || push$2(result, key);
  }
  return result;
};

// IE8- don't enum bug keys
var enumBugKeys$3 = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

var internalObjectKeys$1 = objectKeysInternal;
var enumBugKeys$2 = enumBugKeys$3;

var hiddenKeys$1 = enumBugKeys$2.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es-x/no-object-getownpropertynames -- safe
objectGetOwnPropertyNames.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys$1(O, hiddenKeys$1);
};

var objectGetOwnPropertySymbols = {};

// eslint-disable-next-line es-x/no-object-getownpropertysymbols -- safe
objectGetOwnPropertySymbols.f = Object.getOwnPropertySymbols;

var getBuiltIn$5 = getBuiltIn$8;
var uncurryThis$g = functionUncurryThis;
var getOwnPropertyNamesModule = objectGetOwnPropertyNames;
var getOwnPropertySymbolsModule$1 = objectGetOwnPropertySymbols;
var anObject$c = anObject$e;

var concat$1 = uncurryThis$g([].concat);

// all object keys, includes non-enumerable and symbols
var ownKeys$1 = getBuiltIn$5('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject$c(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule$1.f;
  return getOwnPropertySymbols ? concat$1(keys, getOwnPropertySymbols(it)) : keys;
};

var hasOwn$5 = hasOwnProperty_1;
var ownKeys = ownKeys$1;
var getOwnPropertyDescriptorModule$1 = objectGetOwnPropertyDescriptor;
var definePropertyModule$4 = objectDefineProperty;

var copyConstructorProperties$1 = function (target, source, exceptions) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule$4.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule$1.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn$5(target, key) && !(exceptions && hasOwn$5(exceptions, key))) {
      defineProperty(target, key, getOwnPropertyDescriptor(source, key));
    }
  }
};

var fails$k = fails$s;
var isCallable$d = isCallable$n;

var replacement = /#|\.prototype\./;

var isForced$2 = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable$d(detection) ? fails$k(detection)
    : !!detection;
};

var normalize = isForced$2.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced$2.data = {};
var NATIVE = isForced$2.NATIVE = 'N';
var POLYFILL = isForced$2.POLYFILL = 'P';

var isForced_1 = isForced$2;

var global$k = global$t;
var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;
var createNonEnumerableProperty$6 = createNonEnumerableProperty$8;
var defineBuiltIn$7 = defineBuiltIn$8;
var defineGlobalProperty = defineGlobalProperty$3;
var copyConstructorProperties = copyConstructorProperties$1;
var isForced$1 = isForced_1;

/*
  options.target         - name of the target object
  options.global         - target is the global object
  options.stat           - export as static methods of target
  options.proto          - export as prototype methods of target
  options.real           - real prototype method for the `pure` version
  options.forced         - export even if the native feature is available
  options.bind           - bind methods to the target, required for the `pure` version
  options.wrap           - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe         - use the simple assignment of property instead of delete + defineProperty
  options.sham           - add a flag to not completely full polyfills
  options.enumerable     - export as enumerable property
  options.dontCallGetSet - prevent calling a getter on target
  options.name           - the .name of the function if it does not match the key
*/
var _export = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global$k;
  } else if (STATIC) {
    target = global$k[TARGET] || defineGlobalProperty(TARGET, {});
  } else {
    target = (global$k[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.dontCallGetSet) {
      descriptor = getOwnPropertyDescriptor$1(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced$1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty$6(sourceProperty, 'sham', true);
    }
    defineBuiltIn$7(target, key, sourceProperty, options);
  }
};

var classof$a = classofRaw$1;
var global$j = global$t;

var engineIsNode = classof$a(global$j.process) == 'process';

var isCallable$c = isCallable$n;

var $String$1 = String;
var $TypeError$9 = TypeError;

var aPossiblePrototype$1 = function (argument) {
  if (typeof argument == 'object' || isCallable$c(argument)) return argument;
  throw $TypeError$9("Can't set " + $String$1(argument) + ' as a prototype');
};

/* eslint-disable no-proto -- safe */

var uncurryThis$f = functionUncurryThis;
var anObject$b = anObject$e;
var aPossiblePrototype = aPossiblePrototype$1;

// `Object.setPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.setprototypeof
// Works with __proto__ only. Old v8 can't work with null proto objects.
// eslint-disable-next-line es-x/no-object-setprototypeof -- safe
var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
  var CORRECT_SETTER = false;
  var test = {};
  var setter;
  try {
    // eslint-disable-next-line es-x/no-object-getownpropertydescriptor -- safe
    setter = uncurryThis$f(Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set);
    setter(test, []);
    CORRECT_SETTER = test instanceof Array;
  } catch (error) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    anObject$b(O);
    aPossiblePrototype(proto);
    if (CORRECT_SETTER) setter(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

var defineProperty$5 = objectDefineProperty.f;
var hasOwn$4 = hasOwnProperty_1;
var wellKnownSymbol$h = wellKnownSymbol$j;

var TO_STRING_TAG$4 = wellKnownSymbol$h('toStringTag');

var setToStringTag$4 = function (target, TAG, STATIC) {
  if (target && !STATIC) target = target.prototype;
  if (target && !hasOwn$4(target, TO_STRING_TAG$4)) {
    defineProperty$5(target, TO_STRING_TAG$4, { configurable: true, value: TAG });
  }
};

var getBuiltIn$4 = getBuiltIn$8;
var definePropertyModule$3 = objectDefineProperty;
var wellKnownSymbol$g = wellKnownSymbol$j;
var DESCRIPTORS$6 = descriptors;

var SPECIES$4 = wellKnownSymbol$g('species');

var setSpecies$2 = function (CONSTRUCTOR_NAME) {
  var Constructor = getBuiltIn$4(CONSTRUCTOR_NAME);
  var defineProperty = definePropertyModule$3.f;

  if (DESCRIPTORS$6 && Constructor && !Constructor[SPECIES$4]) {
    defineProperty(Constructor, SPECIES$4, {
      configurable: true,
      get: function () { return this; }
    });
  }
};

var isPrototypeOf$3 = objectIsPrototypeOf;

var $TypeError$8 = TypeError;

var anInstance$3 = function (it, Prototype) {
  if (isPrototypeOf$3(Prototype, it)) return it;
  throw $TypeError$8('Incorrect invocation');
};

var wellKnownSymbol$f = wellKnownSymbol$j;

var TO_STRING_TAG$3 = wellKnownSymbol$f('toStringTag');
var test = {};

test[TO_STRING_TAG$3] = 'z';

var toStringTagSupport = String(test) === '[object z]';

var TO_STRING_TAG_SUPPORT = toStringTagSupport;
var isCallable$b = isCallable$n;
var classofRaw = classofRaw$1;
var wellKnownSymbol$e = wellKnownSymbol$j;

var TO_STRING_TAG$2 = wellKnownSymbol$e('toStringTag');
var $Object$1 = Object;

// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (error) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
var classof$9 = TO_STRING_TAG_SUPPORT ? classofRaw : function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = $Object$1(it), TO_STRING_TAG$2)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && isCallable$b(O.callee) ? 'Arguments' : result;
};

var uncurryThis$e = functionUncurryThis;
var fails$j = fails$s;
var isCallable$a = isCallable$n;
var classof$8 = classof$9;
var getBuiltIn$3 = getBuiltIn$8;
var inspectSource$1 = inspectSource$4;

var noop = function () { /* empty */ };
var empty = [];
var construct = getBuiltIn$3('Reflect', 'construct');
var constructorRegExp = /^\s*(?:class|function)\b/;
var exec$2 = uncurryThis$e(constructorRegExp.exec);
var INCORRECT_TO_STRING = !constructorRegExp.exec(noop);

var isConstructorModern = function isConstructor(argument) {
  if (!isCallable$a(argument)) return false;
  try {
    construct(noop, empty, argument);
    return true;
  } catch (error) {
    return false;
  }
};

var isConstructorLegacy = function isConstructor(argument) {
  if (!isCallable$a(argument)) return false;
  switch (classof$8(argument)) {
    case 'AsyncFunction':
    case 'GeneratorFunction':
    case 'AsyncGeneratorFunction': return false;
  }
  try {
    // we can't check .prototype since constructors produced by .bind haven't it
    // `Function#toString` throws on some built-it function in some legacy engines
    // (for example, `DOMQuad` and similar in FF41-)
    return INCORRECT_TO_STRING || !!exec$2(constructorRegExp, inspectSource$1(argument));
  } catch (error) {
    return true;
  }
};

isConstructorLegacy.sham = true;

// `IsConstructor` abstract operation
// https://tc39.es/ecma262/#sec-isconstructor
var isConstructor$2 = !construct || fails$j(function () {
  var called;
  return isConstructorModern(isConstructorModern.call)
    || !isConstructorModern(Object)
    || !isConstructorModern(function () { called = true; })
    || called;
}) ? isConstructorLegacy : isConstructorModern;

var isConstructor$1 = isConstructor$2;
var tryToString$3 = tryToString$5;

var $TypeError$7 = TypeError;

// `Assert: IsConstructor(argument) is true`
var aConstructor$2 = function (argument) {
  if (isConstructor$1(argument)) return argument;
  throw $TypeError$7(tryToString$3(argument) + ' is not a constructor');
};

var anObject$a = anObject$e;
var aConstructor$1 = aConstructor$2;
var wellKnownSymbol$d = wellKnownSymbol$j;

var SPECIES$3 = wellKnownSymbol$d('species');

// `SpeciesConstructor` abstract operation
// https://tc39.es/ecma262/#sec-speciesconstructor
var speciesConstructor$3 = function (O, defaultConstructor) {
  var C = anObject$a(O).constructor;
  var S;
  return C === undefined || (S = anObject$a(C)[SPECIES$3]) == undefined ? defaultConstructor : aConstructor$1(S);
};

var NATIVE_BIND$1 = functionBindNative;

var FunctionPrototype = Function.prototype;
var apply$3 = FunctionPrototype.apply;
var call$g = FunctionPrototype.call;

// eslint-disable-next-line es-x/no-reflect -- safe
var functionApply = typeof Reflect == 'object' && Reflect.apply || (NATIVE_BIND$1 ? call$g.bind(apply$3) : function () {
  return call$g.apply(apply$3, arguments);
});

var uncurryThis$d = functionUncurryThis;
var aCallable$7 = aCallable$9;
var NATIVE_BIND = functionBindNative;

var bind$6 = uncurryThis$d(uncurryThis$d.bind);

// optional / simple context binding
var functionBindContext = function (fn, that) {
  aCallable$7(fn);
  return that === undefined ? fn : NATIVE_BIND ? bind$6(fn, that) : function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

var getBuiltIn$2 = getBuiltIn$8;

var html$2 = getBuiltIn$2('document', 'documentElement');

var uncurryThis$c = functionUncurryThis;

var arraySlice$5 = uncurryThis$c([].slice);

var $TypeError$6 = TypeError;

var validateArgumentsLength$1 = function (passed, required) {
  if (passed < required) throw $TypeError$6('Not enough arguments');
  return passed;
};

var userAgent$4 = engineUserAgent;

var engineIsIos = /(?:ipad|iphone|ipod).*applewebkit/i.test(userAgent$4);

var global$i = global$t;
var apply$2 = functionApply;
var bind$5 = functionBindContext;
var isCallable$9 = isCallable$n;
var hasOwn$3 = hasOwnProperty_1;
var fails$i = fails$s;
var html$1 = html$2;
var arraySlice$4 = arraySlice$5;
var createElement = documentCreateElement$2;
var validateArgumentsLength = validateArgumentsLength$1;
var IS_IOS$1 = engineIsIos;
var IS_NODE$3 = engineIsNode;

var set$1 = global$i.setImmediate;
var clear = global$i.clearImmediate;
var process$2 = global$i.process;
var Dispatch = global$i.Dispatch;
var Function$1 = global$i.Function;
var MessageChannel = global$i.MessageChannel;
var String$1 = global$i.String;
var counter = 0;
var queue$1 = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var location, defer, channel, port;

try {
  // Deno throws a ReferenceError on `location` access without `--location` flag
  location = global$i.location;
} catch (error) { /* empty */ }

var run = function (id) {
  if (hasOwn$3(queue$1, id)) {
    var fn = queue$1[id];
    delete queue$1[id];
    fn();
  }
};

var runner = function (id) {
  return function () {
    run(id);
  };
};

var listener = function (event) {
  run(event.data);
};

var post = function (id) {
  // old engines have not location.origin
  global$i.postMessage(String$1(id), location.protocol + '//' + location.host);
};

// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!set$1 || !clear) {
  set$1 = function setImmediate(handler) {
    validateArgumentsLength(arguments.length, 1);
    var fn = isCallable$9(handler) ? handler : Function$1(handler);
    var args = arraySlice$4(arguments, 1);
    queue$1[++counter] = function () {
      apply$2(fn, undefined, args);
    };
    defer(counter);
    return counter;
  };
  clear = function clearImmediate(id) {
    delete queue$1[id];
  };
  // Node.js 0.8-
  if (IS_NODE$3) {
    defer = function (id) {
      process$2.nextTick(runner(id));
    };
  // Sphere (JS game engine) Dispatch API
  } else if (Dispatch && Dispatch.now) {
    defer = function (id) {
      Dispatch.now(runner(id));
    };
  // Browsers with MessageChannel, includes WebWorkers
  // except iOS - https://github.com/zloirock/core-js/issues/624
  } else if (MessageChannel && !IS_IOS$1) {
    channel = new MessageChannel();
    port = channel.port2;
    channel.port1.onmessage = listener;
    defer = bind$5(port.postMessage, port);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if (
    global$i.addEventListener &&
    isCallable$9(global$i.postMessage) &&
    !global$i.importScripts &&
    location && location.protocol !== 'file:' &&
    !fails$i(post)
  ) {
    defer = post;
    global$i.addEventListener('message', listener, false);
  // IE8-
  } else if (ONREADYSTATECHANGE in createElement('script')) {
    defer = function (id) {
      html$1.appendChild(createElement('script'))[ONREADYSTATECHANGE] = function () {
        html$1.removeChild(this);
        run(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function (id) {
      setTimeout(runner(id), 0);
    };
  }
}

var task$1 = {
  set: set$1,
  clear: clear
};

var userAgent$3 = engineUserAgent;
var global$h = global$t;

var engineIsIosPebble = /ipad|iphone|ipod/i.test(userAgent$3) && global$h.Pebble !== undefined;

var userAgent$2 = engineUserAgent;

var engineIsWebosWebkit = /web0s(?!.*chrome)/i.test(userAgent$2);

var global$g = global$t;
var bind$4 = functionBindContext;
var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
var macrotask = task$1.set;
var IS_IOS = engineIsIos;
var IS_IOS_PEBBLE = engineIsIosPebble;
var IS_WEBOS_WEBKIT = engineIsWebosWebkit;
var IS_NODE$2 = engineIsNode;

var MutationObserver = global$g.MutationObserver || global$g.WebKitMutationObserver;
var document$2 = global$g.document;
var process$1 = global$g.process;
var Promise$1 = global$g.Promise;
// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
var queueMicrotaskDescriptor = getOwnPropertyDescriptor(global$g, 'queueMicrotask');
var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

var flush, head, last, notify$1, toggle, node, promise, then;

// modern engines have queueMicrotask method
if (!queueMicrotask) {
  flush = function () {
    var parent, fn;
    if (IS_NODE$2 && (parent = process$1.domain)) parent.exit();
    while (head) {
      fn = head.fn;
      head = head.next;
      try {
        fn();
      } catch (error) {
        if (head) notify$1();
        else last = undefined;
        throw error;
      }
    } last = undefined;
    if (parent) parent.enter();
  };

  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
  // also except WebOS Webkit https://github.com/zloirock/core-js/issues/898
  if (!IS_IOS && !IS_NODE$2 && !IS_WEBOS_WEBKIT && MutationObserver && document$2) {
    toggle = true;
    node = document$2.createTextNode('');
    new MutationObserver(flush).observe(node, { characterData: true });
    notify$1 = function () {
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if (!IS_IOS_PEBBLE && Promise$1 && Promise$1.resolve) {
    // Promise.resolve without an argument throws an error in LG WebOS 2
    promise = Promise$1.resolve(undefined);
    // workaround of WebKit ~ iOS Safari 10.1 bug
    promise.constructor = Promise$1;
    then = bind$4(promise.then, promise);
    notify$1 = function () {
      then(flush);
    };
  // Node.js without promises
  } else if (IS_NODE$2) {
    notify$1 = function () {
      process$1.nextTick(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessage
  // - onreadystatechange
  // - setTimeout
  } else {
    // strange IE + webpack dev server bug - use .bind(global)
    macrotask = bind$4(macrotask, global$g);
    notify$1 = function () {
      macrotask(flush);
    };
  }
}

var microtask$1 = queueMicrotask || function (fn) {
  var task = { fn: fn, next: undefined };
  if (last) last.next = task;
  if (!head) {
    head = task;
    notify$1();
  } last = task;
};

var global$f = global$t;

var hostReportErrors$1 = function (a, b) {
  var console = global$f.console;
  if (console && console.error) {
    arguments.length == 1 ? console.error(a) : console.error(a, b);
  }
};

var perform$3 = function (exec) {
  try {
    return { error: false, value: exec() };
  } catch (error) {
    return { error: true, value: error };
  }
};

var Queue$1 = function () {
  this.head = null;
  this.tail = null;
};

Queue$1.prototype = {
  add: function (item) {
    var entry = { item: item, next: null };
    if (this.head) this.tail.next = entry;
    else this.head = entry;
    this.tail = entry;
  },
  get: function () {
    var entry = this.head;
    if (entry) {
      this.head = entry.next;
      if (this.tail === entry) this.tail = null;
      return entry.item;
    }
  }
};

var queue = Queue$1;

var global$e = global$t;

var promiseNativeConstructor = global$e.Promise;

var engineIsBrowser = typeof window == 'object' && typeof Deno != 'object';

var global$d = global$t;
var NativePromiseConstructor$3 = promiseNativeConstructor;
var isCallable$8 = isCallable$n;
var isForced = isForced_1;
var inspectSource = inspectSource$4;
var wellKnownSymbol$c = wellKnownSymbol$j;
var IS_BROWSER = engineIsBrowser;
var V8_VERSION = engineV8Version;

NativePromiseConstructor$3 && NativePromiseConstructor$3.prototype;
var SPECIES$2 = wellKnownSymbol$c('species');
var SUBCLASSING = false;
var NATIVE_PROMISE_REJECTION_EVENT$1 = isCallable$8(global$d.PromiseRejectionEvent);

var FORCED_PROMISE_CONSTRUCTOR$5 = isForced('Promise', function () {
  var PROMISE_CONSTRUCTOR_SOURCE = inspectSource(NativePromiseConstructor$3);
  var GLOBAL_CORE_JS_PROMISE = PROMISE_CONSTRUCTOR_SOURCE !== String(NativePromiseConstructor$3);
  // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
  // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
  // We can't detect it synchronously, so just check versions
  if (!GLOBAL_CORE_JS_PROMISE && V8_VERSION === 66) return true;
  // We can't use @@species feature detection in V8 since it causes
  // deoptimization and performance degradation
  // https://github.com/zloirock/core-js/issues/679
  if (V8_VERSION >= 51 && /native code/.test(PROMISE_CONSTRUCTOR_SOURCE)) return false;
  // Detect correctness of subclassing with @@species support
  var promise = new NativePromiseConstructor$3(function (resolve) { resolve(1); });
  var FakePromise = function (exec) {
    exec(function () { /* empty */ }, function () { /* empty */ });
  };
  var constructor = promise.constructor = {};
  constructor[SPECIES$2] = FakePromise;
  SUBCLASSING = promise.then(function () { /* empty */ }) instanceof FakePromise;
  if (!SUBCLASSING) return true;
  // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
  return !GLOBAL_CORE_JS_PROMISE && IS_BROWSER && !NATIVE_PROMISE_REJECTION_EVENT$1;
});

var promiseConstructorDetection = {
  CONSTRUCTOR: FORCED_PROMISE_CONSTRUCTOR$5,
  REJECTION_EVENT: NATIVE_PROMISE_REJECTION_EVENT$1,
  SUBCLASSING: SUBCLASSING
};

var newPromiseCapability$2 = {};

var aCallable$6 = aCallable$9;

var PromiseCapability = function (C) {
  var resolve, reject;
  this.promise = new C(function ($$resolve, $$reject) {
    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject = $$reject;
  });
  this.resolve = aCallable$6(resolve);
  this.reject = aCallable$6(reject);
};

// `NewPromiseCapability` abstract operation
// https://tc39.es/ecma262/#sec-newpromisecapability
newPromiseCapability$2.f = function (C) {
  return new PromiseCapability(C);
};

var $$e = _export;
var IS_NODE$1 = engineIsNode;
var global$c = global$t;
var call$f = functionCall;
var defineBuiltIn$6 = defineBuiltIn$8;
var setPrototypeOf$5 = objectSetPrototypeOf;
var setToStringTag$3 = setToStringTag$4;
var setSpecies$1 = setSpecies$2;
var aCallable$5 = aCallable$9;
var isCallable$7 = isCallable$n;
var isObject$7 = isObject$d;
var anInstance$2 = anInstance$3;
var speciesConstructor$2 = speciesConstructor$3;
var task = task$1.set;
var microtask = microtask$1;
var hostReportErrors = hostReportErrors$1;
var perform$2 = perform$3;
var Queue = queue;
var InternalStateModule$4 = internalState;
var NativePromiseConstructor$2 = promiseNativeConstructor;
var PromiseConstructorDetection = promiseConstructorDetection;
var newPromiseCapabilityModule$3 = newPromiseCapability$2;

var PROMISE = 'Promise';
var FORCED_PROMISE_CONSTRUCTOR$4 = PromiseConstructorDetection.CONSTRUCTOR;
var NATIVE_PROMISE_REJECTION_EVENT = PromiseConstructorDetection.REJECTION_EVENT;
var NATIVE_PROMISE_SUBCLASSING = PromiseConstructorDetection.SUBCLASSING;
var getInternalPromiseState = InternalStateModule$4.getterFor(PROMISE);
var setInternalState$3 = InternalStateModule$4.set;
var NativePromisePrototype$1 = NativePromiseConstructor$2 && NativePromiseConstructor$2.prototype;
var PromiseConstructor = NativePromiseConstructor$2;
var PromisePrototype = NativePromisePrototype$1;
var TypeError$2 = global$c.TypeError;
var document$1 = global$c.document;
var process = global$c.process;
var newPromiseCapability$1 = newPromiseCapabilityModule$3.f;
var newGenericPromiseCapability = newPromiseCapability$1;

var DISPATCH_EVENT = !!(document$1 && document$1.createEvent && global$c.dispatchEvent);
var UNHANDLED_REJECTION = 'unhandledrejection';
var REJECTION_HANDLED = 'rejectionhandled';
var PENDING = 0;
var FULFILLED = 1;
var REJECTED = 2;
var HANDLED = 1;
var UNHANDLED = 2;

var Internal, OwnPromiseCapability, PromiseWrapper, nativeThen;

// helpers
var isThenable = function (it) {
  var then;
  return isObject$7(it) && isCallable$7(then = it.then) ? then : false;
};

var callReaction = function (reaction, state) {
  var value = state.value;
  var ok = state.state == FULFILLED;
  var handler = ok ? reaction.ok : reaction.fail;
  var resolve = reaction.resolve;
  var reject = reaction.reject;
  var domain = reaction.domain;
  var result, then, exited;
  try {
    if (handler) {
      if (!ok) {
        if (state.rejection === UNHANDLED) onHandleUnhandled(state);
        state.rejection = HANDLED;
      }
      if (handler === true) result = value;
      else {
        if (domain) domain.enter();
        result = handler(value); // can throw
        if (domain) {
          domain.exit();
          exited = true;
        }
      }
      if (result === reaction.promise) {
        reject(TypeError$2('Promise-chain cycle'));
      } else if (then = isThenable(result)) {
        call$f(then, result, resolve, reject);
      } else resolve(result);
    } else reject(value);
  } catch (error) {
    if (domain && !exited) domain.exit();
    reject(error);
  }
};

var notify = function (state, isReject) {
  if (state.notified) return;
  state.notified = true;
  microtask(function () {
    var reactions = state.reactions;
    var reaction;
    while (reaction = reactions.get()) {
      callReaction(reaction, state);
    }
    state.notified = false;
    if (isReject && !state.rejection) onUnhandled(state);
  });
};

var dispatchEvent = function (name, promise, reason) {
  var event, handler;
  if (DISPATCH_EVENT) {
    event = document$1.createEvent('Event');
    event.promise = promise;
    event.reason = reason;
    event.initEvent(name, false, true);
    global$c.dispatchEvent(event);
  } else event = { promise: promise, reason: reason };
  if (!NATIVE_PROMISE_REJECTION_EVENT && (handler = global$c['on' + name])) handler(event);
  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
};

var onUnhandled = function (state) {
  call$f(task, global$c, function () {
    var promise = state.facade;
    var value = state.value;
    var IS_UNHANDLED = isUnhandled(state);
    var result;
    if (IS_UNHANDLED) {
      result = perform$2(function () {
        if (IS_NODE$1) {
          process.emit('unhandledRejection', value, promise);
        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
      if (result.error) throw result.value;
    }
  });
};

var isUnhandled = function (state) {
  return state.rejection !== HANDLED && !state.parent;
};

var onHandleUnhandled = function (state) {
  call$f(task, global$c, function () {
    var promise = state.facade;
    if (IS_NODE$1) {
      process.emit('rejectionHandled', promise);
    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
  });
};

var bind$3 = function (fn, state, unwrap) {
  return function (value) {
    fn(state, value, unwrap);
  };
};

var internalReject = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  state.value = value;
  state.state = REJECTED;
  notify(state, true);
};

var internalResolve = function (state, value, unwrap) {
  if (state.done) return;
  state.done = true;
  if (unwrap) state = unwrap;
  try {
    if (state.facade === value) throw TypeError$2("Promise can't be resolved itself");
    var then = isThenable(value);
    if (then) {
      microtask(function () {
        var wrapper = { done: false };
        try {
          call$f(then, value,
            bind$3(internalResolve, wrapper, state),
            bind$3(internalReject, wrapper, state)
          );
        } catch (error) {
          internalReject(wrapper, error, state);
        }
      });
    } else {
      state.value = value;
      state.state = FULFILLED;
      notify(state, false);
    }
  } catch (error) {
    internalReject({ done: false }, error, state);
  }
};

// constructor polyfill
if (FORCED_PROMISE_CONSTRUCTOR$4) {
  // 25.4.3.1 Promise(executor)
  PromiseConstructor = function Promise(executor) {
    anInstance$2(this, PromisePrototype);
    aCallable$5(executor);
    call$f(Internal, this);
    var state = getInternalPromiseState(this);
    try {
      executor(bind$3(internalResolve, state), bind$3(internalReject, state));
    } catch (error) {
      internalReject(state, error);
    }
  };

  PromisePrototype = PromiseConstructor.prototype;

  // eslint-disable-next-line no-unused-vars -- required for `.length`
  Internal = function Promise(executor) {
    setInternalState$3(this, {
      type: PROMISE,
      done: false,
      notified: false,
      parent: false,
      reactions: new Queue(),
      rejection: false,
      state: PENDING,
      value: undefined
    });
  };

  // `Promise.prototype.then` method
  // https://tc39.es/ecma262/#sec-promise.prototype.then
  Internal.prototype = defineBuiltIn$6(PromisePrototype, 'then', function then(onFulfilled, onRejected) {
    var state = getInternalPromiseState(this);
    var reaction = newPromiseCapability$1(speciesConstructor$2(this, PromiseConstructor));
    state.parent = true;
    reaction.ok = isCallable$7(onFulfilled) ? onFulfilled : true;
    reaction.fail = isCallable$7(onRejected) && onRejected;
    reaction.domain = IS_NODE$1 ? process.domain : undefined;
    if (state.state == PENDING) state.reactions.add(reaction);
    else microtask(function () {
      callReaction(reaction, state);
    });
    return reaction.promise;
  });

  OwnPromiseCapability = function () {
    var promise = new Internal();
    var state = getInternalPromiseState(promise);
    this.promise = promise;
    this.resolve = bind$3(internalResolve, state);
    this.reject = bind$3(internalReject, state);
  };

  newPromiseCapabilityModule$3.f = newPromiseCapability$1 = function (C) {
    return C === PromiseConstructor || C === PromiseWrapper
      ? new OwnPromiseCapability(C)
      : newGenericPromiseCapability(C);
  };

  if (isCallable$7(NativePromiseConstructor$2) && NativePromisePrototype$1 !== Object.prototype) {
    nativeThen = NativePromisePrototype$1.then;

    if (!NATIVE_PROMISE_SUBCLASSING) {
      // make `Promise#then` return a polyfilled `Promise` for native promise-based APIs
      defineBuiltIn$6(NativePromisePrototype$1, 'then', function then(onFulfilled, onRejected) {
        var that = this;
        return new PromiseConstructor(function (resolve, reject) {
          call$f(nativeThen, that, resolve, reject);
        }).then(onFulfilled, onRejected);
      // https://github.com/zloirock/core-js/issues/640
      }, { unsafe: true });
    }

    // make `.constructor === Promise` work for native promise-based APIs
    try {
      delete NativePromisePrototype$1.constructor;
    } catch (error) { /* empty */ }

    // make `instanceof Promise` work for native promise-based APIs
    if (setPrototypeOf$5) {
      setPrototypeOf$5(NativePromisePrototype$1, PromisePrototype);
    }
  }
}

$$e({ global: true, constructor: true, wrap: true, forced: FORCED_PROMISE_CONSTRUCTOR$4 }, {
  Promise: PromiseConstructor
});

setToStringTag$3(PromiseConstructor, PROMISE, false);
setSpecies$1(PROMISE);

var iterators = {};

var wellKnownSymbol$b = wellKnownSymbol$j;
var Iterators$4 = iterators;

var ITERATOR$5 = wellKnownSymbol$b('iterator');
var ArrayPrototype$1 = Array.prototype;

// check on default Array iterator
var isArrayIteratorMethod$2 = function (it) {
  return it !== undefined && (Iterators$4.Array === it || ArrayPrototype$1[ITERATOR$5] === it);
};

var classof$7 = classof$9;
var getMethod$2 = getMethod$4;
var Iterators$3 = iterators;
var wellKnownSymbol$a = wellKnownSymbol$j;

var ITERATOR$4 = wellKnownSymbol$a('iterator');

var getIteratorMethod$3 = function (it) {
  if (it != undefined) return getMethod$2(it, ITERATOR$4)
    || getMethod$2(it, '@@iterator')
    || Iterators$3[classof$7(it)];
};

var call$e = functionCall;
var aCallable$4 = aCallable$9;
var anObject$9 = anObject$e;
var tryToString$2 = tryToString$5;
var getIteratorMethod$2 = getIteratorMethod$3;

var $TypeError$5 = TypeError;

var getIterator$2 = function (argument, usingIterator) {
  var iteratorMethod = arguments.length < 2 ? getIteratorMethod$2(argument) : usingIterator;
  if (aCallable$4(iteratorMethod)) return anObject$9(call$e(iteratorMethod, argument));
  throw $TypeError$5(tryToString$2(argument) + ' is not iterable');
};

var call$d = functionCall;
var anObject$8 = anObject$e;
var getMethod$1 = getMethod$4;

var iteratorClose$1 = function (iterator, kind, value) {
  var innerResult, innerError;
  anObject$8(iterator);
  try {
    innerResult = getMethod$1(iterator, 'return');
    if (!innerResult) {
      if (kind === 'throw') throw value;
      return value;
    }
    innerResult = call$d(innerResult, iterator);
  } catch (error) {
    innerError = true;
    innerResult = error;
  }
  if (kind === 'throw') throw value;
  if (innerError) throw innerResult;
  anObject$8(innerResult);
  return value;
};

var bind$2 = functionBindContext;
var call$c = functionCall;
var anObject$7 = anObject$e;
var tryToString$1 = tryToString$5;
var isArrayIteratorMethod$1 = isArrayIteratorMethod$2;
var lengthOfArrayLike$6 = lengthOfArrayLike$8;
var isPrototypeOf$2 = objectIsPrototypeOf;
var getIterator$1 = getIterator$2;
var getIteratorMethod$1 = getIteratorMethod$3;
var iteratorClose = iteratorClose$1;

var $TypeError$4 = TypeError;

var Result = function (stopped, result) {
  this.stopped = stopped;
  this.result = result;
};

var ResultPrototype = Result.prototype;

var iterate$2 = function (iterable, unboundFunction, options) {
  var that = options && options.that;
  var AS_ENTRIES = !!(options && options.AS_ENTRIES);
  var IS_ITERATOR = !!(options && options.IS_ITERATOR);
  var INTERRUPTED = !!(options && options.INTERRUPTED);
  var fn = bind$2(unboundFunction, that);
  var iterator, iterFn, index, length, result, next, step;

  var stop = function (condition) {
    if (iterator) iteratorClose(iterator, 'normal', condition);
    return new Result(true, condition);
  };

  var callFn = function (value) {
    if (AS_ENTRIES) {
      anObject$7(value);
      return INTERRUPTED ? fn(value[0], value[1], stop) : fn(value[0], value[1]);
    } return INTERRUPTED ? fn(value, stop) : fn(value);
  };

  if (IS_ITERATOR) {
    iterator = iterable;
  } else {
    iterFn = getIteratorMethod$1(iterable);
    if (!iterFn) throw $TypeError$4(tryToString$1(iterable) + ' is not iterable');
    // optimisation for array iterators
    if (isArrayIteratorMethod$1(iterFn)) {
      for (index = 0, length = lengthOfArrayLike$6(iterable); length > index; index++) {
        result = callFn(iterable[index]);
        if (result && isPrototypeOf$2(ResultPrototype, result)) return result;
      } return new Result(false);
    }
    iterator = getIterator$1(iterable, iterFn);
  }

  next = iterator.next;
  while (!(step = call$c(next, iterator)).done) {
    try {
      result = callFn(step.value);
    } catch (error) {
      iteratorClose(iterator, 'throw', error);
    }
    if (typeof result == 'object' && result && isPrototypeOf$2(ResultPrototype, result)) return result;
  } return new Result(false);
};

var wellKnownSymbol$9 = wellKnownSymbol$j;

var ITERATOR$3 = wellKnownSymbol$9('iterator');
var SAFE_CLOSING = false;

try {
  var called = 0;
  var iteratorWithReturn = {
    next: function () {
      return { done: !!called++ };
    },
    'return': function () {
      SAFE_CLOSING = true;
    }
  };
  iteratorWithReturn[ITERATOR$3] = function () {
    return this;
  };
  // eslint-disable-next-line es-x/no-array-from, no-throw-literal -- required for testing
  Array.from(iteratorWithReturn, function () { throw 2; });
} catch (error) { /* empty */ }

var checkCorrectnessOfIteration$2 = function (exec, SKIP_CLOSING) {
  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
  var ITERATION_SUPPORT = false;
  try {
    var object = {};
    object[ITERATOR$3] = function () {
      return {
        next: function () {
          return { done: ITERATION_SUPPORT = true };
        }
      };
    };
    exec(object);
  } catch (error) { /* empty */ }
  return ITERATION_SUPPORT;
};

var NativePromiseConstructor$1 = promiseNativeConstructor;
var checkCorrectnessOfIteration$1 = checkCorrectnessOfIteration$2;
var FORCED_PROMISE_CONSTRUCTOR$3 = promiseConstructorDetection.CONSTRUCTOR;

var promiseStaticsIncorrectIteration = FORCED_PROMISE_CONSTRUCTOR$3 || !checkCorrectnessOfIteration$1(function (iterable) {
  NativePromiseConstructor$1.all(iterable).then(undefined, function () { /* empty */ });
});

var $$d = _export;
var call$b = functionCall;
var aCallable$3 = aCallable$9;
var newPromiseCapabilityModule$2 = newPromiseCapability$2;
var perform$1 = perform$3;
var iterate$1 = iterate$2;
var PROMISE_STATICS_INCORRECT_ITERATION$1 = promiseStaticsIncorrectIteration;

// `Promise.all` method
// https://tc39.es/ecma262/#sec-promise.all
$$d({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION$1 }, {
  all: function all(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule$2.f(C);
    var resolve = capability.resolve;
    var reject = capability.reject;
    var result = perform$1(function () {
      var $promiseResolve = aCallable$3(C.resolve);
      var values = [];
      var counter = 0;
      var remaining = 1;
      iterate$1(iterable, function (promise) {
        var index = counter++;
        var alreadyCalled = false;
        remaining++;
        call$b($promiseResolve, C, promise).then(function (value) {
          if (alreadyCalled) return;
          alreadyCalled = true;
          values[index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

var $$c = _export;
var FORCED_PROMISE_CONSTRUCTOR$2 = promiseConstructorDetection.CONSTRUCTOR;
var NativePromiseConstructor = promiseNativeConstructor;
var getBuiltIn$1 = getBuiltIn$8;
var isCallable$6 = isCallable$n;
var defineBuiltIn$5 = defineBuiltIn$8;

var NativePromisePrototype = NativePromiseConstructor && NativePromiseConstructor.prototype;

// `Promise.prototype.catch` method
// https://tc39.es/ecma262/#sec-promise.prototype.catch
$$c({ target: 'Promise', proto: true, forced: FORCED_PROMISE_CONSTRUCTOR$2, real: true }, {
  'catch': function (onRejected) {
    return this.then(undefined, onRejected);
  }
});

// makes sure that native promise-based APIs `Promise#catch` properly works with patched `Promise#then`
if (isCallable$6(NativePromiseConstructor)) {
  var method = getBuiltIn$1('Promise').prototype['catch'];
  if (NativePromisePrototype['catch'] !== method) {
    defineBuiltIn$5(NativePromisePrototype, 'catch', method, { unsafe: true });
  }
}

var $$b = _export;
var call$a = functionCall;
var aCallable$2 = aCallable$9;
var newPromiseCapabilityModule$1 = newPromiseCapability$2;
var perform = perform$3;
var iterate = iterate$2;
var PROMISE_STATICS_INCORRECT_ITERATION = promiseStaticsIncorrectIteration;

// `Promise.race` method
// https://tc39.es/ecma262/#sec-promise.race
$$b({ target: 'Promise', stat: true, forced: PROMISE_STATICS_INCORRECT_ITERATION }, {
  race: function race(iterable) {
    var C = this;
    var capability = newPromiseCapabilityModule$1.f(C);
    var reject = capability.reject;
    var result = perform(function () {
      var $promiseResolve = aCallable$2(C.resolve);
      iterate(iterable, function (promise) {
        call$a($promiseResolve, C, promise).then(capability.resolve, reject);
      });
    });
    if (result.error) reject(result.value);
    return capability.promise;
  }
});

var $$a = _export;
var call$9 = functionCall;
var newPromiseCapabilityModule = newPromiseCapability$2;
var FORCED_PROMISE_CONSTRUCTOR$1 = promiseConstructorDetection.CONSTRUCTOR;

// `Promise.reject` method
// https://tc39.es/ecma262/#sec-promise.reject
$$a({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR$1 }, {
  reject: function reject(r) {
    var capability = newPromiseCapabilityModule.f(this);
    call$9(capability.reject, undefined, r);
    return capability.promise;
  }
});

var anObject$6 = anObject$e;
var isObject$6 = isObject$d;
var newPromiseCapability = newPromiseCapability$2;

var promiseResolve$1 = function (C, x) {
  anObject$6(C);
  if (isObject$6(x) && x.constructor === C) return x;
  var promiseCapability = newPromiseCapability.f(C);
  var resolve = promiseCapability.resolve;
  resolve(x);
  return promiseCapability.promise;
};

var $$9 = _export;
var getBuiltIn = getBuiltIn$8;
var FORCED_PROMISE_CONSTRUCTOR = promiseConstructorDetection.CONSTRUCTOR;
var promiseResolve = promiseResolve$1;

getBuiltIn('Promise');

// `Promise.resolve` method
// https://tc39.es/ecma262/#sec-promise.resolve
$$9({ target: 'Promise', stat: true, forced: FORCED_PROMISE_CONSTRUCTOR }, {
  resolve: function resolve(x) {
    return promiseResolve(this, x);
  }
});

class WebStorageService {
  getItem(key) {
    return new Promise(resolve => {
      const value = localStorage.getItem(key);
      resolve(value);
    });
  }
  setItem(key, value) {
    return new Promise(resolve => {
      localStorage.setItem(key, value);
      resolve();
    });
  }
  removeItem(key) {
    return new Promise(resolve => {
      localStorage.removeItem(key);
      resolve();
    });
  }
}

var objectDefineProperties = {};

var internalObjectKeys = objectKeysInternal;
var enumBugKeys$1 = enumBugKeys$3;

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es-x/no-object-keys -- safe
var objectKeys$2 = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys$1);
};

var DESCRIPTORS$5 = descriptors;
var V8_PROTOTYPE_DEFINE_BUG = v8PrototypeDefineBug;
var definePropertyModule$2 = objectDefineProperty;
var anObject$5 = anObject$e;
var toIndexedObject$2 = toIndexedObject$6;
var objectKeys$1 = objectKeys$2;

// `Object.defineProperties` method
// https://tc39.es/ecma262/#sec-object.defineproperties
// eslint-disable-next-line es-x/no-object-defineproperties -- safe
objectDefineProperties.f = DESCRIPTORS$5 && !V8_PROTOTYPE_DEFINE_BUG ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject$5(O);
  var props = toIndexedObject$2(Properties);
  var keys = objectKeys$1(Properties);
  var length = keys.length;
  var index = 0;
  var key;
  while (length > index) definePropertyModule$2.f(O, key = keys[index++], props[key]);
  return O;
};

/* global ActiveXObject -- old IE, WSH */

var anObject$4 = anObject$e;
var definePropertiesModule = objectDefineProperties;
var enumBugKeys = enumBugKeys$3;
var hiddenKeys = hiddenKeys$4;
var html = html$2;
var documentCreateElement$1 = documentCreateElement$2;
var sharedKey$1 = sharedKey$3;

var GT = '>';
var LT = '<';
var PROTOTYPE$1 = 'prototype';
var SCRIPT = 'script';
var IE_PROTO$1 = sharedKey$1('IE_PROTO');

var EmptyConstructor = function () { /* empty */ };

var scriptTag = function (content) {
  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
};

// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
var NullProtoObjectViaActiveX = function (activeXDocument) {
  activeXDocument.write(scriptTag(''));
  activeXDocument.close();
  var temp = activeXDocument.parentWindow.Object;
  activeXDocument = null; // avoid memory leak
  return temp;
};

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var NullProtoObjectViaIFrame = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement$1('iframe');
  var JS = 'java' + SCRIPT + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  // https://github.com/zloirock/core-js/issues/475
  iframe.src = String(JS);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(scriptTag('document.F=Object'));
  iframeDocument.close();
  return iframeDocument.F;
};

// Check for document.domain and active x support
// No need to use active x approach when document.domain is not set
// see https://github.com/es-shims/es5-shim/issues/150
// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
// avoid IE GC bug
var activeXDocument;
var NullProtoObject = function () {
  try {
    activeXDocument = new ActiveXObject('htmlfile');
  } catch (error) { /* ignore */ }
  NullProtoObject = typeof document != 'undefined'
    ? document.domain && activeXDocument
      ? NullProtoObjectViaActiveX(activeXDocument) // old IE
      : NullProtoObjectViaIFrame()
    : NullProtoObjectViaActiveX(activeXDocument); // WSH
  var length = enumBugKeys.length;
  while (length--) delete NullProtoObject[PROTOTYPE$1][enumBugKeys[length]];
  return NullProtoObject();
};

hiddenKeys[IE_PROTO$1] = true;

// `Object.create` method
// https://tc39.es/ecma262/#sec-object.create
// eslint-disable-next-line es-x/no-object-create -- safe
var objectCreate = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    EmptyConstructor[PROTOTYPE$1] = anObject$4(O);
    result = new EmptyConstructor();
    EmptyConstructor[PROTOTYPE$1] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO$1] = O;
  } else result = NullProtoObject();
  return Properties === undefined ? result : definePropertiesModule.f(result, Properties);
};

var wellKnownSymbol$8 = wellKnownSymbol$j;
var create$3 = objectCreate;
var defineProperty$4 = objectDefineProperty.f;

var UNSCOPABLES = wellKnownSymbol$8('unscopables');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  defineProperty$4(ArrayPrototype, UNSCOPABLES, {
    configurable: true,
    value: create$3(null)
  });
}

// add a key to Array.prototype[@@unscopables]
var addToUnscopables$2 = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

var fails$h = fails$s;

var correctPrototypeGetter = !fails$h(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  // eslint-disable-next-line es-x/no-object-getprototypeof -- required for testing
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

var hasOwn$2 = hasOwnProperty_1;
var isCallable$5 = isCallable$n;
var toObject$5 = toObject$7;
var sharedKey = sharedKey$3;
var CORRECT_PROTOTYPE_GETTER = correctPrototypeGetter;

var IE_PROTO = sharedKey('IE_PROTO');
var $Object = Object;
var ObjectPrototype$2 = $Object.prototype;

// `Object.getPrototypeOf` method
// https://tc39.es/ecma262/#sec-object.getprototypeof
// eslint-disable-next-line es-x/no-object-getprototypeof -- safe
var objectGetPrototypeOf = CORRECT_PROTOTYPE_GETTER ? $Object.getPrototypeOf : function (O) {
  var object = toObject$5(O);
  if (hasOwn$2(object, IE_PROTO)) return object[IE_PROTO];
  var constructor = object.constructor;
  if (isCallable$5(constructor) && object instanceof constructor) {
    return constructor.prototype;
  } return object instanceof $Object ? ObjectPrototype$2 : null;
};

var fails$g = fails$s;
var isCallable$4 = isCallable$n;
var getPrototypeOf$3 = objectGetPrototypeOf;
var defineBuiltIn$4 = defineBuiltIn$8;
var wellKnownSymbol$7 = wellKnownSymbol$j;

var ITERATOR$2 = wellKnownSymbol$7('iterator');
var BUGGY_SAFARI_ITERATORS$1 = false;

// `%IteratorPrototype%` object
// https://tc39.es/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype$2, PrototypeOfArrayIteratorPrototype, arrayIterator;

/* eslint-disable es-x/no-array-prototype-keys -- safe */
if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS$1 = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf$3(getPrototypeOf$3(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype$2 = PrototypeOfArrayIteratorPrototype;
  }
}

var NEW_ITERATOR_PROTOTYPE = IteratorPrototype$2 == undefined || fails$g(function () {
  var test = {};
  // FF44- legacy iterators case
  return IteratorPrototype$2[ITERATOR$2].call(test) !== test;
});

if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype$2 = {};

// `%IteratorPrototype%[@@iterator]()` method
// https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator
if (!isCallable$4(IteratorPrototype$2[ITERATOR$2])) {
  defineBuiltIn$4(IteratorPrototype$2, ITERATOR$2, function () {
    return this;
  });
}

var iteratorsCore = {
  IteratorPrototype: IteratorPrototype$2,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS$1
};

var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;
var create$2 = objectCreate;
var createPropertyDescriptor$2 = createPropertyDescriptor$5;
var setToStringTag$2 = setToStringTag$4;
var Iterators$2 = iterators;

var returnThis$1 = function () { return this; };

var createIteratorConstructor$1 = function (IteratorConstructor, NAME, next, ENUMERABLE_NEXT) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create$2(IteratorPrototype$1, { next: createPropertyDescriptor$2(+!ENUMERABLE_NEXT, next) });
  setToStringTag$2(IteratorConstructor, TO_STRING_TAG, false);
  Iterators$2[TO_STRING_TAG] = returnThis$1;
  return IteratorConstructor;
};

var $$8 = _export;
var call$8 = functionCall;
var FunctionName$1 = functionName;
var isCallable$3 = isCallable$n;
var createIteratorConstructor = createIteratorConstructor$1;
var getPrototypeOf$2 = objectGetPrototypeOf;
var setPrototypeOf$4 = objectSetPrototypeOf;
var setToStringTag$1 = setToStringTag$4;
var createNonEnumerableProperty$5 = createNonEnumerableProperty$8;
var defineBuiltIn$3 = defineBuiltIn$8;
var wellKnownSymbol$6 = wellKnownSymbol$j;
var Iterators$1 = iterators;
var IteratorsCore = iteratorsCore;

var PROPER_FUNCTION_NAME$2 = FunctionName$1.PROPER;
var CONFIGURABLE_FUNCTION_NAME$1 = FunctionName$1.CONFIGURABLE;
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var ITERATOR$1 = wellKnownSymbol$6('iterator');
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

var defineIterator$1 = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR$1]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf$2(anyNativeIterator.call(new Iterable()));
    if (CurrentIteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (getPrototypeOf$2(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf$4) {
          setPrototypeOf$4(CurrentIteratorPrototype, IteratorPrototype);
        } else if (!isCallable$3(CurrentIteratorPrototype[ITERATOR$1])) {
          defineBuiltIn$3(CurrentIteratorPrototype, ITERATOR$1, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag$1(CurrentIteratorPrototype, TO_STRING_TAG, true);
    }
  }

  // fix Array.prototype.{ values, @@iterator }.name in V8 / FF
  if (PROPER_FUNCTION_NAME$2 && DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    if (CONFIGURABLE_FUNCTION_NAME$1) {
      createNonEnumerableProperty$5(IterablePrototype, 'name', VALUES);
    } else {
      INCORRECT_VALUES_NAME = true;
      defaultIterator = function values() { return call$8(nativeIterator, this); };
    }
  }

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        defineBuiltIn$3(IterablePrototype, KEY, methods[KEY]);
      }
    } else $$8({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  // define iterator
  if (IterablePrototype[ITERATOR$1] !== defaultIterator) {
    defineBuiltIn$3(IterablePrototype, ITERATOR$1, defaultIterator, { name: DEFAULT });
  }
  Iterators$1[NAME] = defaultIterator;

  return methods;
};

var toIndexedObject$1 = toIndexedObject$6;
var addToUnscopables$1 = addToUnscopables$2;
var Iterators = iterators;
var InternalStateModule$3 = internalState;
var defineProperty$3 = objectDefineProperty.f;
var defineIterator = defineIterator$1;
var DESCRIPTORS$4 = descriptors;

var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState$2 = InternalStateModule$3.set;
var getInternalState$4 = InternalStateModule$3.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.es/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.es/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.es/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.es/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.es/ecma262/#sec-createarrayiterator
var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState$2(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject$1(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState$4(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.es/ecma262/#sec-createunmappedargumentsobject
// https://tc39.es/ecma262/#sec-createmappedargumentsobject
var values = Iterators.Arguments = Iterators.Array;

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables$1('keys');
addToUnscopables$1('values');
addToUnscopables$1('entries');

// V8 ~ Chrome 45- bug
if (DESCRIPTORS$4 && values.name !== 'values') try {
  defineProperty$3(values, 'name', { value: 'values' });
} catch (error) { /* empty */ }

// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
var domIterables = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

// in old WebKit versions, `element.classList` is not an instance of global `DOMTokenList`
var documentCreateElement = documentCreateElement$2;

var classList = documentCreateElement('span').classList;
var DOMTokenListPrototype$1 = classList && classList.constructor && classList.constructor.prototype;

var domTokenListPrototype = DOMTokenListPrototype$1 === Object.prototype ? undefined : DOMTokenListPrototype$1;

var global$b = global$t;
var DOMIterables = domIterables;
var DOMTokenListPrototype = domTokenListPrototype;
var ArrayIteratorMethods = es_array_iterator;
var createNonEnumerableProperty$4 = createNonEnumerableProperty$8;
var wellKnownSymbol$5 = wellKnownSymbol$j;

var ITERATOR = wellKnownSymbol$5('iterator');
var TO_STRING_TAG$1 = wellKnownSymbol$5('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

var handlePrototype = function (CollectionPrototype, COLLECTION_NAME) {
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      createNonEnumerableProperty$4(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (error) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG$1]) {
      createNonEnumerableProperty$4(CollectionPrototype, TO_STRING_TAG$1, COLLECTION_NAME);
    }
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        createNonEnumerableProperty$4(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (error) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
};

for (var COLLECTION_NAME in DOMIterables) {
  handlePrototype(global$b[COLLECTION_NAME] && global$b[COLLECTION_NAME].prototype, COLLECTION_NAME);
}

handlePrototype(DOMTokenListPrototype, 'DOMTokenList');

class Logger {
  constructor(namespace) {
    this.namespace = namespace;
  }
  emit(method, ...params) {
    if (!Logger.debug) {
      return;
    }
    if (this.namespace && method !== "error") {
      // eslint-disable-next-line no-console
      console[method](this.namespace, ...params);
      return;
    }
    // eslint-disable-next-line no-console
    console[method](...params);
  }
  log(...params) {
    this.emit("log", ...params);
  }
  info(...params) {
    this.emit("info", ...params);
  }
  warn(...params) {
    this.emit("warn", ...params);
  }
  error(...params) {
    this.emit("error", ...params);
  }
}
Logger.debug = false;
const logger = new Logger();

var $$7 = _export;
var $includes = arrayIncludes.includes;
var fails$f = fails$s;
var addToUnscopables = addToUnscopables$2;

// FF99+ bug
var BROKEN_ON_SPARSE = fails$f(function () {
  return !Array(1).includes();
});

// `Array.prototype.includes` method
// https://tc39.es/ecma262/#sec-array.prototype.includes
$$7({ target: 'Array', proto: true, forced: BROKEN_ON_SPARSE }, {
  includes: function includes(el /* , fromIndex = 0 */) {
    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.es/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('includes');

var isObject$5 = isObject$d;
var classof$6 = classofRaw$1;
var wellKnownSymbol$4 = wellKnownSymbol$j;

var MATCH$1 = wellKnownSymbol$4('match');

// `IsRegExp` abstract operation
// https://tc39.es/ecma262/#sec-isregexp
var isRegexp = function (it) {
  var isRegExp;
  return isObject$5(it) && ((isRegExp = it[MATCH$1]) !== undefined ? !!isRegExp : classof$6(it) == 'RegExp');
};

var isRegExp$1 = isRegexp;

var $TypeError$3 = TypeError;

var notARegexp = function (it) {
  if (isRegExp$1(it)) {
    throw $TypeError$3("The method doesn't accept regular expressions");
  } return it;
};

var classof$5 = classof$9;

var $String = String;

var toString$5 = function (argument) {
  if (classof$5(argument) === 'Symbol') throw TypeError('Cannot convert a Symbol value to a string');
  return $String(argument);
};

var wellKnownSymbol$3 = wellKnownSymbol$j;

var MATCH = wellKnownSymbol$3('match');

var correctIsRegexpLogic = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (error1) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (error2) { /* empty */ }
  } return false;
};

var $$6 = _export;
var uncurryThis$b = functionUncurryThis;
var notARegExp = notARegexp;
var requireObjectCoercible$3 = requireObjectCoercible$6;
var toString$4 = toString$5;
var correctIsRegExpLogic = correctIsRegexpLogic;

var stringIndexOf = uncurryThis$b(''.indexOf);

// `String.prototype.includes` method
// https://tc39.es/ecma262/#sec-string.prototype.includes
$$6({ target: 'String', proto: true, forced: !correctIsRegExpLogic('includes') }, {
  includes: function includes(searchString /* , position = 0 */) {
    return !!~stringIndexOf(
      toString$4(requireObjectCoercible$3(this)),
      toString$4(notARegExp(searchString)),
      arguments.length > 1 ? arguments[1] : undefined
    );
  }
});

// a string of all valid unicode whitespaces
var whitespaces$2 = '\u0009\u000A\u000B\u000C\u000D\u0020\u00A0\u1680\u2000\u2001\u2002' +
  '\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029\uFEFF';

var uncurryThis$a = functionUncurryThis;
var requireObjectCoercible$2 = requireObjectCoercible$6;
var toString$3 = toString$5;
var whitespaces$1 = whitespaces$2;

var replace$1 = uncurryThis$a(''.replace);
var whitespace = '[' + whitespaces$1 + ']';
var ltrim = RegExp('^' + whitespace + whitespace + '*');
var rtrim = RegExp(whitespace + whitespace + '*$');

// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation
var createMethod$3 = function (TYPE) {
  return function ($this) {
    var string = toString$3(requireObjectCoercible$2($this));
    if (TYPE & 1) string = replace$1(string, ltrim, '');
    if (TYPE & 2) string = replace$1(string, rtrim, '');
    return string;
  };
};

var stringTrim = {
  // `String.prototype.{ trimLeft, trimStart }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimstart
  start: createMethod$3(1),
  // `String.prototype.{ trimRight, trimEnd }` methods
  // https://tc39.es/ecma262/#sec-string.prototype.trimend
  end: createMethod$3(2),
  // `String.prototype.trim` method
  // https://tc39.es/ecma262/#sec-string.prototype.trim
  trim: createMethod$3(3)
};

var PROPER_FUNCTION_NAME$1 = functionName.PROPER;
var fails$e = fails$s;
var whitespaces = whitespaces$2;

var non = '\u200B\u0085\u180E';

// check that a method works with the correct list
// of whitespaces and has a correct name
var stringTrimForced = function (METHOD_NAME) {
  return fails$e(function () {
    return !!whitespaces[METHOD_NAME]()
      || non[METHOD_NAME]() !== non
      || (PROPER_FUNCTION_NAME$1 && whitespaces[METHOD_NAME].name !== METHOD_NAME);
  });
};

var $$5 = _export;
var $trim = stringTrim.trim;
var forcedStringTrimMethod = stringTrimForced;

// `String.prototype.trim` method
// https://tc39.es/ecma262/#sec-string.prototype.trim
$$5({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {
  trim: function trim() {
    return $trim(this);
  }
});

var DESCRIPTORS$3 = descriptors;
var uncurryThis$9 = functionUncurryThis;
var call$7 = functionCall;
var fails$d = fails$s;
var objectKeys = objectKeys$2;
var getOwnPropertySymbolsModule = objectGetOwnPropertySymbols;
var propertyIsEnumerableModule = objectPropertyIsEnumerable;
var toObject$4 = toObject$7;
var IndexedObject$2 = indexedObject;

// eslint-disable-next-line es-x/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es-x/no-object-defineproperty -- required for testing
var defineProperty$2 = Object.defineProperty;
var concat = uncurryThis$9([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
var objectAssign = !$assign || fails$d(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS$3 && $assign({ b: 1 }, $assign(defineProperty$2({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty$2(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es-x/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject$4(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject$2(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS$3 || call$7(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;

var $$4 = _export;
var assign = objectAssign;

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es-x/no-object-assign -- required for testing
$$4({ target: 'Object', stat: true, arity: 2, forced: Object.assign !== assign }, {
  assign: assign
});

class EventEmitter {
  constructor() {
    this.emitter = new events.EventEmitter();
  }
  on(eventName, callback) {
    this.emitter.on(eventName, callback);
    return {
      remove: () => this.emitter.off(eventName, callback)
    };
  }
  off(eventName, callback) {
    this.emitter.off(eventName, callback);
  }
  emit(eventName, event) {
    this.emitter.emit(eventName, event);
  }
}

const PACKAGE_NAME = "near-wallet-selector";
const RECENTLY_SIGNED_IN_WALLETS = "recentlySignedInWallets";
const CONTRACT = "contract";
const PENDING_CONTRACT = "contract:pending";
const SELECTED_WALLET_ID = `selectedWalletId`;
const PENDING_SELECTED_WALLET_ID = `selectedWalletId:pending`;

class WalletModules {
  constructor({
    factories,
    storage,
    options,
    store,
    emitter,
    provider
  }) {
    this.factories = factories;
    this.storage = storage;
    this.options = options;
    this.store = store;
    this.emitter = emitter;
    this.provider = provider;
    this.modules = [];
    this.instances = {};
  }
  validateWallet(id) {
    return __awaiter(this, void 0, void 0, function* () {
      let accounts = [];
      const wallet = yield this.getWallet(id);
      if (wallet) {
        // Ensure our persistent state aligns with the selected wallet.
        // For example a wallet is selected, but it returns no accounts (not signed in).
        accounts = yield wallet.getAccounts().catch(err => {
          logger.log(`Failed to validate ${wallet.id} during setup`);
          logger.error(err);
          return [];
        });
      }
      return accounts;
    });
  }
  resolveStorageState() {
    return __awaiter(this, void 0, void 0, function* () {
      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);
      const pendingSelectedWalletId = yield jsonStorage.getItem(PENDING_SELECTED_WALLET_ID);
      const pendingContract = yield jsonStorage.getItem(PENDING_CONTRACT);
      if (pendingSelectedWalletId && pendingContract) {
        const _accounts = yield this.validateWallet(pendingSelectedWalletId);
        yield jsonStorage.removeItem(PENDING_SELECTED_WALLET_ID);
        yield jsonStorage.removeItem(PENDING_CONTRACT);
        if (_accounts.length) {
          const {
            selectedWalletId: _selectedWalletId
          } = this.store.getState();
          const selectedWallet = yield this.getWallet(_selectedWalletId);
          if (selectedWallet && pendingSelectedWalletId !== _selectedWalletId) {
            yield selectedWallet.signOut().catch(err => {
              logger.log("Failed to sign out existing wallet");
              logger.error(err);
            });
          }
          const recentlySignedInWalletsFromPending = yield this.setWalletAsRecentlySignedIn(pendingSelectedWalletId);
          return {
            accounts: _accounts,
            contract: pendingContract,
            selectedWalletId: pendingSelectedWalletId,
            recentlySignedInWallets: recentlySignedInWalletsFromPending
          };
        }
      }
      const {
        contract,
        selectedWalletId
      } = this.store.getState();
      const accounts = yield this.validateWallet(selectedWalletId);
      const recentlySignedInWallets = yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS);
      if (!accounts.length) {
        return {
          accounts: [],
          contract: null,
          selectedWalletId: null,
          recentlySignedInWallets: recentlySignedInWallets || []
        };
      }
      return {
        accounts,
        contract,
        selectedWalletId,
        recentlySignedInWallets: recentlySignedInWallets || []
      };
    });
  }
  setWalletAsRecentlySignedIn(walletId) {
    return __awaiter(this, void 0, void 0, function* () {
      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);
      let recentlySignedInWallets = yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS);
      if (!recentlySignedInWallets) {
        recentlySignedInWallets = [];
      }
      if (!recentlySignedInWallets.includes(walletId)) {
        recentlySignedInWallets.unshift(walletId);
        recentlySignedInWallets = recentlySignedInWallets.slice(0, 5);
        yield jsonStorage.setItem(RECENTLY_SIGNED_IN_WALLETS, recentlySignedInWallets);
      }
      return recentlySignedInWallets;
    });
  }
  signOutWallet(walletId) {
    return __awaiter(this, void 0, void 0, function* () {
      const wallet = yield this.getWallet(walletId);
      yield wallet.signOut().catch(err => {
        logger.log(`Failed to sign out ${wallet.id}`);
        logger.error(err);
        // At least clean up state on our side.
        this.onWalletSignedOut(wallet.id);
      });
    });
  }
  onWalletSignedIn(walletId, {
    accounts,
    contractId,
    methodNames
  }) {
    return __awaiter(this, void 0, void 0, function* () {
      const {
        selectedWalletId
      } = this.store.getState();
      const jsonStorage = new JsonStorage(this.storage, PACKAGE_NAME);
      const contract = {
        contractId,
        methodNames
      };
      if (!accounts.length) {
        const module = this.getModule(walletId);
        // We can't guarantee the user will actually sign in with browser wallets.
        // Best we can do is set in storage and validate on init.
        if (module.type === "browser") {
          yield jsonStorage.setItem(PENDING_SELECTED_WALLET_ID, walletId);
          yield jsonStorage.setItem(PENDING_CONTRACT, contract);
        }
        return;
      }
      if (selectedWalletId && selectedWalletId !== walletId) {
        yield this.signOutWallet(selectedWalletId);
      }
      const recentlySignedInWallets = yield this.setWalletAsRecentlySignedIn(walletId);
      this.store.dispatch({
        type: "WALLET_CONNECTED",
        payload: {
          walletId,
          contract,
          accounts,
          recentlySignedInWallets
        }
      });
      this.emitter.emit("signedIn", {
        walletId,
        contractId,
        methodNames,
        accounts
      });
    });
  }
  onWalletSignedOut(walletId) {
    this.store.dispatch({
      type: "WALLET_DISCONNECTED",
      payload: {
        walletId
      }
    });
    this.emitter.emit("signedOut", {
      walletId
    });
  }
  setupWalletEmitter(module) {
    const emitter = new EventEmitter();
    emitter.on("signedOut", () => {
      this.onWalletSignedOut(module.id);
    });
    emitter.on("signedIn", event => {
      this.onWalletSignedIn(module.id, event);
    });
    emitter.on("accountsChanged", ({
      accounts
    }) => __awaiter(this, void 0, void 0, function* () {
      this.emitter.emit("accountsChanged", {
        walletId: module.id,
        accounts
      });
      if (!accounts.length) {
        return this.signOutWallet(module.id);
      }
      this.store.dispatch({
        type: "ACCOUNTS_CHANGED",
        payload: {
          walletId: module.id,
          accounts
        }
      });
    }));
    emitter.on("networkChanged", ({
      networkId
    }) => {
      this.emitter.emit("networkChanged", {
        walletId: module.id,
        networkId
      });
    });
    emitter.on("uriChanged", ({
      uri
    }) => {
      this.emitter.emit("uriChanged", {
        walletId: module.id,
        uri
      });
    });
    return emitter;
  }
  validateSignMessageParams({
    message,
    nonce,
    recipient
  }) {
    if (!message || message.trim() === "") {
      throw new Error("Invalid message. It must be a non-empty string.");
    }
    if (!Buffer.isBuffer(nonce) || nonce.length !== 32) {
      throw new Error("Invalid nonce. It must be a Buffer with a length of 32 bytes.");
    }
    if (!recipient || recipient.trim() === "") {
      throw new Error("Invalid recipient. It must be a non-empty string.");
    }
  }
  decorateWallet(wallet) {
    const _signIn = wallet.signIn;
    const _signOut = wallet.signOut;
    const _signMessage = wallet.signMessage;
    wallet.signIn = params => __awaiter(this, void 0, void 0, function* () {
      const accounts = yield _signIn(params);
      const {
        contractId,
        methodNames = []
      } = params;
      yield this.onWalletSignedIn(wallet.id, {
        accounts,
        contractId,
        methodNames
      });
      return accounts;
    });
    wallet.signOut = () => __awaiter(this, void 0, void 0, function* () {
      yield _signOut();
      this.onWalletSignedOut(wallet.id);
    });
    wallet.signMessage = params => __awaiter(this, void 0, void 0, function* () {
      if (_signMessage === undefined) {
        throw Error(`The signMessage method is not supported by ${wallet.metadata.name}`);
      }
      this.validateSignMessageParams(params);
      return yield _signMessage(params);
    });
    return wallet;
  }
  setupInstance(module) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!module.metadata.available) {
        const message = module.type === "injected" ? "not installed" : "not available";
        throw Error(`${module.metadata.name} is ${message}`);
      }
      const wallet = Object.assign({
        id: module.id,
        type: module.type,
        metadata: module.metadata
      }, yield module.init({
        id: module.id,
        type: module.type,
        metadata: module.metadata,
        options: this.options,
        store: this.store.toReadOnly(),
        provider: this.provider,
        emitter: this.setupWalletEmitter(module),
        logger: new Logger(module.id),
        storage: new JsonStorage(this.storage, [PACKAGE_NAME, module.id])
      }));
      return this.decorateWallet(wallet);
    });
  }
  getModule(id) {
    return this.modules.find(x => x.id === id);
  }
  getWallet(id) {
    return __awaiter(this, void 0, void 0, function* () {
      const module = this.getModule(id);
      if (!module) {
        return null;
      }
      const {
        selectedWalletId
      } = this.store.getState();
      // If user uninstalled/removed a wallet which was previously signed in with
      // best we can do is clean up state on our side.
      if (!module.metadata.available && selectedWalletId) {
        this.onWalletSignedOut(selectedWalletId);
        return null;
      }
      return yield module.wallet();
    });
  }
  setup() {
    return __awaiter(this, void 0, void 0, function* () {
      const modules = [];
      for (let i = 0; i < this.factories.length; i += 1) {
        const module = yield this.factories[i]({
          options: this.options
        }).catch(err => {
          logger.log("Failed to setup module");
          logger.error(err);
          return null;
        });
        // Filter out wallets that aren't available.
        if (!module) {
          continue;
        }
        // Skip duplicated module.
        if (modules.some(x => x.id === module.id)) {
          continue;
        }
        modules.push({
          id: module.id,
          type: module.type,
          metadata: module.metadata,
          wallet: () => __awaiter(this, void 0, void 0, function* () {
            let instance = this.instances[module.id];
            if (instance) {
              return instance;
            }
            instance = yield this.setupInstance(module);
            this.instances[module.id] = instance;
            return instance;
          })
        });
      }
      this.modules = modules;
      const {
        accounts,
        contract,
        selectedWalletId,
        recentlySignedInWallets
      } = yield this.resolveStorageState();
      this.store.dispatch({
        type: "SETUP_WALLET_MODULES",
        payload: {
          modules,
          accounts,
          contract,
          selectedWalletId,
          recentlySignedInWallets
        }
      });
      for (let i = 0; i < this.modules.length; i++) {
        if (this.modules[i].type !== "instant-link") {
          continue;
        }
        const wallet = yield this.modules[i].wallet();
        if (!wallet.metadata.runOnStartup) {
          continue;
        }
        try {
          yield wallet.signIn({
            contractId: wallet.getContractId()
          });
        } catch (err) {
          logger.error("Failed to sign in to wallet. " + err);
        }
      }
    });
  }
}

const getNetworkPreset = networkId => {
  switch (networkId) {
    case "mainnet":
      return {
        networkId,
        nodeUrl: "https://rpc.mainnet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.near.org",
        indexerUrl: "https://api.kitwallet.app"
      };
    case "testnet":
      return {
        networkId,
        nodeUrl: "https://rpc.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
        indexerUrl: "https://testnet-api.kitwallet.app"
      };
    default:
      throw Error(`Failed to find config for: '${networkId}'`);
  }
};
const resolveNetwork = network => {
  return typeof network === "string" ? getNetworkPreset(network) : network;
};
const resolveOptions = params => {
  const options = {
    languageCode: params.languageCode || undefined,
    network: resolveNetwork(params.network),
    debug: params.debug || false,
    optimizeWalletOrder: params.optimizeWalletOrder === false ? false : true,
    randomizeWalletOrder: params.randomizeWalletOrder || false,
    relayerUrl: params.relayerUrl || undefined
  };
  return {
    options,
    storage: params.storage || new WebStorageService()
  };
};

const reducer = (state, action) => {
  logger.log("Store Action", action);
  switch (action.type) {
    case "SETUP_WALLET_MODULES":
      {
        const {
          modules,
          accounts,
          contract,
          selectedWalletId,
          recentlySignedInWallets
        } = action.payload;
        const accountStates = accounts.map((account, i) => {
          return Object.assign(Object.assign({}, account), {
            active: i === 0
          });
        });
        return Object.assign(Object.assign({}, state), {
          modules,
          accounts: accountStates,
          contract,
          selectedWalletId,
          recentlySignedInWallets
        });
      }
    case "WALLET_CONNECTED":
      {
        const {
          walletId,
          contract,
          accounts,
          recentlySignedInWallets
        } = action.payload;
        if (!accounts.length) {
          return state;
        }
        const activeAccountIndex = state.accounts.findIndex(account => account.active);
        const accountStates = accounts.map((account, i) => {
          return Object.assign(Object.assign({}, account), {
            active: i === (activeAccountIndex > -1 ? activeAccountIndex : 0)
          });
        });
        return Object.assign(Object.assign({}, state), {
          contract,
          accounts: accountStates,
          selectedWalletId: walletId,
          recentlySignedInWallets
        });
      }
    case "WALLET_DISCONNECTED":
      {
        const {
          walletId
        } = action.payload;
        if (walletId !== state.selectedWalletId) {
          return state;
        }
        return Object.assign(Object.assign({}, state), {
          contract: null,
          accounts: [],
          selectedWalletId: null
        });
      }
    case "ACCOUNTS_CHANGED":
      {
        const {
          walletId,
          accounts
        } = action.payload;
        if (walletId !== state.selectedWalletId) {
          return state;
        }
        const activeAccount = state.accounts.find(account => account.active);
        const isActiveAccountRemoved = !accounts.some(account => account.accountId === (activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.accountId));
        const accountStates = accounts.map((account, i) => {
          return Object.assign(Object.assign({}, account), {
            active: isActiveAccountRemoved ? i === 0 : account.accountId === (activeAccount === null || activeAccount === void 0 ? void 0 : activeAccount.accountId)
          });
        });
        return Object.assign(Object.assign({}, state), {
          accounts: accountStates
        });
      }
    case "SET_ACTIVE_ACCOUNT":
      {
        const {
          accountId
        } = action.payload;
        const accountStates = state.accounts.map(account => {
          return Object.assign(Object.assign({}, account), {
            active: account.accountId === accountId
          });
        });
        return Object.assign(Object.assign({}, state), {
          accounts: accountStates
        });
      }
    default:
      return state;
  }
};
const createStore = storage => __awaiter(void 0, void 0, void 0, function* () {
  const jsonStorage = new JsonStorage(storage, PACKAGE_NAME);
  const initialState = {
    modules: [],
    accounts: [],
    contract: yield jsonStorage.getItem(CONTRACT),
    selectedWalletId: yield jsonStorage.getItem(SELECTED_WALLET_ID),
    recentlySignedInWallets: (yield jsonStorage.getItem(RECENTLY_SIGNED_IN_WALLETS)) || []
  };
  const state$ = new rxjs.BehaviorSubject(initialState);
  const actions$ = new rxjs.Subject();
  actions$.pipe(rxjs.scan(reducer, initialState)).subscribe(state$);
  const syncStorage = (prevState, state, storageKey, property) => __awaiter(void 0, void 0, void 0, function* () {
    if (state[property] === prevState[property]) {
      return;
    }
    if (state[property]) {
      yield jsonStorage.setItem(storageKey, state[property]);
      return;
    }
    yield jsonStorage.removeItem(storageKey);
  });
  let prevState = state$.getValue();
  state$.subscribe(state => {
    syncStorage(prevState, state, SELECTED_WALLET_ID, "selectedWalletId");
    syncStorage(prevState, state, CONTRACT, "contract");
    syncStorage(prevState, state, RECENTLY_SIGNED_IN_WALLETS, "recentlySignedInWallets");
    prevState = state;
  });
  return {
    observable: state$,
    getState: () => state$.getValue(),
    dispatch: action => actions$.next(action),
    toReadOnly: () => ({
      getState: () => state$.getValue(),
      observable: state$.asObservable()
    })
  };
});

let walletSelectorInstance = null;
const createSelector = (options, store, walletModules, emitter) => {
  return {
    options,
    store: store.toReadOnly(),
    wallet: id => __awaiter(void 0, void 0, void 0, function* () {
      const {
        selectedWalletId
      } = store.getState();
      const wallet = yield walletModules.getWallet(id || selectedWalletId);
      if (!wallet) {
        if (id) {
          throw new Error("Invalid wallet id");
        }
        throw new Error("No wallet selected");
      }
      return wallet;
    }),
    setActiveAccount: accountId => {
      const {
        accounts
      } = store.getState();
      if (!accounts.some(account => account.accountId === accountId)) {
        throw new Error("Invalid account id");
      }
      store.dispatch({
        type: "SET_ACTIVE_ACCOUNT",
        payload: {
          accountId
        }
      });
    },
    isSignedIn() {
      const {
        accounts
      } = store.getState();
      return Boolean(accounts.length);
    },
    on: (eventName, callback) => {
      return emitter.on(eventName, callback);
    },
    off: (eventName, callback) => {
      emitter.off(eventName, callback);
    }
  };
};
/**
 * Initiates a wallet selector instance
 * @param {WalletSelectorParams} params Selector parameters (network, modules...)
 * @returns {Promise<WalletSelector>} Returns a WalletSelector object
 */
const setupWalletSelector = params => __awaiter(void 0, void 0, void 0, function* () {
  const {
    options,
    storage
  } = resolveOptions(params);
  Logger.debug = options.debug;
  const emitter = new EventEmitter();
  const store = yield createStore(storage);
  const walletModules = new WalletModules({
    factories: params.modules,
    storage,
    options,
    store,
    emitter,
    provider: new Provider(options.network.nodeUrl)
  });
  yield walletModules.setup();
  if (params.allowMultipleSelectors) {
    return createSelector(options, store, walletModules, emitter);
  }
  if (!walletSelectorInstance) {
    walletSelectorInstance = createSelector(options, store, walletModules, emitter);
  }
  return walletSelectorInstance;
});

const wait = ms => {
  return new Promise(resolve => setTimeout(resolve, ms));
};
const poll = (cb, interval, remaining) => __awaiter(void 0, void 0, void 0, function* () {
  const result = cb();
  if (result) {
    return result;
  }
  if (!remaining) {
    throw new Error("Exceeded timeout");
  }
  return wait(interval).then(() => poll(cb, interval, remaining - 1));
});
const waitFor = (cb, opts = {}) => __awaiter(void 0, void 0, void 0, function* () {
  const {
    timeout = 100,
    interval = 50
  } = opts;
  return Promise.race([wait(timeout).then(() => {
    throw new Error("Exceeded timeout");
  }), poll(cb, interval, Math.floor(timeout / interval))]);
});

const getActiveAccount = state => {
  return state.accounts.find(account => account.active) || null;
};

var aCallable$1 = aCallable$9;
var toObject$3 = toObject$7;
var IndexedObject$1 = indexedObject;
var lengthOfArrayLike$5 = lengthOfArrayLike$8;

var $TypeError$2 = TypeError;

// `Array.prototype.{ reduce, reduceRight }` methods implementation
var createMethod$2 = function (IS_RIGHT) {
  return function (that, callbackfn, argumentsLength, memo) {
    aCallable$1(callbackfn);
    var O = toObject$3(that);
    var self = IndexedObject$1(O);
    var length = lengthOfArrayLike$5(O);
    var index = IS_RIGHT ? length - 1 : 0;
    var i = IS_RIGHT ? -1 : 1;
    if (argumentsLength < 2) while (true) {
      if (index in self) {
        memo = self[index];
        index += i;
        break;
      }
      index += i;
      if (IS_RIGHT ? index < 0 : length <= index) {
        throw $TypeError$2('Reduce of empty array with no initial value');
      }
    }
    for (;IS_RIGHT ? index >= 0 : length > index; index += i) if (index in self) {
      memo = callbackfn(memo, self[index], index, O);
    }
    return memo;
  };
};

var arrayReduce = {
  // `Array.prototype.reduce` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduce
  left: createMethod$2(false),
  // `Array.prototype.reduceRight` method
  // https://tc39.es/ecma262/#sec-array.prototype.reduceright
  right: createMethod$2(true)
};

var fails$c = fails$s;

var arrayMethodIsStrict$1 = function (METHOD_NAME, argument) {
  var method = [][METHOD_NAME];
  return !!method && fails$c(function () {
    // eslint-disable-next-line no-useless-call -- required for testing
    method.call(null, argument || function () { return 1; }, 1);
  });
};

var $$3 = _export;
var $reduce = arrayReduce.left;
var arrayMethodIsStrict = arrayMethodIsStrict$1;
var CHROME_VERSION = engineV8Version;
var IS_NODE = engineIsNode;

var STRICT_METHOD = arrayMethodIsStrict('reduce');
// Chrome 80-82 has a critical bug
// https://bugs.chromium.org/p/chromium/issues/detail?id=1049982
var CHROME_BUG = !IS_NODE && CHROME_VERSION > 79 && CHROME_VERSION < 83;

// `Array.prototype.reduce` method
// https://tc39.es/ecma262/#sec-array.prototype.reduce
$$3({ target: 'Array', proto: true, forced: !STRICT_METHOD || CHROME_BUG }, {
  reduce: function reduce(callbackfn /* , initialValue */) {
    var length = arguments.length;
    return $reduce(this, callbackfn, length, length > 1 ? arguments[1] : undefined);
  }
});

var anObject$3 = anObject$e;

// `RegExp.prototype.flags` getter implementation
// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags
var regexpFlags$1 = function () {
  var that = anObject$3(this);
  var result = '';
  if (that.hasIndices) result += 'd';
  if (that.global) result += 'g';
  if (that.ignoreCase) result += 'i';
  if (that.multiline) result += 'm';
  if (that.dotAll) result += 's';
  if (that.unicode) result += 'u';
  if (that.unicodeSets) result += 'v';
  if (that.sticky) result += 'y';
  return result;
};

var fails$b = fails$s;
var global$a = global$t;

// babel-minify and Closure Compiler transpiles RegExp('a', 'y') -> /a/y and it causes SyntaxError
var $RegExp$2 = global$a.RegExp;

var UNSUPPORTED_Y$2 = fails$b(function () {
  var re = $RegExp$2('a', 'y');
  re.lastIndex = 2;
  return re.exec('abcd') != null;
});

// UC Browser bug
// https://github.com/zloirock/core-js/issues/1008
var MISSED_STICKY = UNSUPPORTED_Y$2 || fails$b(function () {
  return !$RegExp$2('a', 'y').sticky;
});

var BROKEN_CARET = UNSUPPORTED_Y$2 || fails$b(function () {
  // https://bugzilla.mozilla.org/show_bug.cgi?id=773687
  var re = $RegExp$2('^r', 'gy');
  re.lastIndex = 2;
  return re.exec('str') != null;
});

var regexpStickyHelpers = {
  BROKEN_CARET: BROKEN_CARET,
  MISSED_STICKY: MISSED_STICKY,
  UNSUPPORTED_Y: UNSUPPORTED_Y$2
};

var fails$a = fails$s;
var global$9 = global$t;

// babel-minify and Closure Compiler transpiles RegExp('.', 's') -> /./s and it causes SyntaxError
var $RegExp$1 = global$9.RegExp;

var regexpUnsupportedDotAll = fails$a(function () {
  var re = $RegExp$1('.', 's');
  return !(re.dotAll && re.exec('\n') && re.flags === 's');
});

var fails$9 = fails$s;
var global$8 = global$t;

// babel-minify and Closure Compiler transpiles RegExp('(?<a>b)', 'g') -> /(?<a>b)/g and it causes SyntaxError
var $RegExp = global$8.RegExp;

var regexpUnsupportedNcg = fails$9(function () {
  var re = $RegExp('(?<a>b)', 'g');
  return re.exec('b').groups.a !== 'b' ||
    'b'.replace(re, '$<a>c') !== 'bc';
});

/* eslint-disable regexp/no-empty-capturing-group, regexp/no-empty-group, regexp/no-lazy-ends -- testing */
/* eslint-disable regexp/no-useless-quantifier -- testing */
var call$6 = functionCall;
var uncurryThis$8 = functionUncurryThis;
var toString$2 = toString$5;
var regexpFlags = regexpFlags$1;
var stickyHelpers$1 = regexpStickyHelpers;
var shared = shared$4.exports;
var create$1 = objectCreate;
var getInternalState$3 = internalState.get;
var UNSUPPORTED_DOT_ALL = regexpUnsupportedDotAll;
var UNSUPPORTED_NCG = regexpUnsupportedNcg;

var nativeReplace = shared('native-string-replace', String.prototype.replace);
var nativeExec = RegExp.prototype.exec;
var patchedExec = nativeExec;
var charAt$2 = uncurryThis$8(''.charAt);
var indexOf = uncurryThis$8(''.indexOf);
var replace = uncurryThis$8(''.replace);
var stringSlice$2 = uncurryThis$8(''.slice);

var UPDATES_LAST_INDEX_WRONG = (function () {
  var re1 = /a/;
  var re2 = /b*/g;
  call$6(nativeExec, re1, 'a');
  call$6(nativeExec, re2, 'a');
  return re1.lastIndex !== 0 || re2.lastIndex !== 0;
})();

var UNSUPPORTED_Y$1 = stickyHelpers$1.BROKEN_CARET;

// nonparticipating capturing group, copied from es5-shim's String#split patch.
var NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;

var PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED || UNSUPPORTED_Y$1 || UNSUPPORTED_DOT_ALL || UNSUPPORTED_NCG;

if (PATCH) {
  patchedExec = function exec(string) {
    var re = this;
    var state = getInternalState$3(re);
    var str = toString$2(string);
    var raw = state.raw;
    var result, reCopy, lastIndex, match, i, object, group;

    if (raw) {
      raw.lastIndex = re.lastIndex;
      result = call$6(patchedExec, raw, str);
      re.lastIndex = raw.lastIndex;
      return result;
    }

    var groups = state.groups;
    var sticky = UNSUPPORTED_Y$1 && re.sticky;
    var flags = call$6(regexpFlags, re);
    var source = re.source;
    var charsAdded = 0;
    var strCopy = str;

    if (sticky) {
      flags = replace(flags, 'y', '');
      if (indexOf(flags, 'g') === -1) {
        flags += 'g';
      }

      strCopy = stringSlice$2(str, re.lastIndex);
      // Support anchored sticky behavior.
      if (re.lastIndex > 0 && (!re.multiline || re.multiline && charAt$2(str, re.lastIndex - 1) !== '\n')) {
        source = '(?: ' + source + ')';
        strCopy = ' ' + strCopy;
        charsAdded++;
      }
      // ^(? + rx + ) is needed, in combination with some str slicing, to
      // simulate the 'y' flag.
      reCopy = new RegExp('^(?:' + source + ')', flags);
    }

    if (NPCG_INCLUDED) {
      reCopy = new RegExp('^' + source + '$(?!\\s)', flags);
    }
    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re.lastIndex;

    match = call$6(nativeExec, sticky ? reCopy : re, strCopy);

    if (sticky) {
      if (match) {
        match.input = stringSlice$2(match.input, charsAdded);
        match[0] = stringSlice$2(match[0], charsAdded);
        match.index = re.lastIndex;
        re.lastIndex += match[0].length;
      } else re.lastIndex = 0;
    } else if (UPDATES_LAST_INDEX_WRONG && match) {
      re.lastIndex = re.global ? match.index + match[0].length : lastIndex;
    }
    if (NPCG_INCLUDED && match && match.length > 1) {
      // Fix browsers whose `exec` methods don't consistently return `undefined`
      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/
      call$6(nativeReplace, match[0], reCopy, function () {
        for (i = 1; i < arguments.length - 2; i++) {
          if (arguments[i] === undefined) match[i] = undefined;
        }
      });
    }

    if (match && groups) {
      match.groups = object = create$1(null);
      for (i = 0; i < groups.length; i++) {
        group = groups[i];
        object[group[0]] = match[group[1]];
      }
    }

    return match;
  };
}

var regexpExec$3 = patchedExec;

var $$2 = _export;
var exec$1 = regexpExec$3;

// `RegExp.prototype.exec` method
// https://tc39.es/ecma262/#sec-regexp.prototype.exec
$$2({ target: 'RegExp', proto: true, forced: /./.exec !== exec$1 }, {
  exec: exec$1
});

/* eslint-disable no-useless-escape */
// https://github.com/DamonOehlman/detect-browser/blob/master/src/index.ts
const SEARCHBOX_UA_REGEX = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/;
const userAgentRules = [["aol", /AOLShield\/([0-9\._]+)/], ["edge", /Edge\/([0-9\._]+)/], ["edge-ios", /EdgiOS\/([0-9\._]+)/], ["yandexbrowser", /YaBrowser\/([0-9\._]+)/], ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/], ["samsung", /SamsungBrowser\/([0-9\.]+)/], ["silk", /\bSilk\/([0-9._-]+)\b/], ["miui", /MiuiBrowser\/([0-9\.]+)$/], ["beaker", /BeakerBrowser\/([0-9\.]+)/], ["edge-chromium", /EdgA?\/([0-9\.]+)/], ["chromium-webview", /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/], ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/], ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/], ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/], ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/], ["fxios", /FxiOS\/([0-9\.]+)/], ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/], ["opera", /Opera\/([0-9\.]+)(?:\s|$)/], ["opera", /OPR\/([0-9\.]+)(:?\s|$)/], ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/], ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/], ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/], ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/], ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/], ["ie", /MSIE\s(7\.0)/], ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/], ["android", /Android\s([0-9\.]+)/], ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/], ["safari", /Version\/([0-9\._]+).*Safari/], ["facebook", /FB[AS]V\/([0-9\.]+)/], ["instagram", /Instagram\s([0-9\.]+)/], ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/], ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/], ["curl", /^curl\/([0-9\.]+)$/], ["searchbot", SEARCHBOX_UA_REGEX]];
const matchUserAgent = ua => {
  return ua !== "" && userAgentRules.reduce((matched, [browser, regex]) => {
    if (matched) {
      return matched;
    }
    const uaMatch = regex.exec(ua);
    return !!uaMatch && [browser, uaMatch];
  }, false);
};
const isCurrentBrowserSupported = supportedBrowser => {
  if (typeof navigator === "undefined") {
    return false;
  }
  const matchedRule = matchUserAgent(navigator.userAgent);
  if (!matchedRule) {
    return false;
  }
  const [name] = matchedRule;
  if (name === "searchbot") {
    return false;
  }
  return !!supportedBrowser.find(item => item === name);
};

// eslint-disable-next-line es-x/no-typed-arrays -- safe
var arrayBufferNative = typeof ArrayBuffer != 'undefined' && typeof DataView != 'undefined';

var NATIVE_ARRAY_BUFFER$1 = arrayBufferNative;
var DESCRIPTORS$2 = descriptors;
var global$7 = global$t;
var isCallable$2 = isCallable$n;
var isObject$4 = isObject$d;
var hasOwn$1 = hasOwnProperty_1;
var classof$4 = classof$9;
var tryToString = tryToString$5;
var createNonEnumerableProperty$3 = createNonEnumerableProperty$8;
var defineBuiltIn$2 = defineBuiltIn$8;
var defineProperty$1 = objectDefineProperty.f;
var isPrototypeOf$1 = objectIsPrototypeOf;
var getPrototypeOf$1 = objectGetPrototypeOf;
var setPrototypeOf$3 = objectSetPrototypeOf;
var wellKnownSymbol$2 = wellKnownSymbol$j;
var uid = uid$3;
var InternalStateModule$2 = internalState;

var enforceInternalState$1 = InternalStateModule$2.enforce;
var getInternalState$2 = InternalStateModule$2.get;
var Int8Array$4 = global$7.Int8Array;
var Int8ArrayPrototype$1 = Int8Array$4 && Int8Array$4.prototype;
var Uint8ClampedArray$1 = global$7.Uint8ClampedArray;
var Uint8ClampedArrayPrototype = Uint8ClampedArray$1 && Uint8ClampedArray$1.prototype;
var TypedArray$1 = Int8Array$4 && getPrototypeOf$1(Int8Array$4);
var TypedArrayPrototype$1 = Int8ArrayPrototype$1 && getPrototypeOf$1(Int8ArrayPrototype$1);
var ObjectPrototype$1 = Object.prototype;
var TypeError$1 = global$7.TypeError;

var TO_STRING_TAG = wellKnownSymbol$2('toStringTag');
var TYPED_ARRAY_TAG$1 = uid('TYPED_ARRAY_TAG');
var TYPED_ARRAY_CONSTRUCTOR = 'TypedArrayConstructor';
// Fixing native typed arrays in Opera Presto crashes the browser, see #595
var NATIVE_ARRAY_BUFFER_VIEWS$2 = NATIVE_ARRAY_BUFFER$1 && !!setPrototypeOf$3 && classof$4(global$7.opera) !== 'Opera';
var TYPED_ARRAY_TAG_REQUIRED = false;
var NAME, Constructor, Prototype;

var TypedArrayConstructorsList = {
  Int8Array: 1,
  Uint8Array: 1,
  Uint8ClampedArray: 1,
  Int16Array: 2,
  Uint16Array: 2,
  Int32Array: 4,
  Uint32Array: 4,
  Float32Array: 4,
  Float64Array: 8
};

var BigIntArrayConstructorsList = {
  BigInt64Array: 8,
  BigUint64Array: 8
};

var isView = function isView(it) {
  if (!isObject$4(it)) return false;
  var klass = classof$4(it);
  return klass === 'DataView'
    || hasOwn$1(TypedArrayConstructorsList, klass)
    || hasOwn$1(BigIntArrayConstructorsList, klass);
};

var getTypedArrayConstructor = function (it) {
  var proto = getPrototypeOf$1(it);
  if (!isObject$4(proto)) return;
  var state = getInternalState$2(proto);
  return (state && hasOwn$1(state, TYPED_ARRAY_CONSTRUCTOR)) ? state[TYPED_ARRAY_CONSTRUCTOR] : getTypedArrayConstructor(proto);
};

var isTypedArray$1 = function (it) {
  if (!isObject$4(it)) return false;
  var klass = classof$4(it);
  return hasOwn$1(TypedArrayConstructorsList, klass)
    || hasOwn$1(BigIntArrayConstructorsList, klass);
};

var aTypedArray$4 = function (it) {
  if (isTypedArray$1(it)) return it;
  throw TypeError$1('Target is not a typed array');
};

var aTypedArrayConstructor$2 = function (C) {
  if (isCallable$2(C) && (!setPrototypeOf$3 || isPrototypeOf$1(TypedArray$1, C))) return C;
  throw TypeError$1(tryToString(C) + ' is not a typed array constructor');
};

var exportTypedArrayMethod$4 = function (KEY, property, forced, options) {
  if (!DESCRIPTORS$2) return;
  if (forced) for (var ARRAY in TypedArrayConstructorsList) {
    var TypedArrayConstructor = global$7[ARRAY];
    if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor.prototype, KEY)) try {
      delete TypedArrayConstructor.prototype[KEY];
    } catch (error) {
      // old WebKit bug - some methods are non-configurable
      try {
        TypedArrayConstructor.prototype[KEY] = property;
      } catch (error2) { /* empty */ }
    }
  }
  if (!TypedArrayPrototype$1[KEY] || forced) {
    defineBuiltIn$2(TypedArrayPrototype$1, KEY, forced ? property
      : NATIVE_ARRAY_BUFFER_VIEWS$2 && Int8ArrayPrototype$1[KEY] || property, options);
  }
};

var exportTypedArrayStaticMethod$1 = function (KEY, property, forced) {
  var ARRAY, TypedArrayConstructor;
  if (!DESCRIPTORS$2) return;
  if (setPrototypeOf$3) {
    if (forced) for (ARRAY in TypedArrayConstructorsList) {
      TypedArrayConstructor = global$7[ARRAY];
      if (TypedArrayConstructor && hasOwn$1(TypedArrayConstructor, KEY)) try {
        delete TypedArrayConstructor[KEY];
      } catch (error) { /* empty */ }
    }
    if (!TypedArray$1[KEY] || forced) {
      // V8 ~ Chrome 49-50 `%TypedArray%` methods are non-writable non-configurable
      try {
        return defineBuiltIn$2(TypedArray$1, KEY, forced ? property : NATIVE_ARRAY_BUFFER_VIEWS$2 && TypedArray$1[KEY] || property);
      } catch (error) { /* empty */ }
    } else return;
  }
  for (ARRAY in TypedArrayConstructorsList) {
    TypedArrayConstructor = global$7[ARRAY];
    if (TypedArrayConstructor && (!TypedArrayConstructor[KEY] || forced)) {
      defineBuiltIn$2(TypedArrayConstructor, KEY, property);
    }
  }
};

for (NAME in TypedArrayConstructorsList) {
  Constructor = global$7[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState$1(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
  else NATIVE_ARRAY_BUFFER_VIEWS$2 = false;
}

for (NAME in BigIntArrayConstructorsList) {
  Constructor = global$7[NAME];
  Prototype = Constructor && Constructor.prototype;
  if (Prototype) enforceInternalState$1(Prototype)[TYPED_ARRAY_CONSTRUCTOR] = Constructor;
}

// WebKit bug - typed arrays constructors prototype is Object.prototype
if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !isCallable$2(TypedArray$1) || TypedArray$1 === Function.prototype) {
  // eslint-disable-next-line no-shadow -- safe
  TypedArray$1 = function TypedArray() {
    throw TypeError$1('Incorrect invocation');
  };
  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
    if (global$7[NAME]) setPrototypeOf$3(global$7[NAME], TypedArray$1);
  }
}

if (!NATIVE_ARRAY_BUFFER_VIEWS$2 || !TypedArrayPrototype$1 || TypedArrayPrototype$1 === ObjectPrototype$1) {
  TypedArrayPrototype$1 = TypedArray$1.prototype;
  if (NATIVE_ARRAY_BUFFER_VIEWS$2) for (NAME in TypedArrayConstructorsList) {
    if (global$7[NAME]) setPrototypeOf$3(global$7[NAME].prototype, TypedArrayPrototype$1);
  }
}

// WebKit bug - one more object in Uint8ClampedArray prototype chain
if (NATIVE_ARRAY_BUFFER_VIEWS$2 && getPrototypeOf$1(Uint8ClampedArrayPrototype) !== TypedArrayPrototype$1) {
  setPrototypeOf$3(Uint8ClampedArrayPrototype, TypedArrayPrototype$1);
}

if (DESCRIPTORS$2 && !hasOwn$1(TypedArrayPrototype$1, TO_STRING_TAG)) {
  TYPED_ARRAY_TAG_REQUIRED = true;
  defineProperty$1(TypedArrayPrototype$1, TO_STRING_TAG, { get: function () {
    return isObject$4(this) ? this[TYPED_ARRAY_TAG$1] : undefined;
  } });
  for (NAME in TypedArrayConstructorsList) if (global$7[NAME]) {
    createNonEnumerableProperty$3(global$7[NAME], TYPED_ARRAY_TAG$1, NAME);
  }
}

var arrayBufferViewCore = {
  NATIVE_ARRAY_BUFFER_VIEWS: NATIVE_ARRAY_BUFFER_VIEWS$2,
  TYPED_ARRAY_TAG: TYPED_ARRAY_TAG_REQUIRED && TYPED_ARRAY_TAG$1,
  aTypedArray: aTypedArray$4,
  aTypedArrayConstructor: aTypedArrayConstructor$2,
  exportTypedArrayMethod: exportTypedArrayMethod$4,
  exportTypedArrayStaticMethod: exportTypedArrayStaticMethod$1,
  getTypedArrayConstructor: getTypedArrayConstructor,
  isView: isView,
  isTypedArray: isTypedArray$1,
  TypedArray: TypedArray$1,
  TypedArrayPrototype: TypedArrayPrototype$1
};

/* eslint-disable no-new -- required for testing */

var global$6 = global$t;
var fails$8 = fails$s;
var checkCorrectnessOfIteration = checkCorrectnessOfIteration$2;
var NATIVE_ARRAY_BUFFER_VIEWS$1 = arrayBufferViewCore.NATIVE_ARRAY_BUFFER_VIEWS;

var ArrayBuffer$3 = global$6.ArrayBuffer;
var Int8Array$3 = global$6.Int8Array;

var typedArrayConstructorsRequireWrappers = !NATIVE_ARRAY_BUFFER_VIEWS$1 || !fails$8(function () {
  Int8Array$3(1);
}) || !fails$8(function () {
  new Int8Array$3(-1);
}) || !checkCorrectnessOfIteration(function (iterable) {
  new Int8Array$3();
  new Int8Array$3(null);
  new Int8Array$3(1.5);
  new Int8Array$3(iterable);
}, true) || fails$8(function () {
  // Safari (11+) bug - a reason why even Safari 13 should load a typed array polyfill
  return new Int8Array$3(new ArrayBuffer$3(2), 1, undefined).length !== 1;
});

var bind$1 = functionBindContext;
var call$5 = functionCall;
var aConstructor = aConstructor$2;
var toObject$2 = toObject$7;
var lengthOfArrayLike$4 = lengthOfArrayLike$8;
var getIterator = getIterator$2;
var getIteratorMethod = getIteratorMethod$3;
var isArrayIteratorMethod = isArrayIteratorMethod$2;
var aTypedArrayConstructor$1 = arrayBufferViewCore.aTypedArrayConstructor;

var typedArrayFrom$2 = function from(source /* , mapfn, thisArg */) {
  var C = aConstructor(this);
  var O = toObject$2(source);
  var argumentsLength = arguments.length;
  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
  var mapping = mapfn !== undefined;
  var iteratorMethod = getIteratorMethod(O);
  var i, length, result, step, iterator, next;
  if (iteratorMethod && !isArrayIteratorMethod(iteratorMethod)) {
    iterator = getIterator(O, iteratorMethod);
    next = iterator.next;
    O = [];
    while (!(step = call$5(next, iterator)).done) {
      O.push(step.value);
    }
  }
  if (mapping && argumentsLength > 2) {
    mapfn = bind$1(mapfn, arguments[2]);
  }
  length = lengthOfArrayLike$4(O);
  result = new (aTypedArrayConstructor$1(C))(length);
  for (i = 0; length > i; i++) {
    result[i] = mapping ? mapfn(O[i], i) : O[i];
  }
  return result;
};

var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1 = typedArrayConstructorsRequireWrappers;
var exportTypedArrayStaticMethod = arrayBufferViewCore.exportTypedArrayStaticMethod;
var typedArrayFrom$1 = typedArrayFrom$2;

// `%TypedArray%.from` method
// https://tc39.es/ecma262/#sec-%typedarray%.from
exportTypedArrayStaticMethod('from', typedArrayFrom$1, TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS$1);

var defineBuiltIn$1 = defineBuiltIn$8;

var defineBuiltIns$1 = function (target, src, options) {
  for (var key in src) defineBuiltIn$1(target, key, src[key], options);
  return target;
};

var toIntegerOrInfinity$3 = toIntegerOrInfinity$6;
var toLength$4 = toLength$6;

var $RangeError$2 = RangeError;

// `ToIndex` abstract operation
// https://tc39.es/ecma262/#sec-toindex
var toIndex$2 = function (it) {
  if (it === undefined) return 0;
  var number = toIntegerOrInfinity$3(it);
  var length = toLength$4(number);
  if (number !== length) throw $RangeError$2('Wrong length or index');
  return length;
};

// IEEE754 conversions based on https://github.com/feross/ieee754
var $Array$2 = Array;
var abs = Math.abs;
var pow = Math.pow;
var floor$2 = Math.floor;
var log = Math.log;
var LN2 = Math.LN2;

var pack = function (number, mantissaLength, bytes) {
  var buffer = $Array$2(bytes);
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var rt = mantissaLength === 23 ? pow(2, -24) - pow(2, -77) : 0;
  var sign = number < 0 || number === 0 && 1 / number < 0 ? 1 : 0;
  var index = 0;
  var exponent, mantissa, c;
  number = abs(number);
  // eslint-disable-next-line no-self-compare -- NaN check
  if (number != number || number === Infinity) {
    // eslint-disable-next-line no-self-compare -- NaN check
    mantissa = number != number ? 1 : 0;
    exponent = eMax;
  } else {
    exponent = floor$2(log(number) / LN2);
    c = pow(2, -exponent);
    if (number * c < 1) {
      exponent--;
      c *= 2;
    }
    if (exponent + eBias >= 1) {
      number += rt / c;
    } else {
      number += rt * pow(2, 1 - eBias);
    }
    if (number * c >= 2) {
      exponent++;
      c /= 2;
    }
    if (exponent + eBias >= eMax) {
      mantissa = 0;
      exponent = eMax;
    } else if (exponent + eBias >= 1) {
      mantissa = (number * c - 1) * pow(2, mantissaLength);
      exponent = exponent + eBias;
    } else {
      mantissa = number * pow(2, eBias - 1) * pow(2, mantissaLength);
      exponent = 0;
    }
  }
  while (mantissaLength >= 8) {
    buffer[index++] = mantissa & 255;
    mantissa /= 256;
    mantissaLength -= 8;
  }
  exponent = exponent << mantissaLength | mantissa;
  exponentLength += mantissaLength;
  while (exponentLength > 0) {
    buffer[index++] = exponent & 255;
    exponent /= 256;
    exponentLength -= 8;
  }
  buffer[--index] |= sign * 128;
  return buffer;
};

var unpack = function (buffer, mantissaLength) {
  var bytes = buffer.length;
  var exponentLength = bytes * 8 - mantissaLength - 1;
  var eMax = (1 << exponentLength) - 1;
  var eBias = eMax >> 1;
  var nBits = exponentLength - 7;
  var index = bytes - 1;
  var sign = buffer[index--];
  var exponent = sign & 127;
  var mantissa;
  sign >>= 7;
  while (nBits > 0) {
    exponent = exponent * 256 + buffer[index--];
    nBits -= 8;
  }
  mantissa = exponent & (1 << -nBits) - 1;
  exponent >>= -nBits;
  nBits += mantissaLength;
  while (nBits > 0) {
    mantissa = mantissa * 256 + buffer[index--];
    nBits -= 8;
  }
  if (exponent === 0) {
    exponent = 1 - eBias;
  } else if (exponent === eMax) {
    return mantissa ? NaN : sign ? -Infinity : Infinity;
  } else {
    mantissa = mantissa + pow(2, mantissaLength);
    exponent = exponent - eBias;
  } return (sign ? -1 : 1) * mantissa * pow(2, exponent - mantissaLength);
};

var ieee754 = {
  pack: pack,
  unpack: unpack
};

var toObject$1 = toObject$7;
var toAbsoluteIndex$2 = toAbsoluteIndex$4;
var lengthOfArrayLike$3 = lengthOfArrayLike$8;

// `Array.prototype.fill` method implementation
// https://tc39.es/ecma262/#sec-array.prototype.fill
var arrayFill$1 = function fill(value /* , start = 0, end = @length */) {
  var O = toObject$1(this);
  var length = lengthOfArrayLike$3(O);
  var argumentsLength = arguments.length;
  var index = toAbsoluteIndex$2(argumentsLength > 1 ? arguments[1] : undefined, length);
  var end = argumentsLength > 2 ? arguments[2] : undefined;
  var endPos = end === undefined ? length : toAbsoluteIndex$2(end, length);
  while (endPos > index) O[index++] = value;
  return O;
};

var toPropertyKey$1 = toPropertyKey$4;
var definePropertyModule$1 = objectDefineProperty;
var createPropertyDescriptor$1 = createPropertyDescriptor$5;

var createProperty$1 = function (object, key, value) {
  var propertyKey = toPropertyKey$1(key);
  if (propertyKey in object) definePropertyModule$1.f(object, propertyKey, createPropertyDescriptor$1(0, value));
  else object[propertyKey] = value;
};

var toAbsoluteIndex$1 = toAbsoluteIndex$4;
var lengthOfArrayLike$2 = lengthOfArrayLike$8;
var createProperty = createProperty$1;

var $Array$1 = Array;
var max = Math.max;

var arraySliceSimple = function (O, start, end) {
  var length = lengthOfArrayLike$2(O);
  var k = toAbsoluteIndex$1(start, length);
  var fin = toAbsoluteIndex$1(end === undefined ? length : end, length);
  var result = $Array$1(max(fin - k, 0));
  for (var n = 0; k < fin; k++, n++) createProperty(result, n, O[k]);
  result.length = n;
  return result;
};

var global$5 = global$t;
var uncurryThis$7 = functionUncurryThis;
var DESCRIPTORS$1 = descriptors;
var NATIVE_ARRAY_BUFFER = arrayBufferNative;
var FunctionName = functionName;
var createNonEnumerableProperty$2 = createNonEnumerableProperty$8;
var defineBuiltIns = defineBuiltIns$1;
var fails$7 = fails$s;
var anInstance$1 = anInstance$3;
var toIntegerOrInfinity$2 = toIntegerOrInfinity$6;
var toLength$3 = toLength$6;
var toIndex$1 = toIndex$2;
var IEEE754 = ieee754;
var getPrototypeOf = objectGetPrototypeOf;
var setPrototypeOf$2 = objectSetPrototypeOf;
var getOwnPropertyNames$1 = objectGetOwnPropertyNames.f;
var defineProperty = objectDefineProperty.f;
var arrayFill = arrayFill$1;
var arraySlice$3 = arraySliceSimple;
var setToStringTag = setToStringTag$4;
var InternalStateModule$1 = internalState;

var PROPER_FUNCTION_NAME = FunctionName.PROPER;
var CONFIGURABLE_FUNCTION_NAME = FunctionName.CONFIGURABLE;
var getInternalState$1 = InternalStateModule$1.get;
var setInternalState$1 = InternalStateModule$1.set;
var ARRAY_BUFFER = 'ArrayBuffer';
var DATA_VIEW = 'DataView';
var PROTOTYPE = 'prototype';
var WRONG_LENGTH$1 = 'Wrong length';
var WRONG_INDEX = 'Wrong index';
var NativeArrayBuffer = global$5[ARRAY_BUFFER];
var $ArrayBuffer = NativeArrayBuffer;
var ArrayBufferPrototype$1 = $ArrayBuffer && $ArrayBuffer[PROTOTYPE];
var $DataView = global$5[DATA_VIEW];
var DataViewPrototype$1 = $DataView && $DataView[PROTOTYPE];
var ObjectPrototype = Object.prototype;
var Array$1 = global$5.Array;
var RangeError$3 = global$5.RangeError;
var fill = uncurryThis$7(arrayFill);
var reverse = uncurryThis$7([].reverse);

var packIEEE754 = IEEE754.pack;
var unpackIEEE754 = IEEE754.unpack;

var packInt8 = function (number) {
  return [number & 0xFF];
};

var packInt16 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF];
};

var packInt32 = function (number) {
  return [number & 0xFF, number >> 8 & 0xFF, number >> 16 & 0xFF, number >> 24 & 0xFF];
};

var unpackInt32 = function (buffer) {
  return buffer[3] << 24 | buffer[2] << 16 | buffer[1] << 8 | buffer[0];
};

var packFloat32 = function (number) {
  return packIEEE754(number, 23, 4);
};

var packFloat64 = function (number) {
  return packIEEE754(number, 52, 8);
};

var addGetter$1 = function (Constructor, key) {
  defineProperty(Constructor[PROTOTYPE], key, { get: function () { return getInternalState$1(this)[key]; } });
};

var get = function (view, count, index, isLittleEndian) {
  var intIndex = toIndex$1(index);
  var store = getInternalState$1(view);
  if (intIndex + count > store.byteLength) throw RangeError$3(WRONG_INDEX);
  var bytes = getInternalState$1(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = arraySlice$3(bytes, start, start + count);
  return isLittleEndian ? pack : reverse(pack);
};

var set = function (view, count, index, conversion, value, isLittleEndian) {
  var intIndex = toIndex$1(index);
  var store = getInternalState$1(view);
  if (intIndex + count > store.byteLength) throw RangeError$3(WRONG_INDEX);
  var bytes = getInternalState$1(store.buffer).bytes;
  var start = intIndex + store.byteOffset;
  var pack = conversion(+value);
  for (var i = 0; i < count; i++) bytes[start + i] = pack[isLittleEndian ? i : count - i - 1];
};

if (!NATIVE_ARRAY_BUFFER) {
  $ArrayBuffer = function ArrayBuffer(length) {
    anInstance$1(this, ArrayBufferPrototype$1);
    var byteLength = toIndex$1(length);
    setInternalState$1(this, {
      bytes: fill(Array$1(byteLength), 0),
      byteLength: byteLength
    });
    if (!DESCRIPTORS$1) this.byteLength = byteLength;
  };

  ArrayBufferPrototype$1 = $ArrayBuffer[PROTOTYPE];

  $DataView = function DataView(buffer, byteOffset, byteLength) {
    anInstance$1(this, DataViewPrototype$1);
    anInstance$1(buffer, ArrayBufferPrototype$1);
    var bufferLength = getInternalState$1(buffer).byteLength;
    var offset = toIntegerOrInfinity$2(byteOffset);
    if (offset < 0 || offset > bufferLength) throw RangeError$3('Wrong offset');
    byteLength = byteLength === undefined ? bufferLength - offset : toLength$3(byteLength);
    if (offset + byteLength > bufferLength) throw RangeError$3(WRONG_LENGTH$1);
    setInternalState$1(this, {
      buffer: buffer,
      byteLength: byteLength,
      byteOffset: offset
    });
    if (!DESCRIPTORS$1) {
      this.buffer = buffer;
      this.byteLength = byteLength;
      this.byteOffset = offset;
    }
  };

  DataViewPrototype$1 = $DataView[PROTOTYPE];

  if (DESCRIPTORS$1) {
    addGetter$1($ArrayBuffer, 'byteLength');
    addGetter$1($DataView, 'buffer');
    addGetter$1($DataView, 'byteLength');
    addGetter$1($DataView, 'byteOffset');
  }

  defineBuiltIns(DataViewPrototype$1, {
    getInt8: function getInt8(byteOffset) {
      return get(this, 1, byteOffset)[0] << 24 >> 24;
    },
    getUint8: function getUint8(byteOffset) {
      return get(this, 1, byteOffset)[0];
    },
    getInt16: function getInt16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;
    },
    getUint16: function getUint16(byteOffset /* , littleEndian */) {
      var bytes = get(this, 2, byteOffset, arguments.length > 1 ? arguments[1] : undefined);
      return bytes[1] << 8 | bytes[0];
    },
    getInt32: function getInt32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined));
    },
    getUint32: function getUint32(byteOffset /* , littleEndian */) {
      return unpackInt32(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined)) >>> 0;
    },
    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 4, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 23);
    },
    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {
      return unpackIEEE754(get(this, 8, byteOffset, arguments.length > 1 ? arguments[1] : undefined), 52);
    },
    setInt8: function setInt8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setUint8: function setUint8(byteOffset, value) {
      set(this, 1, byteOffset, packInt8, value);
    },
    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {
      set(this, 2, byteOffset, packInt16, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packInt32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {
      set(this, 4, byteOffset, packFloat32, value, arguments.length > 2 ? arguments[2] : undefined);
    },
    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {
      set(this, 8, byteOffset, packFloat64, value, arguments.length > 2 ? arguments[2] : undefined);
    }
  });
} else {
  var INCORRECT_ARRAY_BUFFER_NAME = PROPER_FUNCTION_NAME && NativeArrayBuffer.name !== ARRAY_BUFFER;
  /* eslint-disable no-new -- required for testing */
  if (!fails$7(function () {
    NativeArrayBuffer(1);
  }) || !fails$7(function () {
    new NativeArrayBuffer(-1);
  }) || fails$7(function () {
    new NativeArrayBuffer();
    new NativeArrayBuffer(1.5);
    new NativeArrayBuffer(NaN);
    return INCORRECT_ARRAY_BUFFER_NAME && !CONFIGURABLE_FUNCTION_NAME;
  })) {
  /* eslint-enable no-new -- required for testing */
    $ArrayBuffer = function ArrayBuffer(length) {
      anInstance$1(this, ArrayBufferPrototype$1);
      return new NativeArrayBuffer(toIndex$1(length));
    };

    $ArrayBuffer[PROTOTYPE] = ArrayBufferPrototype$1;

    for (var keys = getOwnPropertyNames$1(NativeArrayBuffer), j = 0, key; keys.length > j;) {
      if (!((key = keys[j++]) in $ArrayBuffer)) {
        createNonEnumerableProperty$2($ArrayBuffer, key, NativeArrayBuffer[key]);
      }
    }

    ArrayBufferPrototype$1.constructor = $ArrayBuffer;
  } else if (INCORRECT_ARRAY_BUFFER_NAME && CONFIGURABLE_FUNCTION_NAME) {
    createNonEnumerableProperty$2(NativeArrayBuffer, 'name', ARRAY_BUFFER);
  }

  // WebKit bug - the same parent prototype for typed arrays and data view
  if (setPrototypeOf$2 && getPrototypeOf(DataViewPrototype$1) !== ObjectPrototype) {
    setPrototypeOf$2(DataViewPrototype$1, ObjectPrototype);
  }

  // iOS Safari 7.x bug
  var testView = new $DataView(new $ArrayBuffer(2));
  var $setInt8 = uncurryThis$7(DataViewPrototype$1.setInt8);
  testView.setInt8(0, 2147483648);
  testView.setInt8(1, 2147483649);
  if (testView.getInt8(0) || !testView.getInt8(1)) defineBuiltIns(DataViewPrototype$1, {
    setInt8: function setInt8(byteOffset, value) {
      $setInt8(this, byteOffset, value << 24 >> 24);
    },
    setUint8: function setUint8(byteOffset, value) {
      $setInt8(this, byteOffset, value << 24 >> 24);
    }
  }, { unsafe: true });
}

setToStringTag($ArrayBuffer, ARRAY_BUFFER);
setToStringTag($DataView, DATA_VIEW);

var arrayBuffer = {
  ArrayBuffer: $ArrayBuffer,
  DataView: $DataView
};

var $$1 = _export;
var uncurryThis$6 = functionUncurryThis;
var fails$6 = fails$s;
var ArrayBufferModule$1 = arrayBuffer;
var anObject$2 = anObject$e;
var toAbsoluteIndex = toAbsoluteIndex$4;
var toLength$2 = toLength$6;
var speciesConstructor$1 = speciesConstructor$3;

var ArrayBuffer$2 = ArrayBufferModule$1.ArrayBuffer;
var DataView$2 = ArrayBufferModule$1.DataView;
var DataViewPrototype = DataView$2.prototype;
var un$ArrayBufferSlice = uncurryThis$6(ArrayBuffer$2.prototype.slice);
var getUint8 = uncurryThis$6(DataViewPrototype.getUint8);
var setUint8 = uncurryThis$6(DataViewPrototype.setUint8);

var INCORRECT_SLICE = fails$6(function () {
  return !new ArrayBuffer$2(2).slice(1, undefined).byteLength;
});

// `ArrayBuffer.prototype.slice` method
// https://tc39.es/ecma262/#sec-arraybuffer.prototype.slice
$$1({ target: 'ArrayBuffer', proto: true, unsafe: true, forced: INCORRECT_SLICE }, {
  slice: function slice(start, end) {
    if (un$ArrayBufferSlice && end === undefined) {
      return un$ArrayBufferSlice(anObject$2(this), start); // FF fix
    }
    var length = anObject$2(this).byteLength;
    var first = toAbsoluteIndex(start, length);
    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
    var result = new (speciesConstructor$1(this, ArrayBuffer$2))(toLength$2(fin - first));
    var viewSource = new DataView$2(this);
    var viewTarget = new DataView$2(result);
    var index = 0;
    while (first < fin) {
      setUint8(viewTarget, index++, getUint8(viewSource, first++));
    } return result;
  }
});

var typedArrayConstructor = {exports: {}};

var isObject$3 = isObject$d;

var floor$1 = Math.floor;

// `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es-x/no-number-isinteger -- safe
var isIntegralNumber$1 = Number.isInteger || function isInteger(it) {
  return !isObject$3(it) && isFinite(it) && floor$1(it) === it;
};

var toIntegerOrInfinity$1 = toIntegerOrInfinity$6;

var $RangeError$1 = RangeError;

var toPositiveInteger$1 = function (it) {
  var result = toIntegerOrInfinity$1(it);
  if (result < 0) throw $RangeError$1("The argument can't be less than 0");
  return result;
};

var toPositiveInteger = toPositiveInteger$1;

var $RangeError = RangeError;

var toOffset$2 = function (it, BYTES) {
  var offset = toPositiveInteger(it);
  if (offset % BYTES) throw $RangeError('Wrong offset');
  return offset;
};

var classof$3 = classofRaw$1;

// `IsArray` abstract operation
// https://tc39.es/ecma262/#sec-isarray
// eslint-disable-next-line es-x/no-array-isarray -- safe
var isArray$1 = Array.isArray || function isArray(argument) {
  return classof$3(argument) == 'Array';
};

var isArray = isArray$1;
var isConstructor = isConstructor$2;
var isObject$2 = isObject$d;
var wellKnownSymbol$1 = wellKnownSymbol$j;

var SPECIES$1 = wellKnownSymbol$1('species');
var $Array = Array;

// a part of `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
var arraySpeciesConstructor$1 = function (originalArray) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (isConstructor(C) && (C === $Array || isArray(C.prototype))) C = undefined;
    else if (isObject$2(C)) {
      C = C[SPECIES$1];
      if (C === null) C = undefined;
    }
  } return C === undefined ? $Array : C;
};

var arraySpeciesConstructor = arraySpeciesConstructor$1;

// `ArraySpeciesCreate` abstract operation
// https://tc39.es/ecma262/#sec-arrayspeciescreate
var arraySpeciesCreate$1 = function (originalArray, length) {
  return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);
};

var bind = functionBindContext;
var uncurryThis$5 = functionUncurryThis;
var IndexedObject = indexedObject;
var toObject = toObject$7;
var lengthOfArrayLike$1 = lengthOfArrayLike$8;
var arraySpeciesCreate = arraySpeciesCreate$1;

var push$1 = uncurryThis$5([].push);

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation
var createMethod$1 = function (TYPE) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var IS_FILTER_REJECT = TYPE == 7;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  return function ($this, callbackfn, that, specificCreate) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that);
    var length = lengthOfArrayLike$1(self);
    var index = 0;
    var create = specificCreate || arraySpeciesCreate;
    var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: push$1(target, value);      // filter
        } else switch (TYPE) {
          case 4: return false;             // every
          case 7: push$1(target, value);      // filterReject
        }
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

var arrayIteration = {
  // `Array.prototype.forEach` method
  // https://tc39.es/ecma262/#sec-array.prototype.foreach
  forEach: createMethod$1(0),
  // `Array.prototype.map` method
  // https://tc39.es/ecma262/#sec-array.prototype.map
  map: createMethod$1(1),
  // `Array.prototype.filter` method
  // https://tc39.es/ecma262/#sec-array.prototype.filter
  filter: createMethod$1(2),
  // `Array.prototype.some` method
  // https://tc39.es/ecma262/#sec-array.prototype.some
  some: createMethod$1(3),
  // `Array.prototype.every` method
  // https://tc39.es/ecma262/#sec-array.prototype.every
  every: createMethod$1(4),
  // `Array.prototype.find` method
  // https://tc39.es/ecma262/#sec-array.prototype.find
  find: createMethod$1(5),
  // `Array.prototype.findIndex` method
  // https://tc39.es/ecma262/#sec-array.prototype.findIndex
  findIndex: createMethod$1(6),
  // `Array.prototype.filterReject` method
  // https://github.com/tc39/proposal-array-filtering
  filterReject: createMethod$1(7)
};

var isCallable$1 = isCallable$n;
var isObject$1 = isObject$d;
var setPrototypeOf$1 = objectSetPrototypeOf;

// makes subclassing work correct for wrapped built-ins
var inheritIfRequired$1 = function ($this, dummy, Wrapper) {
  var NewTarget, NewTargetPrototype;
  if (
    // it can work only with native `setPrototypeOf`
    setPrototypeOf$1 &&
    // we haven't completely correct pre-ES6 way for getting `new.target`, so use this
    isCallable$1(NewTarget = dummy.constructor) &&
    NewTarget !== Wrapper &&
    isObject$1(NewTargetPrototype = NewTarget.prototype) &&
    NewTargetPrototype !== Wrapper.prototype
  ) setPrototypeOf$1($this, NewTargetPrototype);
  return $this;
};

var $ = _export;
var global$4 = global$t;
var call$4 = functionCall;
var DESCRIPTORS = descriptors;
var TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS = typedArrayConstructorsRequireWrappers;
var ArrayBufferViewCore$4 = arrayBufferViewCore;
var ArrayBufferModule = arrayBuffer;
var anInstance = anInstance$3;
var createPropertyDescriptor = createPropertyDescriptor$5;
var createNonEnumerableProperty$1 = createNonEnumerableProperty$8;
var isIntegralNumber = isIntegralNumber$1;
var toLength$1 = toLength$6;
var toIndex = toIndex$2;
var toOffset$1 = toOffset$2;
var toPropertyKey = toPropertyKey$4;
var hasOwn = hasOwnProperty_1;
var classof$2 = classof$9;
var isObject = isObject$d;
var isSymbol = isSymbol$3;
var create = objectCreate;
var isPrototypeOf = objectIsPrototypeOf;
var setPrototypeOf = objectSetPrototypeOf;
var getOwnPropertyNames = objectGetOwnPropertyNames.f;
var typedArrayFrom = typedArrayFrom$2;
var forEach = arrayIteration.forEach;
var setSpecies = setSpecies$2;
var definePropertyModule = objectDefineProperty;
var getOwnPropertyDescriptorModule = objectGetOwnPropertyDescriptor;
var InternalStateModule = internalState;
var inheritIfRequired = inheritIfRequired$1;

var getInternalState = InternalStateModule.get;
var setInternalState = InternalStateModule.set;
var enforceInternalState = InternalStateModule.enforce;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var round = Math.round;
var RangeError$2 = global$4.RangeError;
var ArrayBuffer$1 = ArrayBufferModule.ArrayBuffer;
var ArrayBufferPrototype = ArrayBuffer$1.prototype;
var DataView$1 = ArrayBufferModule.DataView;
var NATIVE_ARRAY_BUFFER_VIEWS = ArrayBufferViewCore$4.NATIVE_ARRAY_BUFFER_VIEWS;
var TYPED_ARRAY_TAG = ArrayBufferViewCore$4.TYPED_ARRAY_TAG;
var TypedArray = ArrayBufferViewCore$4.TypedArray;
var TypedArrayPrototype = ArrayBufferViewCore$4.TypedArrayPrototype;
var aTypedArrayConstructor = ArrayBufferViewCore$4.aTypedArrayConstructor;
var isTypedArray = ArrayBufferViewCore$4.isTypedArray;
var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';
var WRONG_LENGTH = 'Wrong length';

var fromList = function (C, list) {
  aTypedArrayConstructor(C);
  var index = 0;
  var length = list.length;
  var result = new C(length);
  while (length > index) result[index] = list[index++];
  return result;
};

var addGetter = function (it, key) {
  nativeDefineProperty(it, key, { get: function () {
    return getInternalState(this)[key];
  } });
};

var isArrayBuffer = function (it) {
  var klass;
  return isPrototypeOf(ArrayBufferPrototype, it) || (klass = classof$2(it)) == 'ArrayBuffer' || klass == 'SharedArrayBuffer';
};

var isTypedArrayIndex = function (target, key) {
  return isTypedArray(target)
    && !isSymbol(key)
    && key in target
    && isIntegralNumber(+key)
    && key >= 0;
};

var wrappedGetOwnPropertyDescriptor = function getOwnPropertyDescriptor(target, key) {
  key = toPropertyKey(key);
  return isTypedArrayIndex(target, key)
    ? createPropertyDescriptor(2, target[key])
    : nativeGetOwnPropertyDescriptor(target, key);
};

var wrappedDefineProperty = function defineProperty(target, key, descriptor) {
  key = toPropertyKey(key);
  if (isTypedArrayIndex(target, key)
    && isObject(descriptor)
    && hasOwn(descriptor, 'value')
    && !hasOwn(descriptor, 'get')
    && !hasOwn(descriptor, 'set')
    // TODO: add validation descriptor w/o calling accessors
    && !descriptor.configurable
    && (!hasOwn(descriptor, 'writable') || descriptor.writable)
    && (!hasOwn(descriptor, 'enumerable') || descriptor.enumerable)
  ) {
    target[key] = descriptor.value;
    return target;
  } return nativeDefineProperty(target, key, descriptor);
};

if (DESCRIPTORS) {
  if (!NATIVE_ARRAY_BUFFER_VIEWS) {
    getOwnPropertyDescriptorModule.f = wrappedGetOwnPropertyDescriptor;
    definePropertyModule.f = wrappedDefineProperty;
    addGetter(TypedArrayPrototype, 'buffer');
    addGetter(TypedArrayPrototype, 'byteOffset');
    addGetter(TypedArrayPrototype, 'byteLength');
    addGetter(TypedArrayPrototype, 'length');
  }

  $({ target: 'Object', stat: true, forced: !NATIVE_ARRAY_BUFFER_VIEWS }, {
    getOwnPropertyDescriptor: wrappedGetOwnPropertyDescriptor,
    defineProperty: wrappedDefineProperty
  });

  typedArrayConstructor.exports = function (TYPE, wrapper, CLAMPED) {
    var BYTES = TYPE.match(/\d+$/)[0] / 8;
    var CONSTRUCTOR_NAME = TYPE + (CLAMPED ? 'Clamped' : '') + 'Array';
    var GETTER = 'get' + TYPE;
    var SETTER = 'set' + TYPE;
    var NativeTypedArrayConstructor = global$4[CONSTRUCTOR_NAME];
    var TypedArrayConstructor = NativeTypedArrayConstructor;
    var TypedArrayConstructorPrototype = TypedArrayConstructor && TypedArrayConstructor.prototype;
    var exported = {};

    var getter = function (that, index) {
      var data = getInternalState(that);
      return data.view[GETTER](index * BYTES + data.byteOffset, true);
    };

    var setter = function (that, index, value) {
      var data = getInternalState(that);
      if (CLAMPED) value = (value = round(value)) < 0 ? 0 : value > 0xFF ? 0xFF : value & 0xFF;
      data.view[SETTER](index * BYTES + data.byteOffset, value, true);
    };

    var addElement = function (that, index) {
      nativeDefineProperty(that, index, {
        get: function () {
          return getter(this, index);
        },
        set: function (value) {
          return setter(this, index, value);
        },
        enumerable: true
      });
    };

    if (!NATIVE_ARRAY_BUFFER_VIEWS) {
      TypedArrayConstructor = wrapper(function (that, data, offset, $length) {
        anInstance(that, TypedArrayConstructorPrototype);
        var index = 0;
        var byteOffset = 0;
        var buffer, byteLength, length;
        if (!isObject(data)) {
          length = toIndex(data);
          byteLength = length * BYTES;
          buffer = new ArrayBuffer$1(byteLength);
        } else if (isArrayBuffer(data)) {
          buffer = data;
          byteOffset = toOffset$1(offset, BYTES);
          var $len = data.byteLength;
          if ($length === undefined) {
            if ($len % BYTES) throw RangeError$2(WRONG_LENGTH);
            byteLength = $len - byteOffset;
            if (byteLength < 0) throw RangeError$2(WRONG_LENGTH);
          } else {
            byteLength = toLength$1($length) * BYTES;
            if (byteLength + byteOffset > $len) throw RangeError$2(WRONG_LENGTH);
          }
          length = byteLength / BYTES;
        } else if (isTypedArray(data)) {
          return fromList(TypedArrayConstructor, data);
        } else {
          return call$4(typedArrayFrom, TypedArrayConstructor, data);
        }
        setInternalState(that, {
          buffer: buffer,
          byteOffset: byteOffset,
          byteLength: byteLength,
          length: length,
          view: new DataView$1(buffer)
        });
        while (index < length) addElement(that, index++);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      TypedArrayConstructorPrototype = TypedArrayConstructor.prototype = create(TypedArrayPrototype);
    } else if (TYPED_ARRAYS_CONSTRUCTORS_REQUIRES_WRAPPERS) {
      TypedArrayConstructor = wrapper(function (dummy, data, typedArrayOffset, $length) {
        anInstance(dummy, TypedArrayConstructorPrototype);
        return inheritIfRequired(function () {
          if (!isObject(data)) return new NativeTypedArrayConstructor(toIndex(data));
          if (isArrayBuffer(data)) return $length !== undefined
            ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES), $length)
            : typedArrayOffset !== undefined
              ? new NativeTypedArrayConstructor(data, toOffset$1(typedArrayOffset, BYTES))
              : new NativeTypedArrayConstructor(data);
          if (isTypedArray(data)) return fromList(TypedArrayConstructor, data);
          return call$4(typedArrayFrom, TypedArrayConstructor, data);
        }(), dummy, TypedArrayConstructor);
      });

      if (setPrototypeOf) setPrototypeOf(TypedArrayConstructor, TypedArray);
      forEach(getOwnPropertyNames(NativeTypedArrayConstructor), function (key) {
        if (!(key in TypedArrayConstructor)) {
          createNonEnumerableProperty$1(TypedArrayConstructor, key, NativeTypedArrayConstructor[key]);
        }
      });
      TypedArrayConstructor.prototype = TypedArrayConstructorPrototype;
    }

    if (TypedArrayConstructorPrototype.constructor !== TypedArrayConstructor) {
      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, 'constructor', TypedArrayConstructor);
    }

    enforceInternalState(TypedArrayConstructorPrototype).TypedArrayConstructor = TypedArrayConstructor;

    if (TYPED_ARRAY_TAG) {
      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, TYPED_ARRAY_TAG, CONSTRUCTOR_NAME);
    }

    var FORCED = TypedArrayConstructor != NativeTypedArrayConstructor;

    exported[CONSTRUCTOR_NAME] = TypedArrayConstructor;

    $({ global: true, constructor: true, forced: FORCED, sham: !NATIVE_ARRAY_BUFFER_VIEWS }, exported);

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructor)) {
      createNonEnumerableProperty$1(TypedArrayConstructor, BYTES_PER_ELEMENT, BYTES);
    }

    if (!(BYTES_PER_ELEMENT in TypedArrayConstructorPrototype)) {
      createNonEnumerableProperty$1(TypedArrayConstructorPrototype, BYTES_PER_ELEMENT, BYTES);
    }

    setSpecies(CONSTRUCTOR_NAME);
  };
} else typedArrayConstructor.exports = function () { /* empty */ };

var createTypedArrayConstructor = typedArrayConstructor.exports;

// `Uint8Array` constructor
// https://tc39.es/ecma262/#sec-typedarray-objects
createTypedArrayConstructor('Uint8', function (init) {
  return function Uint8Array(data, byteOffset, length) {
    return init(this, data, byteOffset, length);
  };
});

var toPrimitive = toPrimitive$2;

var $TypeError$1 = TypeError;

// `ToBigInt` abstract operation
// https://tc39.es/ecma262/#sec-tobigint
var toBigInt$1 = function (argument) {
  var prim = toPrimitive(argument, 'number');
  if (typeof prim == 'number') throw $TypeError$1("Can't convert number to bigint");
  // eslint-disable-next-line es-x/no-bigint -- safe
  return BigInt(prim);
};

var ArrayBufferViewCore$3 = arrayBufferViewCore;
var $fill = arrayFill$1;
var toBigInt = toBigInt$1;
var classof$1 = classof$9;
var call$3 = functionCall;
var uncurryThis$4 = functionUncurryThis;
var fails$5 = fails$s;

var aTypedArray$3 = ArrayBufferViewCore$3.aTypedArray;
var exportTypedArrayMethod$3 = ArrayBufferViewCore$3.exportTypedArrayMethod;
var slice = uncurryThis$4(''.slice);

// V8 ~ Chrome < 59, Safari < 14.1, FF < 55, Edge <=18
var CONVERSION_BUG = fails$5(function () {
  var count = 0;
  // eslint-disable-next-line es-x/no-typed-arrays -- safe
  new Int8Array(2).fill({ valueOf: function () { return count++; } });
  return count !== 1;
});

// `%TypedArray%.prototype.fill` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.fill
exportTypedArrayMethod$3('fill', function fill(value /* , start, end */) {
  var length = arguments.length;
  aTypedArray$3(this);
  var actualValue = slice(classof$1(this), 0, 3) === 'Big' ? toBigInt(value) : +value;
  return call$3($fill, this, actualValue, length > 1 ? arguments[1] : undefined, length > 2 ? arguments[2] : undefined);
}, CONVERSION_BUG);

var global$3 = global$t;
var call$2 = functionCall;
var ArrayBufferViewCore$2 = arrayBufferViewCore;
var lengthOfArrayLike = lengthOfArrayLike$8;
var toOffset = toOffset$2;
var toIndexedObject = toObject$7;
var fails$4 = fails$s;

var RangeError$1 = global$3.RangeError;
var Int8Array$2 = global$3.Int8Array;
var Int8ArrayPrototype = Int8Array$2 && Int8Array$2.prototype;
var $set = Int8ArrayPrototype && Int8ArrayPrototype.set;
var aTypedArray$2 = ArrayBufferViewCore$2.aTypedArray;
var exportTypedArrayMethod$2 = ArrayBufferViewCore$2.exportTypedArrayMethod;

var WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS = !fails$4(function () {
  // eslint-disable-next-line es-x/no-typed-arrays -- required for testing
  var array = new Uint8ClampedArray(2);
  call$2($set, array, { length: 1, 0: 3 }, 1);
  return array[1] !== 3;
});

// https://bugs.chromium.org/p/v8/issues/detail?id=11294 and other
var TO_OBJECT_BUG = WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS && ArrayBufferViewCore$2.NATIVE_ARRAY_BUFFER_VIEWS && fails$4(function () {
  var array = new Int8Array$2(2);
  array.set(1);
  array.set('2', 1);
  return array[0] !== 0 || array[1] !== 2;
});

// `%TypedArray%.prototype.set` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.set
exportTypedArrayMethod$2('set', function set(arrayLike /* , offset */) {
  aTypedArray$2(this);
  var offset = toOffset(arguments.length > 1 ? arguments[1] : undefined, 1);
  var src = toIndexedObject(arrayLike);
  if (WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS) return call$2($set, this, src, offset);
  var length = this.length;
  var len = lengthOfArrayLike(src);
  var index = 0;
  if (len + offset > length) throw RangeError$1('Wrong length');
  while (index < len) this[offset + index] = src[index++];
}, !WORKS_WITH_OBJECTS_AND_GEERIC_ON_TYPED_ARRAYS || TO_OBJECT_BUG);

var arraySlice$2 = arraySliceSimple;

var floor = Math.floor;

var mergeSort = function (array, comparefn) {
  var length = array.length;
  var middle = floor(length / 2);
  return length < 8 ? insertionSort(array, comparefn) : merge(
    array,
    mergeSort(arraySlice$2(array, 0, middle), comparefn),
    mergeSort(arraySlice$2(array, middle), comparefn),
    comparefn
  );
};

var insertionSort = function (array, comparefn) {
  var length = array.length;
  var i = 1;
  var element, j;

  while (i < length) {
    j = i;
    element = array[i];
    while (j && comparefn(array[j - 1], element) > 0) {
      array[j] = array[--j];
    }
    if (j !== i++) array[j] = element;
  } return array;
};

var merge = function (array, left, right, comparefn) {
  var llength = left.length;
  var rlength = right.length;
  var lindex = 0;
  var rindex = 0;

  while (lindex < llength || rindex < rlength) {
    array[lindex + rindex] = (lindex < llength && rindex < rlength)
      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]
      : lindex < llength ? left[lindex++] : right[rindex++];
  } return array;
};

var arraySort = mergeSort;

var userAgent$1 = engineUserAgent;

var firefox = userAgent$1.match(/firefox\/(\d+)/i);

var engineFfVersion = !!firefox && +firefox[1];

var UA = engineUserAgent;

var engineIsIeOrEdge = /MSIE|Trident/.test(UA);

var userAgent = engineUserAgent;

var webkit = userAgent.match(/AppleWebKit\/(\d+)\./);

var engineWebkitVersion = !!webkit && +webkit[1];

var global$2 = global$t;
var uncurryThis$3 = functionUncurryThis;
var fails$3 = fails$s;
var aCallable = aCallable$9;
var internalSort = arraySort;
var ArrayBufferViewCore$1 = arrayBufferViewCore;
var FF = engineFfVersion;
var IE_OR_EDGE = engineIsIeOrEdge;
var V8 = engineV8Version;
var WEBKIT = engineWebkitVersion;

var aTypedArray$1 = ArrayBufferViewCore$1.aTypedArray;
var exportTypedArrayMethod$1 = ArrayBufferViewCore$1.exportTypedArrayMethod;
var Uint16Array = global$2.Uint16Array;
var un$Sort = Uint16Array && uncurryThis$3(Uint16Array.prototype.sort);

// WebKit
var ACCEPT_INCORRECT_ARGUMENTS = !!un$Sort && !(fails$3(function () {
  un$Sort(new Uint16Array(2), null);
}) && fails$3(function () {
  un$Sort(new Uint16Array(2), {});
}));

var STABLE_SORT = !!un$Sort && !fails$3(function () {
  // feature detection can be too slow, so check engines versions
  if (V8) return V8 < 74;
  if (FF) return FF < 67;
  if (IE_OR_EDGE) return true;
  if (WEBKIT) return WEBKIT < 602;

  var array = new Uint16Array(516);
  var expected = Array(516);
  var index, mod;

  for (index = 0; index < 516; index++) {
    mod = index % 4;
    array[index] = 515 - index;
    expected[index] = index - 2 * mod + 3;
  }

  un$Sort(array, function (a, b) {
    return (a / 4 | 0) - (b / 4 | 0);
  });

  for (index = 0; index < 516; index++) {
    if (array[index] !== expected[index]) return true;
  }
});

var getSortCompare = function (comparefn) {
  return function (x, y) {
    if (comparefn !== undefined) return +comparefn(x, y) || 0;
    // eslint-disable-next-line no-self-compare -- NaN check
    if (y !== y) return -1;
    // eslint-disable-next-line no-self-compare -- NaN check
    if (x !== x) return 1;
    if (x === 0 && y === 0) return 1 / x > 0 && 1 / y < 0 ? 1 : -1;
    return x > y;
  };
};

// `%TypedArray%.prototype.sort` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.sort
exportTypedArrayMethod$1('sort', function sort(comparefn) {
  if (comparefn !== undefined) aCallable(comparefn);
  if (STABLE_SORT) return un$Sort(this, comparefn);

  return internalSort(aTypedArray$1(this), getSortCompare(comparefn));
}, !STABLE_SORT || ACCEPT_INCORRECT_ARGUMENTS);

var global$1 = global$t;
var apply$1 = functionApply;
var ArrayBufferViewCore = arrayBufferViewCore;
var fails$2 = fails$s;
var arraySlice$1 = arraySlice$5;

var Int8Array$1 = global$1.Int8Array;
var aTypedArray = ArrayBufferViewCore.aTypedArray;
var exportTypedArrayMethod = ArrayBufferViewCore.exportTypedArrayMethod;
var $toLocaleString = [].toLocaleString;

// iOS Safari 6.x fails here
var TO_LOCALE_STRING_BUG = !!Int8Array$1 && fails$2(function () {
  $toLocaleString.call(new Int8Array$1(1));
});

var FORCED = fails$2(function () {
  return [1, 2].toLocaleString() != new Int8Array$1([1, 2]).toLocaleString();
}) || !fails$2(function () {
  Int8Array$1.prototype.toLocaleString.call([1, 2]);
});

// `%TypedArray%.prototype.toLocaleString` method
// https://tc39.es/ecma262/#sec-%typedarray%.prototype.tolocalestring
exportTypedArrayMethod('toLocaleString', function toLocaleString() {
  return apply$1(
    $toLocaleString,
    TO_LOCALE_STRING_BUG ? arraySlice$1(aTypedArray(this)) : aTypedArray(this),
    arraySlice$1(arguments)
  );
}, FORCED);

class Payload {
  constructor(data) {
    // The tag's value is a hardcoded value as per
    // defined in the NEP [NEP413](https://github.com/near/NEPs/blob/master/neps/nep-0413.md)
    this.tag = 2147484061;
    this.message = data.message;
    this.nonce = data.nonce;
    this.recipient = data.recipient;
    if (data.callbackUrl) {
      this.callbackUrl = data.callbackUrl;
    }
  }
}
const payloadSchema = new Map([[Payload, {
  kind: "struct",
  fields: [["tag", "u32"], ["message", "string"], ["nonce", [32]], ["recipient", "string"], ["callbackUrl", {
    kind: "option",
    type: "string"
  }]]
}]]);
const serializeNep413 = signMessageParams => {
  const payload = new Payload(Object.assign({}, signMessageParams));
  return Buffer.from(borsh.serialize(payloadSchema, payload));
};

const verifySignature = ({
  publicKey,
  signature,
  message,
  nonce,
  recipient,
  callbackUrl
}) => {
  // Reconstruct the payload that was **actually signed**
  const payload = new Payload({
    message,
    nonce,
    recipient,
    callbackUrl
  });
  // Serialize payload based on payloadSchema
  const borshPayload = borsh.serialize(payloadSchema, payload);
  // Hash the payload as in the NEP0413 referenced example
  // https://github.com/near/NEPs/blob/master/neps/nep-0413.md#references
  // https://github.com/gagdiez/near-login/blob/main/authenticate/wallet-authenticate.js#L21
  const hashedPayload = Uint8Array.from(jsSha256.sha256.array(borshPayload));
  // Convert real signature to buffer base64
  const realSignature = Buffer.from(signature, "base64");
  const pk = nearAPI.utils.PublicKey.from(publicKey);
  // Verify the signature
  return pk.verify(hashedPayload, realSignature);
};
const fetchAllUserKeys = ({
  accountId,
  network,
  publicKey
}) => __awaiter(void 0, void 0, void 0, function* () {
  const provider = new nearAPI.providers.JsonRpcProvider({
    url: network.nodeUrl
  });
  const key = yield provider.query({
    request_type: "view_access_key",
    account_id: accountId,
    finality: "final",
    public_key: publicKey
  });
  return key;
});
const verifyFullKeyBelongsToUser = ({
  publicKey,
  accountId,
  network
}) => __awaiter(void 0, void 0, void 0, function* () {
  const {
    permission
  } = yield fetchAllUserKeys({
    accountId,
    network,
    publicKey
  });
  return permission === "FullAccess";
});

// TODO: Remove from `core-js@4` since it's moved to entry points

var uncurryThis$2 = functionUncurryThis;
var defineBuiltIn = defineBuiltIn$8;
var regexpExec$2 = regexpExec$3;
var fails$1 = fails$s;
var wellKnownSymbol = wellKnownSymbol$j;
var createNonEnumerableProperty = createNonEnumerableProperty$8;

var SPECIES = wellKnownSymbol('species');
var RegExpPrototype = RegExp.prototype;

var fixRegexpWellKnownSymbolLogic = function (KEY, exec, FORCED, SHAM) {
  var SYMBOL = wellKnownSymbol(KEY);

  var DELEGATES_TO_SYMBOL = !fails$1(function () {
    // String methods call symbol-named RegEp methods
    var O = {};
    O[SYMBOL] = function () { return 7; };
    return ''[KEY](O) != 7;
  });

  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL && !fails$1(function () {
    // Symbol-named RegExp methods call .exec
    var execCalled = false;
    var re = /a/;

    if (KEY === 'split') {
      // We can't use real regex here since it causes deoptimization
      // and serious performance degradation in V8
      // https://github.com/zloirock/core-js/issues/306
      re = {};
      // RegExp[@@split] doesn't call the regex's exec method, but first creates
      // a new one. We need to return the patched regex when creating the new one.
      re.constructor = {};
      re.constructor[SPECIES] = function () { return re; };
      re.flags = '';
      re[SYMBOL] = /./[SYMBOL];
    }

    re.exec = function () { execCalled = true; return null; };

    re[SYMBOL]('');
    return !execCalled;
  });

  if (
    !DELEGATES_TO_SYMBOL ||
    !DELEGATES_TO_EXEC ||
    FORCED
  ) {
    var uncurriedNativeRegExpMethod = uncurryThis$2(/./[SYMBOL]);
    var methods = exec(SYMBOL, ''[KEY], function (nativeMethod, regexp, str, arg2, forceStringMethod) {
      var uncurriedNativeMethod = uncurryThis$2(nativeMethod);
      var $exec = regexp.exec;
      if ($exec === regexpExec$2 || $exec === RegExpPrototype.exec) {
        if (DELEGATES_TO_SYMBOL && !forceStringMethod) {
          // The native String method already delegates to @@method (this
          // polyfilled function), leasing to infinite recursion.
          // We avoid it by directly calling the native @@method method.
          return { done: true, value: uncurriedNativeRegExpMethod(regexp, str, arg2) };
        }
        return { done: true, value: uncurriedNativeMethod(str, regexp, arg2) };
      }
      return { done: false };
    });

    defineBuiltIn(String.prototype, KEY, methods[0]);
    defineBuiltIn(RegExpPrototype, SYMBOL, methods[1]);
  }

  if (SHAM) createNonEnumerableProperty(RegExpPrototype[SYMBOL], 'sham', true);
};

var uncurryThis$1 = functionUncurryThis;
var toIntegerOrInfinity = toIntegerOrInfinity$6;
var toString$1 = toString$5;
var requireObjectCoercible$1 = requireObjectCoercible$6;

var charAt$1 = uncurryThis$1(''.charAt);
var charCodeAt = uncurryThis$1(''.charCodeAt);
var stringSlice$1 = uncurryThis$1(''.slice);

var createMethod = function (CONVERT_TO_STRING) {
  return function ($this, pos) {
    var S = toString$1(requireObjectCoercible$1($this));
    var position = toIntegerOrInfinity(pos);
    var size = S.length;
    var first, second;
    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
    first = charCodeAt(S, position);
    return first < 0xD800 || first > 0xDBFF || position + 1 === size
      || (second = charCodeAt(S, position + 1)) < 0xDC00 || second > 0xDFFF
        ? CONVERT_TO_STRING
          ? charAt$1(S, position)
          : first
        : CONVERT_TO_STRING
          ? stringSlice$1(S, position, position + 2)
          : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
  };
};

var stringMultibyte = {
  // `String.prototype.codePointAt` method
  // https://tc39.es/ecma262/#sec-string.prototype.codepointat
  codeAt: createMethod(false),
  // `String.prototype.at` method
  // https://github.com/mathiasbynens/String.prototype.at
  charAt: createMethod(true)
};

var charAt = stringMultibyte.charAt;

// `AdvanceStringIndex` abstract operation
// https://tc39.es/ecma262/#sec-advancestringindex
var advanceStringIndex$1 = function (S, index, unicode) {
  return index + (unicode ? charAt(S, index).length : 1);
};

var call$1 = functionCall;
var anObject$1 = anObject$e;
var isCallable = isCallable$n;
var classof = classofRaw$1;
var regexpExec$1 = regexpExec$3;

var $TypeError = TypeError;

// `RegExpExec` abstract operation
// https://tc39.es/ecma262/#sec-regexpexec
var regexpExecAbstract = function (R, S) {
  var exec = R.exec;
  if (isCallable(exec)) {
    var result = call$1(exec, R, S);
    if (result !== null) anObject$1(result);
    return result;
  }
  if (classof(R) === 'RegExp') return call$1(regexpExec$1, R, S);
  throw $TypeError('RegExp#exec called on incompatible receiver');
};

var apply = functionApply;
var call = functionCall;
var uncurryThis = functionUncurryThis;
var fixRegExpWellKnownSymbolLogic = fixRegexpWellKnownSymbolLogic;
var isRegExp = isRegexp;
var anObject = anObject$e;
var requireObjectCoercible = requireObjectCoercible$6;
var speciesConstructor = speciesConstructor$3;
var advanceStringIndex = advanceStringIndex$1;
var toLength = toLength$6;
var toString = toString$5;
var getMethod = getMethod$4;
var arraySlice = arraySliceSimple;
var callRegExpExec = regexpExecAbstract;
var regexpExec = regexpExec$3;
var stickyHelpers = regexpStickyHelpers;
var fails = fails$s;

var UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;
var MAX_UINT32 = 0xFFFFFFFF;
var min = Math.min;
var $push = [].push;
var exec = uncurryThis(/./.exec);
var push = uncurryThis($push);
var stringSlice = uncurryThis(''.slice);

// Chrome 51 has a buggy "split" implementation when RegExp#exec !== nativeExec
// Weex JS has frozen built-in prototypes, so use try / catch wrapper
var SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {
  // eslint-disable-next-line regexp/no-empty-group -- required for testing
  var re = /(?:)/;
  var originalExec = re.exec;
  re.exec = function () { return originalExec.apply(this, arguments); };
  var result = 'ab'.split(re);
  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';
});

// @@split logic
fixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {
  var internalSplit;
  if (
    'abbc'.split(/(b)*/)[1] == 'c' ||
    // eslint-disable-next-line regexp/no-empty-group -- required for testing
    'test'.split(/(?:)/, -1).length != 4 ||
    'ab'.split(/(?:ab)*/).length != 2 ||
    '.'.split(/(.?)(.?)/).length != 4 ||
    // eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing
    '.'.split(/()()/).length > 1 ||
    ''.split(/.?/).length
  ) {
    // based on es5-shim implementation, need to rework it
    internalSplit = function (separator, limit) {
      var string = toString(requireObjectCoercible(this));
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (separator === undefined) return [string];
      // If `separator` is not a regex, use native split
      if (!isRegExp(separator)) {
        return call(nativeSplit, string, separator, lim);
      }
      var output = [];
      var flags = (separator.ignoreCase ? 'i' : '') +
                  (separator.multiline ? 'm' : '') +
                  (separator.unicode ? 'u' : '') +
                  (separator.sticky ? 'y' : '');
      var lastLastIndex = 0;
      // Make `global` and avoid `lastIndex` issues by working with a copy
      var separatorCopy = new RegExp(separator.source, flags + 'g');
      var match, lastIndex, lastLength;
      while (match = call(regexpExec, separatorCopy, string)) {
        lastIndex = separatorCopy.lastIndex;
        if (lastIndex > lastLastIndex) {
          push(output, stringSlice(string, lastLastIndex, match.index));
          if (match.length > 1 && match.index < string.length) apply($push, output, arraySlice(match, 1));
          lastLength = match[0].length;
          lastLastIndex = lastIndex;
          if (output.length >= lim) break;
        }
        if (separatorCopy.lastIndex === match.index) separatorCopy.lastIndex++; // Avoid an infinite loop
      }
      if (lastLastIndex === string.length) {
        if (lastLength || !exec(separatorCopy, '')) push(output, '');
      } else push(output, stringSlice(string, lastLastIndex));
      return output.length > lim ? arraySlice(output, 0, lim) : output;
    };
  // Chakra, V8
  } else if ('0'.split(undefined, 0).length) {
    internalSplit = function (separator, limit) {
      return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);
    };
  } else internalSplit = nativeSplit;

  return [
    // `String.prototype.split` method
    // https://tc39.es/ecma262/#sec-string.prototype.split
    function split(separator, limit) {
      var O = requireObjectCoercible(this);
      var splitter = separator == undefined ? undefined : getMethod(separator, SPLIT);
      return splitter
        ? call(splitter, separator, O, limit)
        : call(internalSplit, toString(O), separator, limit);
    },
    // `RegExp.prototype[@@split]` method
    // https://tc39.es/ecma262/#sec-regexp.prototype-@@split
    //
    // NOTE: This cannot be properly polyfilled in engines that don't support
    // the 'y' flag.
    function (string, limit) {
      var rx = anObject(this);
      var S = toString(string);
      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);

      if (res.done) return res.value;

      var C = speciesConstructor(rx, RegExp);

      var unicodeMatching = rx.unicode;
      var flags = (rx.ignoreCase ? 'i' : '') +
                  (rx.multiline ? 'm' : '') +
                  (rx.unicode ? 'u' : '') +
                  (UNSUPPORTED_Y ? 'g' : 'y');

      // ^(? + rx + ) is needed, in combination with some S slicing, to
      // simulate the 'y' flag.
      var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);
      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;
      if (lim === 0) return [];
      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];
      var p = 0;
      var q = 0;
      var A = [];
      while (q < S.length) {
        splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;
        var z = callRegExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);
        var e;
        if (
          z === null ||
          (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p
        ) {
          q = advanceStringIndex(S, q, unicodeMatching);
        } else {
          push(A, stringSlice(S, p, q));
          if (A.length === lim) return A;
          for (var i = 1; i <= z.length - 1; i++) {
            push(A, z[i]);
            if (A.length === lim) return A;
          }
          q = p = e;
        }
      }
      push(A, stringSlice(S, p));
      return A;
    }
  ];
}, !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);

var modal$b = {
	wallet: {
		connectYourWallet: "Connect Your Wallet",
		whatIsAWallet: "What is a Wallet?",
		secureAndManage: "Secure & Manage Your Digital Assets",
		safelyStore: "Safely store and transfer your crypto and NFTs.",
		logInToAny: "Log In to Any NEAR App",
		noNeedToCreate: "No need to create new accounts or credentials. Connect your wallet and you are good to go!",
		getAWallet: "Get a Wallet",
		useAWallet: "Use a wallet to secure and manage your NEAR assets, and to log in to any NEAR app without the need for usernames and passwords.",
		connectionFailed: "Connection Failed",
		connectionSuccessful: "Connection Successful",
		connected: "Connected",
		connectingTo: "Connecting to",
		connectingMessage: {
			injected: "Confirm the connection in the extension window",
			browser: "Confirm the connection in the wallet after redirect",
			hardware: "Confirm the connection in the ledger device",
			bridge: "Confirm the connection in the wallet"
		}
	},
	ledger: {
		connectWithLedger: "Connect with Ledger",
		makeSureYourLedger: "Make sure your Ledger is connected securely, and that the NEAR app is open on your device",
		"continue": "Continue",
		specifyHDPath: "Specify HD Path",
		enterYourPreferredHDPath: "Enter your preferred HD path, then scan for any active accounts.",
		scan: "Scan",
		retry: "Retry",
		ledgerIsNotAvailable: "Ledger is not available",
		accessDeniedToUseLedgerDevice: "Access denied to use Ledger device",
		noAccountsFound: "No Accounts Found",
		selectYourAccounts: "Select Your Accounts",
		connecting1Account: "Connecting 1 Account",
		cantFindAnyAccount: "Can't find any account associated with this Ledger. Please create a new NEAR account on",
		orConnectAnAnotherLedger: "or connect an another Ledger.",
		connecting: "Connecting",
		ofAccounts: "of Accounts",
		failedToAutomatically: "Failed to automatically find account id. Provide it manually:",
		overviewTheListOfAuthorized: "Overview the list of authorized account(s), complete sign in by clicking the button below.",
		finish: "Finish"
	},
	install: {
		youllNeedToInstall: "You'll need to install",
		toContinueAfterInstalling: "to continue. After installing",
		refreshThePage: "refresh the page.",
		open: "Open"
	},
	qr: {
		copiedToClipboard: "Copied to clipboard",
		failedToCopy: "Failed to copy to clipboard",
		scanWithYourMobile: "Scan with Your Mobile Device",
		copyToClipboard: " Copy to clipboard",
		preferTheOfficial: "Prefer the official dialogue of",
		open: "Open"
	},
	walletTypes: {
		hardware: "Hardware Wallet",
		browser: "Browser Wallet",
		injected: "Wallet Extension",
		bridge: "Bridge Wallet",
		mobile: "Mobile Wallet",
		"instant-link": "Instant Wallet"
	},
	exportAccounts: {
		chooseAWallet: "Choose a Wallet",
		transferYourAccounts: "Transfer Your Accounts",
		selectAWallet: "Select a wallet that fits your needs and supports your connected accounts.",
		selectYourAccounts: "Select Your Accounts",
		afterDecide: "After you decide on a wallet, you can select which accounts you want to transfer.",
		disclaimer: "You won’t be able to transfer accounts that have never been funded or used on NEAR.",
		warning: "does not support account export at this time. Please select another wallet.",
		walletTypes: {
			hardware: "Hardware Wallet",
			browser: "Browser Wallet",
			injected: "Wallet Extension",
			bridge: "Bridge Wallet",
			mobile: "Mobile Wallet"
		},
		selectAccounts: {
			title: "Select Accounts to Transfer",
			button: "Continue",
			deselectAll: "Deselect All",
			selectAll: "Select All",
			unavailable: "Transfer Unavailable",
			error: "Account does not exist",
			warningLedger: "Ledger support required",
			noBalance: "Account not funded"
		},
		getPassphrase: {
			title: "Copy Temporary Password",
			desc: "You’ll need to enter this password when you begin exporting your accounts to a different wallet.",
			button: "Continue",
			transferButton: "Transfer Accounts",
			label: "Click to Copy",
			checkLabel: "I copied or wrote down the password"
		},
		complete: {
			title: "Complete the Transfer",
			descOne: "You will now be redirected to the wallet you selected to complete the transfer.",
			descTwo: "Once import part of process is completed from selected wallet, press button to complete the transfer process.",
			startOverButton: "Start Over",
			button: "Complete"
		}
	}
};
var component$1 = {
	clickToCopy: {
		label: "Copied",
		tooltip: "Click to copy"
	}
};
var en = {
	modal: modal$b,
	component: component$1
};

var modal$a = {
	wallet: {
		connectYourWallet: "Conecta Tu Billetera",
		whatIsAWallet: "¿Que es una Billetera?",
		secureAndManage: "Resguarda y Administrar Tus Activos Digitales",
		safelyStore: "Almacena de forma segura y transfiere tus cryptos y NFT's",
		logInToAny: "Inicie sesión en Cualquier Aplicacion NEAR",
		noNeedToCreate: "No es necesario crear nuevas cuentas o credenciales, ¡Conecta tu billetera y listo!",
		getAWallet: "Obten una Billetera",
		useAWallet: "Usa tu Billetera para resguardar y administrar tus activos en NEAR, e Iniciar sesión en cualquier aplicacion NEAR sin la necesidad de nombres de usuarios y contraseñas",
		connectionFailed: "Conexión Fallida",
		connectionSuccessful: "Conexión Existosa",
		connected: "Conectado",
		connectingTo: "Conectando a ",
		connectingMessage: {
			injected: "Confirme la conexión en la ventana de extensión",
			browser: "Confirme la conexión en la billetera después de la redirección",
			hardware: "Confirme la conexión en el dispositivo de libro mayor",
			bridge: "Confirmar la conexión en la billetera"
		}
	},
	ledger: {
		connectWithLedger: "Conectar con Ledger",
		makeSureYourLedger: "Asegúrese de que su ledger está conectada de forma segura y que la aplicacion NEAR esté abierta en su dispositivo",
		"continue": "Continuar",
		specifyHDPath: "Especifique la ruta HD",
		enterYourPreferredHDPath: "Ingrese su ruta HD prerida,y luego busque cualquier cuenta activa.",
		scan: "Escanear",
		retry: "Reintentar",
		ledgerIsNotAvailable: "El Ledger no está disponible",
		accessDeniedToUseLedgerDevice: "Acceso denegado para usar el dispositivo ledger",
		noAccountsFound: "No se encontraron cuentas",
		selectYourAccounts: "Selecciona tus cuentas",
		connecting1Account: "Conectando a 1 cuenta",
		cantFindAnyAccount: "No se pudo encontrar ninguna cuenta asociada con este ledger,Por favor crea una nueva cuenta en NEAR",
		orConnectAnAnotherLedger: "o conecta otro ledger",
		connecting: "Conectando",
		ofAccounts: "de Cuentas",
		failedToAutomatically: "No se pudo encontrar automaticamente el id de la cuenta,Ingresalo manualmente:",
		overviewTheListOfAuthorized: "Revise la lista de las cuentas autorizadas,Complete el inicio de sesión haciedo click a countinuacion.",
		finish: "Finalizar"
	},
	install: {
		youllNeedToInstall: "Tendrás que instalar",
		toContinueAfterInstalling: "Para continuar, Despues de instalar",
		refreshThePage: "Recarga la pagina",
		open: "Abrir"
	},
	qr: {
		copiedToClipboard: "Copiado al Portapapeles",
		failedToCopy: "Falló la copia al Portapapeles",
		scanWithYourMobile: "Busca con tu dispositivo movil",
		copyToClipboard: " Copiar al Portapapeles",
		preferTheOfficial: "¿Prefires el diálogo oficial de",
		open: "Abrir"
	},
	walletTypes: {
		hardware: "Hardware Wallet",
		browser: "Browser Wallet",
		injected: "Wallet Extension",
		bridge: "Bridge Wallet",
		mobile: "Mobile Wallet",
		"instant-link": "Instant Wallet"
	}
};
var es = {
	modal: modal$a
};

var modal$9 = {
	wallet: {
		connectYourWallet: "连接你的钱包",
		whatIsAWallet: "什么是钱包？",
		secureAndManage: "保护和管理你的数字资产",
		safelyStore: "安全存储和转移你的加密货币和NFT",
		logInToAny: "登录任何 NEAR 应用",
		noNeedToCreate: "不需要创建新账户或密码。连接你的钱包，即可开始使用！",
		getAWallet: "获取新账户",
		useAWallet: "使用钱包来保护和管理你的 NEAR 资产，无需用户名和密码即可登录任何 NEAR 应用",
		connectionFailed: "连接失败",
		connectionSuccessful: "连接成功",
		connected: "已连接",
		connectingTo: "正在连接"
	},
	ledger: {
		connectWithLedger: "连接 Ledger",
		makeSureYourLedger: "确保你的 Ledger 已经安全连接，并且 NEAR 应用已经在你设备上打开",
		"continue": "继续",
		specifyHDPath: "指定 HD 路径",
		enterYourPreferredHDPath: "输入你偏好的 HD 路径，然后为任意活跃账户扫码",
		scan: "扫码",
		retry: "重试",
		ledgerIsNotAvailable: "Ledger 不可用",
		accessDeniedToUseLedgerDevice: "访问 Ledger 设备被拒绝",
		noAccountsFound: "没有找到账户",
		selectYourAccounts: "选择你的账户",
		connecting1Account: "正在连接1个账户",
		cantFindAnyAccount: "没有找到任何与这个 Ledger 相关联的账户。请创建新账户于",
		"orConnectAnAnotherLedger.": "或连接另一个 Ledger",
		connecting: "正在连接",
		ofAccounts: "个账户",
		failedToAutomatically: "无法自动找到账户ID，请主动提供：",
		overviewTheListOfAuthorized: "请查看已授权的账户列表，点击以下按钮完成登录",
		finish: "完成"
	},
	install: {
		youllNeedToInstall: "你将需要安装",
		toContinueAfterInstalling: "以继续。安装完",
		refreshThePage: "请刷新页面",
		open: "打开"
	},
	qr: {
		copiedToClipboard: "复制到了剪贴板",
		failedToCopy: "复制到剪贴板失败",
		scanWithYourMobile: "用你的移动设备扫码",
		copyToClipboard: " 复制到剪贴板",
		preferTheOfficial: "希望使用官方对话框于",
		open: "打开"
	},
	walletTypes: {
		hardware: "Hardware Wallet",
		browser: "Browser Wallet",
		injected: "Wallet Extension",
		bridge: "Bridge Wallet",
		mobile: "Mobile Wallet",
		"instant-link": "Instant Wallet"
	}
};
var zh = {
	modal: modal$9
};

var modal$8 = {
	wallet: {
		connectYourWallet: "Свържете вашия Портфейл",
		whatIsAWallet: "Какво е Портфейл?",
		secureAndManage: "Защитете и управлявайте дигиталните си активи",
		safelyStore: "Съхранявайте и прехвърляйте безопасно вашите крипто и NFT.",
		logInToAny: "Използвайте всяко приложение на NEAR",
		noNeedToCreate: "Няма нужда да създавате нови профили. Свържете портфейла си и сте готови!",
		getAWallet: "Създайте Портфейл",
		useAWallet: "Използвайте портфейла, за да защитите и управлявате активите си на NEAR както и да използвате всяко приложение на NEAR без нужда от потребителски имена и пароли.",
		connectionFailed: "Свързването неуспешно",
		connectionSuccessful: "Свързването успешно",
		connected: "Свързан",
		connectingTo: "Свързване към",
		connectingMessage: {
			injected: "Потвърдете свързването в прозореца на разширението",
			browser: "Потвърдете свързването в портфейла след пренасочването",
			hardware: "Потвърдете свързването в хардуерния портфейл",
			bridge: "Потвърдете връзката в портфейла"
		}
	},
	ledger: {
		connectWithLedger: "Свържете се с Ledger",
		makeSureYourLedger: "Уверете се, че вашият Ledger е свързан и че приложението NEAR е отворено нa него.",
		"continue": "Продължете",
		specifyHDPath: "Посочете HD път",
		enterYourPreferredHDPath: "Въведете предпочитания HD път, след което сканирайте за активни акаунти.",
		scan: "Сканирайте",
		retry: "Опитайте отново",
		ledgerIsNotAvailable: "Ledger устройството не е достъпно",
		accessDeniedToUseLedgerDevice: "Достъпът за използване на Ledger е отказан",
		noAccountsFound: "Няма намерени профили",
		selectYourAccounts: "Изберете вашите профили",
		connecting1Account: "Свързване на 1 профил",
		cantFindAnyAccount: "Няма намерени профили, съврзани с този Ledger. Моля, създайте нов NEAR профил на",
		orConnectAnAnotherLedger: "или свържете друг Ledger.",
		connecting: "Свързване",
		ofAccounts: "от профили",
		failedToAutomatically: "Автоматичното намиране на профила не бе успешно. Въведете го ръчно:",
		overviewTheListOfAuthorized: "Прегледайте списъка с упълномощени профили, завършете влизането, като щракнете върху бутона по-долу..",
		finish: "Завършете"
	},
	install: {
		youllNeedToInstall: "Ще трябва да инсталирате",
		toContinueAfterInstalling: "за да продължите. След инсталиране",
		refreshThePage: "презаредете страницата.",
		open: "Отворете"
	},
	qr: {
		copiedToClipboard: "Копирано в клипборда",
		failedToCopy: "Неуспешно копиране в клипборда",
		scanWithYourMobile: " Сканирайте с мобилното си устройство",
		copyToClipboard: " Копирайте в клипборда",
		preferTheOfficial: "Предпочитан език за кореспонденция",
		open: "Отворете"
	},
	walletTypes: {
		hardware: "Hardware Wallet",
		browser: "Browser Wallet",
		injected: "Wallet Extension",
		bridge: "Bridge Wallet",
		mobile: "Mobile Wallet",
		"instant-link": "Instant Wallet"
	}
};
var bg = {
	modal: modal$8
};

var modal$7 = {
	wallet: {
		connectYourWallet: "지갑 연결하기",
		whatIsAWallet: "지갑은 무슨 역할을 하나요?",
		secureAndManage: "당신의 디지털 자산을 보호하고 관리합니다.",
		safelyStore: "암호화폐와 NFT를 안전하게 저장하고 전송할 수 있습니다.",
		logInToAny: "NEAR App에 로그인합니다.",
		noNeedToCreate: "새로운 계정이나 비밀번호를 만들 필요 없이 지갑을 연결한 후 바로 사용할 수 있습니다.",
		getAWallet: "지갑 가져오기",
		useAWallet: "지갑을 사용하여 NEAR 자산을 보호·관리하고, 아이디와 비밀번호 없이 NEAR 앱에 로그인할 수 있습니다.",
		connectionFailed: "연결 실패",
		connectionSuccessful: "연결 성공",
		connected: "Connected",
		connectingTo: "연결 중: ",
		connectingMessage: {
			injected: "익스텐션 창에서 연결을 확인하세요",
			browser: "리다이렉트 된 지갑에서 연결을 확인하세요",
			hardware: "Ledger 기기에서 연결을 확인하세요",
			bridge: "지갑에서 연결 확인"
		}
	},
	ledger: {
		connectWithLedger: "Ledger 연결하기",
		makeSureYourLedger: "Ledger가 안전하게 연결되어 있고, NEAR 앱이 열려 있는 지 확인하세요",
		"continue": "계속하기",
		specifyHDPath: "HD Path 지정하기",
		enterYourPreferredHDPath: "원하는 HD Path를 선택하고, 활성화된 계정이 있는 지 검색하세요",
		scan: "검색",
		retry: "다시 시도",
		ledgerIsNotAvailable: "Ledger를 사용할 수 없습니다",
		accessDeniedToUseLedgerDevice: "Ledger 기기 접근 권한이 거부되었습니다",
		noAccountsFound: "계정을 찾을 수 없습니다",
		selectYourAccounts: "계정 선택하기",
		connecting1Account: "하나의 계정에 연결",
		cantFindAnyAccount: "Ledger와 연결된 계정을 찾을 수 없습니다. 새로운 계정을 생성하거나 ",
		orConnectAnAnotherLedger: "다른 Ledger를 연결하세요",
		connecting: "계정 연결하기: ",
		ofAccounts: "개 계정을 찾았습니다",
		failedToAutomatically: "계정 ID를 찾지 못했습니다. 수동으로 입력해주세요.",
		overviewTheListOfAuthorized: "인증된 계정 목록을 확인한 후 아래 버튼을 클릭하여 로그인을 완료하세요",
		finish: "완료"
	},
	walletTypes: {
		hardware: "하드웨어 지갑",
		browser: "브라우저 지갑",
		injected: "지갑 확장",
		bridge: "브리지 지갑",
		mobile: "모바일 지갑",
		"instant-link": "인스턴트 지갑"
	},
	install: {
		youllNeedToInstall: "다음 확장 프로그램을 설치해주세요:",
		toContinueAfterInstalling: ". 설치 완료 후 페이지 새로 고침이 필요합니다. ",
		refreshThePage: "새로 고침",
		open: "Open"
	},
	qr: {
		copiedToClipboard: "클립보드에 복사 완료",
		failedToCopy: "클립보드에 복사 실패",
		scanWithYourMobile: "모바일 장치를 사용하여 스캔해주세요",
		copyToClipboard: " 클립보드에 복사하기",
		preferTheOfficial: "다음 프로그램에서 제공하는 공식 프로세스를 선호하십니까: ",
		open: "Open"
	}
};
var ko = {
	modal: modal$7
};

var modal$6 = {
	wallet: {
		connectYourWallet: "Kết nối ví của bạn",
		whatIsAWallet: "Ví là gì?",
		secureAndManage: "Bảo mật & Quản lý tài sản số của bạn",
		safelyStore: "Lưu trữ và chuyển tiền điện tử và NFT của bạn một cách an toàn.",
		logInToAny: "Đăng nhập vào bất kỳ ứng dụng trên NEAR",
		noNeedToCreate: "Không cần tạo tài khoản hoặc thông tin đăng nhập mới. Kết nối ví của bạn và bắt đầu!",
		getAWallet: "Tạo Ví",
		useAWallet: "Sử dụng ví để bảo mật và quản lý tài sản trên NEAR của bạn và đăng nhập vào bất kỳ ứng dụng NEAR nào, không cần tên người dùng và mật khẩu.",
		connectionFailed: "Kết nối thất bại",
		connectionSuccessful: "Kết nối thành công",
		connected: "Đã kết nối",
		connectingTo: "Đang kết nối tới",
		connectingMessage: {
			injected: "Xác nhận kết nối trong cửa sổ tiện ích mở rộng",
			browser: "Xác nhận kết nối trong ví sau khi được chuyển hướng",
			hardware: "Xác nhận kết nối với ví lạnh",
			bridge: "Xác nhận kết nối trong ví"
		}
	},
	ledger: {
		connectWithLedger: "Kết nối ví Ledger",
		makeSureYourLedger: "Đảm bảo Ledger của bạn được kết nối an toàn và ứng dụng NEAR đang mở sẵn trên thiết bị",
		"continue": "Tiếp tục",
		specifyHDPath: "Chỉ định HD Path",
		enterYourPreferredHDPath: "Nhập HD Path của bạn, sau đó quét tìm các tài khoản hoạt động",
		scan: "Quét",
		retry: "Thử lại",
		ledgerIsNotAvailable: "Ledger không khả dụng",
		accessDeniedToUseLedgerDevice: "Truy cập Ledger bị từ chối",
		noAccountsFound: "Không tìm thấy tài khoản",
		selectYourAccounts: "Chọn tài khoản của bạn",
		connecting1Account: "Đang kết nối 1 tài khoản",
		cantFindAnyAccount: "Không thể tìm thấy bất kỳ tài khoản nào được liên kết với Ledger này. Vui lòng tạo một tài khoản NEAR mới",
		orConnectAnAnotherLedger: "hoặc kết nối với ví Ledger khác.",
		connecting: "Đang kết nối",
		ofAccounts: "của tài khoản",
		failedToAutomatically: "Không thể tự động tìm id tài khoản. Nhập thủ công:",
		overviewTheListOfAuthorized: "Tổng quan danh sách các tài khoản được ủy quyền, hoàn tất đăng nhập bằng cách bấm vào nút bên dưới.",
		finish: "Hoàn thành"
	},
	install: {
		youllNeedToInstall: "Bạn sẽ cần cài đặt",
		toContinueAfterInstalling: "để bắt đầu. Sau khi cài đặt xong",
		refreshThePage: "Tải lại trang.",
		open: "Mở"
	},
	qr: {
		copiedToClipboard: "Đã sao chép vào bảng ghi tạm",
		failedToCopy: "Sao chép vào bảng ghi tạm thất bại",
		scanWithYourMobile: "Quét với điện thoại của bạn",
		copyToClipboard: " Sao chép vào bảng ghi tạm",
		preferTheOfficial: "Dialogue chính thức của",
		open: "Mở"
	},
	walletTypes: {
		hardware: "Ví lạnh",
		browser: "Ví trình duyệt",
		injected: "Ví tiện ích mở rộng",
		bridge: "Ví Cầu",
		mobile: "Ví Mobile",
		"instant-link": "Ví tức thì"
	},
	exportAccounts: {
		chooseAWallet: "Chọn ví",
		transferYourAccounts: "Chuyển tài khoản",
		selectAWallet: "Chọn ví phù hợp với nhu cầu của bạn, ví được chọn cần hỗ trợ các tài khoản đang sử dụng.",
		selectYourAccounts: "Chọn tài khoản",
		afterDecide: "Sau khi chọn được tài khoản bạn có chuyển.",
		disclaimer: "Bạn không thể chuyển tài khoản nếu tài khoản đó chưa được nhận tiền hoặc chưa phát sinh giao dịch trên NEAR.",
		warning: "không hỗ trợ xuất tài khoản. Vui lòng chọn ví khác.",
		walletTypes: {
			hardware: "Ví lạnh",
			browser: "Ví trình duyệt",
			injected: "Ví tiện ích mở rộng",
			bridge: "Ví Cầu",
			mobile: "Ví Mobile"
		},
		selectAccounts: {
			title: "Chọn tài khoản để chuyển",
			button: "Lấy cụm mật khẩu",
			deselectAll: "Bỏ chọn tất cả",
			selectAll: "Chọn tất cả",
			unavailable: "Chuyển không khả dụng",
			error: "Tài khoản không tồn tại",
			warningLedger: "Yêu cầu hỗ trợ Ledger",
			noBalance: "Tài khoản trống"
		},
		getPassphrase: {
			title: "Sao chép mật khẩu tạm thời",
			desc: "Bạn sẽ cần nhập mật khẩu khi bắt đầu xuất các khoản tới ví khác.",
			button: "Tiếp tục",
			label: "Bấm để sao chép",
			checkLabel: "Tôi đã chép hoặc ghi lại mật khẩu"
		},
		complete: {
			title: "Hoàn thành chuyển",
			descOne: "Bạn sẽ được chuyển hướng tới tài khoản đã chọn để hoàn tất quá trình.",
			descTwo: "Sau khi nhập, nhấn nút để hoàn tất quy trình chuyển.",
			button: "Hoàn thành"
		}
	}
};
var component = {
	clickToCopy: {
		label: "Đã sao chép",
		tooltip: "Bấm để sao chép"
	}
};
var vi = {
	modal: modal$6,
	component: component
};

var modal$5 = {
	wallet: {
		connectYourWallet: "अपना वॉलेट (Wallet) कनेक्ट करें।",
		whatIsAWallet: "वॉलेट क्या है?",
		secureAndManage: "सुरक्षित और प्रबंधित करें।",
		safelyStore: "अपनी क्रिप्टोकरेंसी और एनएफटी को सुरक्षित रूप से स्टोर और ट्रांसफर करें।",
		logInToAny: "NEAR पर किसी भी ऐप में साइन इन करें।",
		noNeedToCreate: "नए खाते या लॉगिन बनाने की आवश्यकता नहीं है। अपना वॉलेट(NEAR Wallet)कनेक्ट करें और आरंभ करें।",
		getAWallet: "एक वॉलेट बनाएँ।",
		useAWallet: "अपनी NEAR संपत्तियों को सुरक्षित और प्रबंधित करने के लिए वॉलेट का उपयोग करें और किसी भी NEAR ऐप (app) में लॉग इन करें, किसी उपयोगकर्ता (user) नाम और पासवर्ड की आवश्यकता नहीं है।",
		connectionFailed: "कनेक्शन विफल|",
		connectionSuccessful: "कनेक्शन सफल|",
		connected: "वॉलेट जुड़ गया|",
		connectingTo: "वॉलेट जुड़ रहा हे|",
		connectingMessage: {
			injected: "एक्सटेंशन विंडो में कनेक्शन की पुष्टि करें|",
			browser: "रीडायरेक्ट होने के बाद वॉलेट में कनेक्शन की पुष्टि करें|",
			hardware: "कोल्ड वॉलेट के साथ कनेक्शन की पुष्टि करें|"
		}
	},
	ledger: {
		connectWithLedger: "लेजर(Ledger)वॉलेट कनेक्ट करें|",
		makeSureYourLedger: "सुनिश्चित करें कि आपका लेजर सुरक्षित रूप से जुड़ा हुआ है और NEAR ऐप आपके डिवाइस (Device)पर पहले से ही खुला है|",
		"continue": "जारी रखे|",
		specifyHDPath: "हार्ड डिस्क(Hard Disk)पथ(Path)निर्धारित करे|",
		enterYourPreferredHDPath: "अपना एचडी पथ दर्ज करें, फिर सक्रिय खातों के लिए स्कैन करें|",
		scan: "स्कैन करे|",
		retry: "दोबारा प्रयास करे|",
		ledgerIsNotAvailable: "लेजर उपलब्ध नहीं है|",
		accessDeniedToUseLedgerDevice: "लेजर डिवाइस का उपयोग करने के लिए प्रवेश निषेध|",
		noAccountsFound: "खाता नहीं मिला|",
		selectYourAccounts: "अपने खाते चुनें|",
		connecting1Account: "एक खाता कनेक्ट हो रहा है|",
		cantFindAnyAccount: "इस लेजर से जुड़ा कोई खाता नहीं मिला। कृपया एक नया NEAR खाता बनाएँ|",
		orConnectAnAnotherLedger: "अथवा दूसरे लेजर वॉलेट से कनेक्ट करें।",
		connecting: "जुड़ रहा हे|",
		ofAccounts: "खाता अब जुड़ा नहीं हे|",
		failedToAutomatically: "खाता आईडी स्वचालित रूप से खोजने में असमर्थ। मैन्युअल (Manuall) रूप से कोशिश करें|",
		overviewTheListOfAuthorized: "अवलोकन अधिकृत की सूची, नीचे दिए गए बटन पर क्लिक करके लॉगिन पूरा करें।",
		finish: "समाप्त|"
	},
	install: {
		youllNeedToInstall: "आपको इंस्टॉल करना होगा|",
		toContinueAfterInstalling: "इंस्टॉल करने के बाद जारी रखे|",
		refreshThePage: "पुन: लोड करें।",
		open: "खोले|"
	},
	qr: {
		copiedToClipboard: "क्लिपबोर्ड(Clipboard)पर कॉपी किया गया|",
		failedToCopy: "क्लिपबोर्ड पर कॉपी करना विफल रहा|",
		scanWithYourMobile: "अपने फोन (Mobile)से स्कैन करें|",
		copyToClipboard: " क्लिपबोर्ड पर कॉपी करें|",
		preferTheOfficial: "आधिकारिक संवाद को प्राथमिकता दें|",
		open: "खोले|"
	},
	walletTypes: {
		hardware: "Hardware Wallet",
		browser: "Browser Wallet",
		injected: "Wallet Extension",
		bridge: "Bridge Wallet",
		mobile: "Mobile Wallet",
		"instant-link": "Instant Wallet"
	}
};
var hi = {
	modal: modal$5
};

var modal$4 = {
	wallet: {
		connectYourWallet: "صل محفظتك",
		whatIsAWallet: "ما هي المحفظة؟",
		secureAndManage: "تأمين وإدارة الممتلكات الرقمية الخاصة بك",
		safelyStore: "قم بتخزين و ارسال عملاتك و أصولك الرقمية بأمان",
		logInToAny: "سجل الدخول إلى أي تطبيق يستخدم نير",
		noNeedToCreate: ".لا داعي لإنشاء حساب جديد. فقط قم بتوصيل محفظتك وانطلق",
		getAWallet: "احصل على محفظة",
		useAWallet: "استخدم محفظة لتأمين وإدارة أصول نير الخاصة بك، وادخل لأي تطبيق يستخدم نير دون الحاجة إلى اسم المستخدم وكلمةالمرور",
		connectionFailed: "اتصال فاشل",
		connectionSuccessful: "اتصال ناجح",
		connected: "متصل",
		connectingTo: "جاري الاتصال ب",
		connectingMessage: {
			injected: "وافق على الاتصال في نافذة الإضافة",
			browser: "وافق على الاتصال في المحفظة بعد إعادة توجيه",
			hardware: "وافق على الاتصال في جهاز ليدجر",
			bridge: "وافق على الاتصال في المحفظة"
		}
	},
	ledger: {
		connectWithLedger: "اتصل مع ليدجر",
		makeSureYourLedger: "تأكد أن ليدجر متصل بأمان, و أن تطبيق نير مفتوح في جهازك",
		"continue": "تابع",
		specifyHDPath: "حدد مسار الحساب",
		enterYourPreferredHDPath: "أدخل مسار الحساب المفضل، ثم ابحث عن كل الحسابات النشطة",
		scan: "مسح",
		retry: "أعد المحاولة",
		ledgerIsNotAvailable: "ليدجر غير متوفر",
		accessDeniedToUseLedgerDevice: "تم رفض الاتصال بليدجر",
		noAccountsFound: "لم يتم العثور على أي حسابات",
		selectYourAccounts: "حدد حساباتك",
		connecting1Account: "جاري الاتصال بحساب واحد",
		cantFindAnyAccount: "لا يمكن العثور على أي حساب مرتبط بهذا ليدجر الرجاء إنشاء حساب نير جديد على",
		orConnectAnAnotherLedger: "او اربط جهاز ليدجر آخر",
		connecting: "جاري الاتصال",
		ofAccounts: "من الحسابات",
		failedToAutomatically: "فشل في الاتصال بالحساب تلقائيا. يرجى الاتصال بالحساب يدويا",
		overviewTheListOfAuthorized: "لائحة الحسابات المصرح بها, أكمل تسجيل الدخول بالنقر على الزر أدناه",
		finish: "إنهاء"
	},
	install: {
		youllNeedToInstall: "ستحتاج لتثبيت",
		toContinueAfterInstalling: "للاستكمال. بعد التثبيت",
		refreshThePage: "قم بتحديث الصفحة",
		open: "افتح"
	},
	qr: {
		copiedToClipboard: "تم النسخ",
		failedToCopy: "فشل النسخ",
		scanWithYourMobile: "امسح بجهازك المحمول",
		copyToClipboard: "نسخ",
		preferTheOfficial: "تفضل الحوار الرسمي ل",
		open: "فتح"
	},
	walletTypes: {
		hardware: "Hardware Wallet",
		browser: "Browser Wallet",
		injected: "Wallet Extension",
		bridge: "Bridge Wallet",
		mobile: "Mobile Wallet",
		"instant-link": "Instant Wallet"
	}
};
var ar = {
	modal: modal$4
};

var modal$3 = {
	wallet: {
		connectYourWallet: "Spojite crypto novčanik!",
		whatIsAWallet: "Što je to crypto novčanik?",
		secureAndManage: "Osigurajte i upravljajte svojom digitalnom imovinom.",
		safelyStore: "Sigurno pohranite i prebacite svoj crypto i NFT-eve.",
		logInToAny: " Prijavite se u bilo koju NEAR aplikaciju",
		noNeedToCreate: "Nema potrebe za stvaranjem novih naloga ili korisničkih podataka. Spojite svoj crypto novčanik i spremni ste!",
		getAWallet: "Otvorite crypto novčanik",
		useAWallet: "Koristite crypto novčanik da biste osigurali i upravljali svojom NEAR imovinom, te se prijavite u bilo koju NEAR aplikaciju bez korisničkog imena i lozinke.",
		connectionFailed: "Neuspješno povezivanje.",
		connectionSuccessful: "Uspješno povezivanje.",
		connected: "Povezano.",
		connectingTo: "Povezivanje u tijeku",
		connectingMessage: {
			injected: "Potvrdite vezu u eksternom prozoru",
			browser: "Nakon redirekcije, potvrdite vezu u novčaniku",
			hardware: "Potvrdite vezu sa novčanikom",
			bridge: "Potvrdite vezu u novčaniku"
		}
	},
	ledger: {
		connectWithLedger: "Povežite se hardverskim novčanikom",
		makeSureYourLedger: "Osigurajte sigurnu vezu s hardverskim novčanikom, te da je NEAR aplikacija otvorena na vašem uređaju",
		"continue": "Nastavite",
		specifyHDPath: "Specificirajte HD putanju",
		enterYourPreferredHDPath: "Upišite preferiranu HD putanju, zatim skenirajte aktivne naloge",
		scan: "Skenirajte",
		retry: "Pokušajte ponovno",
		ledgerIsNotAvailable: "Hardverski novčanik nije dostupan.",
		accessDeniedToUseLedgerDevice: "Odbijen pristup za korištenjem hardverskog novčanika",
		noAccountsFound: "Nalozi nisu pronađeni",
		selectYourAccounts: "Odaberite svoje naloge",
		connecting1Account: "Povezivanje 1 naloga",
		cantFindAnyAccount: "Nije moguće pronaći niti jedan nalog povezan s ovim hardverskim novčanikom. Molimo vas, kreirajte novi NEAR nalog",
		orConnectAnAnotherLedger: "Ili povežite drugi hardverski novčanik.",
		connecting: "Povezivanje",
		ofAccounts: "naloga",
		failedToAutomatically: "Neuspješno automatsko pronalaženje ID naloga. Unesite ručno:",
		overviewTheListOfAuthorized: "Pregledajte popis odobrenih naloga, završite prijavu pritiskom na niže prikazani gumb.",
		finish: "Završite"
	},
	install: {
		youllNeedToInstall: " Potrebno je instalirati modal",
		toContinueAfterInstalling: "za nastavak. Nakon instalacije",
		refreshThePage: "osvježite stranicu.",
		open: "Otvorite QR modal"
	},
	qr: {
		copiedToClipboard: "Kopirano u međuspremnik",
		failedToCopy: "Neupsješno kopiranje u međuspremnik",
		scanWithYourMobile: "Skenirajte svojim mobilnim uređajem",
		copyToClipboard: " Kopirajte u međuspremnik",
		preferTheOfficial: "Odaberite službeni dijalog",
		open: "Otvorite"
	},
	walletTypes: {
		hardware: "Hardware Wallet",
		browser: "Browser Wallet",
		injected: "Wallet Extension",
		bridge: "Bridge Wallet",
		mobile: "Mobile Wallet",
		"instant-link": "Instant Wallet"
	},
	exportAccounts: {
		chooseAWallet: "Odaberi Wallet",
		transferYourAccounts: "Prenesi svoje naloge",
		selectAWallet: "Odaberite wallet koji odgovara vašim potrebama i podržava vaše povezane naloge.",
		selectYourAccounts: "Odaberi svoje naloge",
		afterDecide: "Nakon što odlučite koji wallet koristite, možete odabrati koje račune želite prebaciti.",
		disclaimer: "Nećete moći prebaciti naloge koji nisu nikada bili korišteni na NEAR-u.",
		warning: "ne podržava izvoz naloga u ovom trenutku. Molimo odaberite drugi wallet.",
		walletTypes: {
			hardware: "Hardware Wallet",
			browser: "Browser Wallet",
			injected: "Wallet Extension",
			bridge: "Bridge Wallet",
			mobile: "Mobile Wallet"
		},
		selectAccounts: {
			title: "Odaberi naloge za prijenos",
			button: "Generiraj lozinku",
			deselectAll: "Makni odabir sa svih",
			selectAll: "Odaberi sve",
			unavailable: "Prijenos nije dostupan",
			error: "Nalog ne postoji",
			warningLedger: "Potrebna ledger podrška",
			noBalance: "Nalog nema sredstava"
		},
		getPassphrase: {
			title: "Kopiraj privremenu lozinku",
			desc: "Bit će potrebno unijeti ovu lozinku na početku izvoza naloga na drugi wallet.",
			button: "Nastavi",
			label: "Klikni za kopiju",
			checkLabel: "Kopirao sam ili zapisao lozinku"
		},
		complete: {
			title: "Završi prijenos",
			descOne: "You will now be redirected to the wallet you selected to complete the transfer.",
			descTwo: "Kada je unos s odabranog walleta završen, pritisnite gumb da biste završili prijenos.",
			button: "Završi"
		}
	}
};
var hr = {
	modal: modal$3
};

var modal$2 = {
	wallet: {
		connectYourWallet: "Поврзете го вашиот новчаник!",
		whatIsAWallet: "Што е новчаник?",
		secureAndManage: "Заштитете ги и управувајте со вашите дигитални средства.",
		safelyStore: "Безбедно складирајте и извршувајте трансакции со вашите крипто и NFT.",
		logInToAny: "Најавете се на која било NEAR апликација",
		noNeedToCreate: "Нема потреба да креирате нови сметки или ингеренции. Поврзете го вашиот паричник и сте подготвени!",
		getAWallet: "Направете новчаник",
		useAWallet: "Користете паричник за да ги заштитите и управувате вашите NEAR средства и да се најавите на која било NEAR апликација без потреба од кориснички имиња и лозинки.",
		connectionFailed: "Поврзувањето не беше успешно.",
		connectionSuccessful: "Успешно поврзување.",
		connected: "Поврзано.",
		connectingTo: "Поврзување со",
		connectingMessage: {
			injected: "Потврдете го поврзувањето во екстерниот прозорец",
			browser: "По преусмерувањето, потврдете го поврзувањето од новчаниокт",
			hardware: "Потврдете го поврзувањето со ладен новчаник",
			bridge: "Потврдете ја врската во новчаникот"
		}
	},
	ledger: {
		connectWithLedger: "Поврзете се со Леџер",
		makeSureYourLedger: "Осигурајте се дека вашиот Леџер е поврзан безбедно, и дека NEAR апликацијата е отворена на вашиот уред",
		"continue": "Продолжете",
		specifyHDPath: "Наведете ХД локација",
		enterYourPreferredHDPath: "Внесете ја вашата преферирана ХД локација, а потоа скенирајте да ги најдете активните сметки.",
		scan: "Скенирајте",
		retry: "Обидете се повторно",
		ledgerIsNotAvailable: "Леџерот не е достапен.",
		accessDeniedToUseLedgerDevice: "Пристапот за користење на Леџер уред е одбиен",
		noAccountsFound: "Нема најдени сметки",
		selectYourAccounts: "Изберете ги вашите сметки",
		connecting1Account: "Поврзување на една сметка",
		cantFindAnyAccount: "Не се најдени сметки поврзани со овој Леџер. Ве молиме креирајте нова NEAR сметка ",
		orConnectAnAnotherLedger: "или поврзете друг Леџер.",
		connecting: "Поврзување",
		ofAccounts: "на сметки",
		failedToAutomatically: "Неуспешно автоматско барање на ИД на сметката. Внесете го рачно:",
		overviewTheListOfAuthorized: "Преглед на листата на овластени сметки, завршете се најавата со кликнување на копчето подолу.",
		finish: "Завршете"
	},
	install: {
		youllNeedToInstall: "Треба да инсталирате",
		toContinueAfterInstalling: "за да продолжите. По инсталирањето",
		refreshThePage: "Освежете ја страната.",
		open: "Отворете"
	},
	qr: {
		copiedToClipboard: "Копирано на клипбордот",
		failedToCopy: "Неуспешно копирање на клипборд",
		scanWithYourMobile: "Скенирајте со вашиот телефонски уред",
		copyToClipboard: "Копирајте на клипборд",
		preferTheOfficial: "Преферирајте официјален диалог на",
		open: "Отворете"
	},
	walletTypes: {
		hardware: "Хардверски новчаник",
		browser: "Новчаник на интернет прелистувач",
		injected: "Екстензија за новчаник",
		bridge: "Bridge новчаник",
		mobile: "Мобилен новчаник",
		"instant-link": "Инстант паричник"
	},
	exportAccounts: {
		chooseAWallet: "Одберете паричник",
		transferYourAccounts: "Префрлете ги вашите кориснички сметки",
		selectAWallet: "Изберетен новчаник кој ги задоволува вашите баранња и ги поддржува вашите поврзани кориснички сметки.",
		selectYourAccounts: "Изберете ги вашите кориснички сметки",
		afterDecide: "Одкако ќе изберете новчаник, можете да изберете кои кориснички сметки сакате да ги префрлите.",
		disclaimer: "Не можете да прфрлате кориснички сметки кои никогаш не биле надополнати или користени на NEAR.",
		warning: "не поддржува извезување на кориснички сметки во овој момент. Ве молиме изберете друг новчаник.",
		walletTypes: {
			hardware: "Хардверски новчаник",
			browser: "Новчаник на интернет прелистувач",
			injected: "Екстензија за новчаник",
			bridge: "Bridge новчаник",
			mobile: "Мобилен новчаник"
		},
		selectAccounts: {
			title: "Изберете ги корисничките сметки за да ги префрлите.",
			button: "Добијте лозинка",
			deselectAll: "Отселектирајте се",
			selectAll: "Изберете се",
			unavailable: "Трансферот е недостапен",
			error: "Корисничката сметка не постои",
			warningLedger: "Потребна е поддршка од Леџер",
			noBalance: "Сметката не е финансирана"
		},
		getPassphrase: {
			title: "Копирајте ја привремената лозинка",
			desc: "Ќе треба да ја внесете оваа лозинка кога ќе започнете да ги извезувате вашите сметки на друг новчаник.",
			button: "Продолжете",
			label: "Кликнете за да копирате",
			checkLabel: "Ја копирав или запишав лозинката"
		},
		complete: {
			title: "Завршете го преносот",
			descOne: "Сега ќе бидете пренасочени на избраниот новчаник за завршување на преносот.",
			descTwo: "Откако ќе заврши увозот од избраниот новчаник, притиснете го копчето за да го завршите преносот.",
			button: "Завршете"
		}
	}
};
var mk = {
	modal: modal$2
};

var modal$1 = {
	wallet: {
		connectYourWallet: "Povežite svojo denarnico!",
		whatIsAWallet: "Kaj je denarnica?",
		secureAndManage: "Zavarujte in upravljajte svoja digitalna sredstva.",
		safelyStore: "Varno shranjujte in prenašajte svoje kriptovalute in NFTje.",
		logInToAny: "Prijavite se v katero koli aplikacijo na NEAR",
		noNeedToCreate: "Ni vam treba ustvarjati novih računov. Povežite svojo denarnico in začnite!",
		getAWallet: "Ustvarite denarnico",
		useAWallet: "Uporabite denarnico, da bi zavarovali in upravljali s svoja NEAR digitalna sredstva, in se prijavite v katero koli aplikacijo ekosistema NEAR",
		connectionFailed: "Povezava ni bila uspešna.",
		connectionSuccessful: "Povezava je bila uspešna.",
		connected: "Vaša denarnica je povezana.",
		connectingTo: "Povezovanje z",
		connectingMessage: {
			injected: "Potrdite povezavo v oknu razširitve",
			browser: "Po preusmeritvi potrdite povezavo v denarnici",
			hardware: "Potrdite povezavo s hladno denarnico",
			bridge: "Potrdite povezavo v denarnici"
		}
	},
	ledger: {
		connectWithLedger: "Povežite se z Ledger",
		makeSureYourLedger: "Prepričajte se, da je vaš Ledger varno povezan in da je aplikacija NEAR odprta v vaši napravi",
		"continue": "Nadaljuj",
		specifyHDPath: "Določite HD pot",
		enterYourPreferredHDPath: "Vnesite želeno HD pot, nato poiščite vse aktivne račune.",
		scan: "Skenirajte",
		retry: "Poskusite znova",
		ledgerIsNotAvailable: "Ledger ni na voljo",
		accessDeniedToUseLedgerDevice: "Dostop za uporabo naprave Ledger zavrnjen",
		noAccountsFound: "Ni najdenih računov",
		selectYourAccounts: "Izberite Vaši računi",
		connecting1Account: "Povezovanje enega računa",
		cantFindAnyAccount: "Ni mogoče najti nobenega računa, povezanega s tem Ledgerjem. Ustvarite nov NEAR račun ",
		orConnectAnAnotherLedger: "ali povežite drug Ledger..",
		connecting: "Povezovanje",
		ofAccounts: "računov",
		failedToAutomatically: "ID-ja računa ni bilo mogoče samodejno najti. Zagotovite ga ročno:",
		overviewTheListOfAuthorized: "Oglejte si seznam pooblaščenih računov, dokončajte prijavo s klikom na spodnji gumb.",
		finish: "Končajte"
	},
	install: {
		youllNeedToInstall: "Morali ga boste namestiti",
		toContinueAfterInstalling: "nadaljevati. Po namestitvi",
		refreshThePage: "Osvežite stran.",
		open: "Odprite"
	},
	qr: {
		copiedToClipboard: "Kopirano v podložni mapi",
		failedToCopy: "Kopiranje v podložni mapi ni uspelo",
		scanWithYourMobile: "Skenirajte s svojo mobilno napravo",
		copyToClipboard: " Kopirajte v podložni mapi",
		preferTheOfficial: "Preferirajte uradno pogovorno okno",
		open: "Odprite"
	},
	walletTypes: {
		hardware: "Hladna denarnica",
		browser: "Denarnica brskalnika",
		injected: "Razširitev za denarnico",
		bridge: "Bridge denarnica",
		mobile: "Mobilna denarnica",
		"instant-link": "Takojšnja denarnica"
	},
	exportAccounts: {
		chooseAWallet: "Izberite denarnico",
		transferYourAccounts: "Prenesite svoje račune",
		selectAWallet: "Izberite denarnico, ki ustreza vašim potrebam in podpira vaše povezane račune.",
		selectYourAccounts: "Izberite vaši računi",
		afterDecide: "Ko se odločite za denarnico, lahko izberete, katere račune želite prenesti.",
		disclaimer: "Ne boste mogli prenesti Računov, ki nikoli niso bili financirani ali uporabljeni na NEAR.",
		warning: "trenutno ne podpira izvoza računa. Izberite drugo denarnico",
		walletTypes: {
			hardware: "Hladna denarnica",
			browser: "Denarnica brskalnika",
			injected: "Razširitev za denarnico",
			bridge: "Bridge denarnica",
			mobile: "Mobilna denarnica"
		},
		selectAccounts: {
			title: "Izberite računi za prenos.",
			button: "Pridobite geslo",
			deselectAll: "Prekliči izbiro vseh",
			selectAll: "Izberi vse",
			unavailable: "Prenos ni na voljo",
			error: "Račun ne obstaja",
			warningLedger: "Potrebna je podpora za Ledger",
			noBalance: "Račun ni financiran"
		},
		getPassphrase: {
			title: "Kopiraj začasno geslo",
			desc: "To geslo boste morali vnesti, ko boste začeli izvažati svoje račune v drugo denarnico.",
			button: "Nadaljujte",
			label: "Kliknite za kopiranje",
			checkLabel: "Geslo sem kopiral ali zapisal"
		},
		complete: {
			title: "Dokončajte prenos",
			descOne: "Zdaj boste preusmerjeni v denarnico, ki ste jo izbrali za dokončanje prenosa.",
			descTwo: "Ko je uvozni del postopka končan iz izbrane denarnice, pritisnite gumb za dokončanje postopka prenosa.",
			button: "Končajte"
		}
	}
};
var sl = {
	modal: modal$1
};

var modal = {
	wallet: {
		connectYourWallet: "Повежите свој новчаник!",
		whatIsAWallet: "Шта је новчаник?",
		secureAndManage: "Обезбедите и управљајте својом дигиталном имовином.",
		safelyStore: "Безбедно чувајте и преносите своје криптовалуте и NFT.",
		logInToAny: "Пријавите се на било коју апликацију NEAR",
		noNeedToCreate: "Нема потребе да креирате нове налоге или акредитиве. Повежите новчаник и спремни стe!",
		getAWallet: "Набавите новчаник",
		useAWallet: "Користите новчаник да обезбедите и управљате својим NEAR средствима и да се пријавите у било коју апликацију NEAR без потребе за корисничким именима и лозинкама.",
		connectionFailed: "Веза није успостављена.",
		connectionSuccessful: "Веза је успела.",
		connected: "Повезан.",
		connectingTo: "Повезивање на",
		connectingMessage: {
			injected: "Потврдите везу у спољном прозору",
			browser: "Након преусмеравања, потврдите везу у новчанику",
			hardware: "Потврдите везу са хладним новчаником",
			bridge: "Потврдите везу са новчаником"
		}
	},
	ledger: {
		connectWithLedger: "Повежите се са Ledger",
		makeSureYourLedger: "Уверите се да је ваш Ledger безбедно повезан и да је апликација NEAR отворена на вашем уређају",
		"continue": "Настави",
		specifyHDPath: "Наведите ХД путању",
		enterYourPreferredHDPath: "Унесите жељену жељену ХД путању, а затим скенирајте све активне налоге.",
		scan: "Скенирајте",
		retry: "Покушај поново",
		ledgerIsNotAvailable: "Ledger није доступан.",
		accessDeniedToUseLedgerDevice: "Приступ је одбијен за коришћење Ledger уређаја",
		noAccountsFound: "Наlози нису пронађени",
		selectYourAccounts: "Изаберите Ваш наlог",
		connecting1Account: "Повезати 1 наlог",
		cantFindAnyAccount: "Није могуће пронаћи ниједан наlог повезан са овим Ledger-ом. Направите нови NEAR наlог",
		orConnectAnAnotherLedger: "или повежите други Ledger.",
		connecting: "Повезивање",
		ofAccounts: "наlога",
		failedToAutomatically: "Аутоматско проналажење ID-a наlога није успело. Наведите га ручно:",
		overviewTheListOfAuthorized: "Прегледајте листу овлашћених рачуна, завршите пријаву кликом на дугме испод.",
		finish: "Заврши"
	},
	install: {
		youllNeedToInstall: "Мораћете да инсталирате",
		toContinueAfterInstalling: "за наставак. Након инсталирања",
		refreshThePage: "поново учитати страницу.",
		open: "Отвори"
	},
	qr: {
		copiedToClipboard: "Копирано у међуспремник",
		failedToCopy: "Копирање у међуспремник није успело",
		scanWithYourMobile: "Скенирајте помоћу мобилног уређаја",
		copyToClipboard: " Копирај у међуспремник",
		preferTheOfficial: "Преферирате званични дијалог од",
		open: "Отвори"
	},
	walletTypes: {
		hardware: "Хардверски новчаник",
		browser: "Новчаник претраживача,",
		injected: "Додатак за новчаник,",
		bridge: "Bridge новчаник",
		mobile: "Мобилни новчаник",
		"instant-link": "Инстант новчаник"
	},
	exportAccounts: {
		chooseAWallet: "Изаберите новчаник",
		transferYourAccounts: "Пренесите своје налоге",
		selectAWallet: "Изаберите новчаник који одговара вашим потребама и који подржава ваше повезане налоге.",
		selectYourAccounts: "Изаберите ваше налоге",
		afterDecide: "Након што се одлучите за новчаник, можете изабрати које налоге желите да пренесете.",
		disclaimer: "Нећете моћи да пренесете налоге који никада нису били финансирани или коришћени на  NEAR.",
		warning: "тренутно не подржава извоз налога. Изаберите други новчаник.",
		walletTypes: {
			hardware: "Хардверски новчаник",
			browser: "Новчаник претраживача,",
			injected: "Додатак за новчаник,",
			bridge: "Bridge новчаник",
			mobile: "Мобилни новчаник"
		},
		selectAccounts: {
			title: "Изаберите налоге за пренос.",
			button: "Добијте приступну фразу",
			deselectAll: "Поништите избор",
			selectAll: "Изаберите све",
			unavailable: "Трансфер није доступан",
			error: "Налог не постоји",
			warningLedger: "Потребна подршка за Ledger",
			noBalance: "Налог није финансиран"
		},
		getPassphrase: {
			title: "Копирај привремену лозинку",
			desc: "Мораћете да унесете ову лозинку када почнете да извозите своје налоге у други новчаник.",
			button: "Наставите",
			label: "Кликните да бисте копирали",
			checkLabel: "Копирао сам или записао лозинку"
		},
		complete: {
			title: "Довршите трансфер",
			descOne: "Сада ћете бити преусмерени на новчаник који сте изабрали да завршите трансфер.",
			descTwo: "Када се део процеса увоза заврши из изабраног новчаника, притисните дугме да завршите процес преноса.",
			button: "Завршите"
		}
	}
};
var sr = {
	modal: modal
};

const getLanguage = languageCode => {
  switch (languageCode) {
    case "en":
      return en;
    case "es":
      return es;
    case "zh":
      return zh;
    case "bg":
      return bg;
    case "ko":
      return ko;
    case "vi":
      return vi;
    case "hi":
      return hi;
    case "ar":
      return ar;
    case "hr":
      return hr;
    case "mk":
      return mk;
    case "sl":
      return sl;
    case "sr":
      return sr;
    default:
      return en;
  }
};
let chosenLang;
const allowOnlyLanguage = langCode => {
  chosenLang = langCode;
};
// (i.e en-CA returns just en)
const shortenLanguageCode = lang => {
  return lang.indexOf("-") !== -1 ? lang.split("-")[0] : lang.split("_")[0];
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const findObjectPropByStringPath = (obj, prop) => {
  if (!obj) {
    return "";
  }
  const _index = prop.indexOf(".");
  if (_index > -1) {
    const currentProp = prop.substring(0, _index);
    const nextProp = prop.substring(_index + 1);
    return findObjectPropByStringPath(obj[currentProp], nextProp);
  }
  return obj[prop];
};
const translate = path => {
  let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;
  browserLang = browserLang || window.navigator.language;
  const languageCode = shortenLanguageCode(chosenLang || browserLang);
  const selectedLanguage = getLanguage(languageCode);
  const text = findObjectPropByStringPath(selectedLanguage, path);
  return text && typeof text === "string" ? text : path;
};

exports.EventEmitter = EventEmitter;
exports.allowOnlyLanguage = allowOnlyLanguage;
exports.getActiveAccount = getActiveAccount;
exports.isCurrentBrowserSupported = isCurrentBrowserSupported;
exports.serializeNep413 = serializeNep413;
exports.setupWalletSelector = setupWalletSelector;
exports.translate = translate;
exports.verifyFullKeyBelongsToUser = verifyFullKeyBelongsToUser;
exports.verifySignature = verifySignature;
exports.waitFor = waitFor;
