import { Account } from "near-api-js";
import { FinalExecutionOutcome } from "near-api-js/lib/providers";
import BN from "bn.js";
import { HereCall, HereAsyncOptions, HereWalletProtocol, SignAndSendTransactionOptions, SignAndSendTransactionsOptions, SignInOptions, HereInitializeOptions, SignMessageOptionsNEP0413, SignMessageOptionsLegacy, SignMessageLegacyReturn, SignedMessageNEP0413 } from "./types";
export declare class HereWallet implements HereWalletProtocol {
    private readonly connection;
    private readonly defaultStrategy;
    private readonly authStorage;
    private readonly defaultProvider;
    constructor({ nodeUrl, networkId, authStorage, defaultStrategy, defaultProvider, }?: HereInitializeOptions);
    get rpc(): import("near-api-js/lib/providers").Provider;
    get signer(): import("near-api-js").Signer;
    get networkId(): string;
    account(id?: string): Promise<Account>;
    isSignedIn(): Promise<boolean>;
    signOut(): Promise<void>;
    getHereBalance(id?: string): Promise<BN>;
    getAvailableBalance(id?: string): Promise<BN>;
    getAccounts(): Promise<string[]>;
    getAccountId(): Promise<string>;
    switchAccount(id: string): Promise<void>;
    signIn({ contractId, allowance, methodNames, ...delegate }?: SignInOptions): Promise<string>;
    silentSignAndSendTransaction({ actions, receiverId, signerId }: HereCall): Promise<FinalExecutionOutcome>;
    signAndSendTransaction(opts: SignAndSendTransactionOptions): Promise<FinalExecutionOutcome>;
    verifyMessageNEP0413(request: SignMessageOptionsNEP0413, result: SignedMessageNEP0413): Promise<boolean>;
    authenticate(options?: HereAsyncOptions & Partial<SignMessageOptionsNEP0413>): Promise<SignedMessageNEP0413>;
    signMessage(options: HereAsyncOptions & SignMessageOptionsNEP0413): Promise<SignedMessageNEP0413>;
    signMessage(options: HereAsyncOptions & SignMessageOptionsLegacy): Promise<SignMessageLegacyReturn>;
    legacySignMessage({ message, receiver, nonce, ...delegate }: SignMessageOptionsLegacy & HereAsyncOptions): Promise<SignMessageLegacyReturn>;
    signAndSendTransactions({ transactions, ...delegate }: SignAndSendTransactionsOptions): Promise<FinalExecutionOutcome[]>;
}
