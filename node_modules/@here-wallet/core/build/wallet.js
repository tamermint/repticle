"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HereWallet = void 0;
const near_api_js_1 = require("near-api-js");
const providers_1 = require("near-api-js/lib/providers");
const key_pair_1 = require("near-api-js/lib/utils/key_pair");
const js_sha256_1 = require("js-sha256");
const crypto_1 = require("crypto");
const bn_js_1 = __importDefault(require("bn.js"));
const HereKeyStore_1 = require("./HereKeyStore");
const provider_1 = require("./provider");
const utils_1 = require("./utils");
const here_provider_1 = require("./here-provider");
const actions_1 = require("./actions");
const WidgetStrategy_1 = require("./WidgetStrategy");
const nep0314_1 = require("./nep0314");
class AccessDenied extends Error {
}
class HereWallet {
    constructor({ nodeUrl, networkId = "mainnet", authStorage = new HereKeyStore_1.HereKeyStore(), defaultStrategy = () => new WidgetStrategy_1.WidgetStrategy(), defaultProvider = here_provider_1.proxyProvider, } = {}) {
        this.authStorage = authStorage;
        this.defaultProvider = defaultProvider;
        this.defaultStrategy = defaultStrategy;
        const signer = new near_api_js_1.InMemorySigner(this.authStorage);
        const rpc = new providers_1.JsonRpcProvider({ url: nodeUrl !== null && nodeUrl !== void 0 ? nodeUrl : `https://rpc.${networkId}.near.org` });
        this.connection = near_api_js_1.Connection.fromConfig({
            jsvmAccountId: `jsvm.${networkId}`,
            provider: rpc,
            networkId,
            signer,
        });
    }
    get rpc() {
        return this.connection.provider;
    }
    get signer() {
        return this.connection.signer;
    }
    get networkId() {
        return this.connection.networkId;
    }
    account(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const accountId = id !== null && id !== void 0 ? id : (yield this.authStorage.getActiveAccount(this.networkId));
            if (accountId == null)
                throw new AccessDenied("Wallet not signed in");
            return new near_api_js_1.Account(this.connection, accountId);
        });
    }
    isSignedIn() {
        return __awaiter(this, void 0, void 0, function* () {
            const id = yield this.authStorage.getActiveAccount(this.networkId);
            return id != null;
        });
    }
    signOut() {
        return __awaiter(this, void 0, void 0, function* () {
            const accountId = yield this.authStorage.getActiveAccount(this.networkId);
            if (accountId == null)
                throw new AccessDenied("Wallet not signed in");
            const key = yield this.authStorage.getKey(this.networkId, accountId);
            if (key != null) {
                const publicKey = key.getPublicKey().toString();
                yield this.silentSignAndSendTransaction({
                    receiverId: accountId,
                    actions: [{ type: "DeleteKey", params: { publicKey } }],
                }).catch(() => { });
            }
            yield this.authStorage.removeKey(this.networkId, accountId);
        });
    }
    getHereBalance(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.account(id);
            const contractId = this.networkId === "mainnet" ? "here.storage.near" : "here.storage.testnet";
            const hereCoins = yield account
                .viewFunction({
                args: { account_id: account.accountId },
                methodName: "ft_balance_of",
                contractId,
            })
                .catch(() => "0");
            return new bn_js_1.default(hereCoins);
        });
    }
    getAvailableBalance(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.account(id);
            const result = yield account.getAccountBalance();
            const hereBalance = yield this.getHereBalance();
            return new bn_js_1.default(result.available).add(new bn_js_1.default(hereBalance));
        });
    }
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.authStorage.getAccounts(this.networkId);
        });
    }
    getAccountId() {
        return __awaiter(this, void 0, void 0, function* () {
            const accountId = yield this.authStorage.getActiveAccount(this.networkId);
            if (accountId == null)
                throw new AccessDenied("Wallet not signed in");
            return accountId;
        });
    }
    switchAccount(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = yield this.authStorage.getKey(this.networkId, id);
            if (key == null)
                throw new Error(`Account ${id} not signed in`);
            yield this.authStorage.setActiveAccount(this.networkId, id);
        });
    }
    signIn(_a = {}) {
        var _b, _c, _d, _e, _f;
        var { contractId, allowance, methodNames = [] } = _a, delegate = __rest(_a, ["contractId", "allowance", "methodNames"]);
        return __awaiter(this, void 0, void 0, function* () {
            if (contractId == null) {
                const { accountId } = yield this.authenticate(delegate);
                // Generate random keypair
                yield this.authStorage.setKey(this.networkId, accountId, key_pair_1.KeyPairEd25519.fromRandom());
                yield this.authStorage.setActiveAccount(this.networkId, accountId);
                return accountId;
            }
            delegate.strategy = (_b = delegate.strategy) !== null && _b !== void 0 ? _b : this.defaultStrategy();
            delegate.provider = (_c = delegate.provider) !== null && _c !== void 0 ? _c : this.defaultProvider;
            (_d = delegate.onInitialized) === null || _d === void 0 ? void 0 : _d.call(delegate);
            (_f = (_e = delegate.strategy) === null || _e === void 0 ? void 0 : _e.onInitialized) === null || _f === void 0 ? void 0 : _f.call(_e);
            try {
                const accessKey = near_api_js_1.KeyPair.fromRandom("ed25519");
                const permission = { receiverId: contractId, methodNames, allowance };
                const data = yield delegate.provider(Object.assign(Object.assign({}, delegate), { request: {
                        type: "call",
                        network: this.networkId,
                        transactions: [
                            {
                                actions: [
                                    {
                                        type: "AddKey",
                                        params: {
                                            publicKey: accessKey.getPublicKey().toString(),
                                            accessKey: { permission },
                                        },
                                    },
                                ],
                            },
                        ],
                    } }));
                if (data.account_id == null) {
                    throw Error("Transaction is failed");
                }
                yield this.authStorage.setKey(this.networkId, data.account_id, accessKey);
                yield this.authStorage.setActiveAccount(this.networkId, data.account_id);
                return data.account_id;
            }
            catch (error) {
                (0, utils_1.internalThrow)(error, delegate);
                throw error;
            }
        });
    }
    silentSignAndSendTransaction({ actions, receiverId, signerId }) {
        return __awaiter(this, void 0, void 0, function* () {
            const account = yield this.account(signerId);
            const localKey = yield this.authStorage.getKey(this.networkId, account.accountId);
            if (localKey == null)
                throw new AccessDenied();
            const publicKey = localKey.getPublicKey();
            const accessKeys = yield account.getAccessKeys();
            const call = { receiverId, actions };
            const isValid = accessKeys.some((v) => {
                if (v.public_key !== publicKey.toString())
                    return false;
                return (0, utils_1.isValidAccessKey)(account.accountId, v, call);
            });
            if (isValid === false)
                throw new AccessDenied();
            return yield account.signAndSendTransaction({
                actions: actions.map((a) => (0, actions_1.createAction)(a)),
                receiverId: receiverId !== null && receiverId !== void 0 ? receiverId : account.accountId,
            });
        });
    }
    signAndSendTransaction(opts) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        return __awaiter(this, void 0, void 0, function* () {
            const { signerId, receiverId, actions } = opts, args = __rest(opts, ["signerId", "receiverId", "actions"]);
            const delegate = args;
            delegate.strategy = (_a = delegate.strategy) !== null && _a !== void 0 ? _a : this.defaultStrategy();
            delegate.provider = (_b = delegate.provider) !== null && _b !== void 0 ? _b : this.defaultProvider;
            (_c = delegate.onInitialized) === null || _c === void 0 ? void 0 : _c.call(delegate);
            (_e = (_d = delegate.strategy) === null || _d === void 0 ? void 0 : _d.onInitialized) === null || _e === void 0 ? void 0 : _e.call(_d);
            try {
                const result = yield this.silentSignAndSendTransaction({ receiverId, actions, signerId });
                const success = { status: provider_1.HereProviderStatus.SUCCESS, payload: result === null || result === void 0 ? void 0 : result.transaction_outcome.id };
                (_f = delegate.onSuccess) === null || _f === void 0 ? void 0 : _f.call(delegate, success);
                (_h = (_g = delegate.strategy) === null || _g === void 0 ? void 0 : _g.onSuccess) === null || _h === void 0 ? void 0 : _h.call(_g, success);
                return result;
            }
            catch (e) {
                try {
                    // If silent sign return AccessDenied or NotEnoughAllowance we request mobile wallet
                    // OR its just transaction error
                    if (!(e instanceof AccessDenied) && (e === null || e === void 0 ? void 0 : e.type) !== "NotEnoughAllowance") {
                        (0, utils_1.internalThrow)(e, delegate);
                        throw e;
                    }
                    const data = yield delegate.provider(Object.assign(Object.assign({}, delegate), { request: {
                            type: "call",
                            transactions: [{ actions: (0, utils_1.serializeActions)(actions), receiverId, signerId }],
                            network: this.networkId,
                        } }));
                    if (data.payload == null || data.account_id == null) {
                        throw Error("Transaction not found, but maybe executed");
                    }
                    return yield this.rpc.txStatus(data.payload, data.account_id);
                }
                catch (error) {
                    (0, utils_1.internalThrow)(error, delegate);
                    throw error;
                }
            }
        });
    }
    verifyMessageNEP0413(request, result) {
        return __awaiter(this, void 0, void 0, function* () {
            const isSignatureValid = (0, nep0314_1.verifySignature)(request, result);
            if (!isSignatureValid)
                throw Error("Incorrect signature");
            const account = yield this.account(result.accountId);
            const keys = yield account.getAccessKeys();
            const isFullAccess = keys.some((k) => {
                if (k.public_key !== result.publicKey)
                    return false;
                if (k.access_key.permission !== "FullAccess")
                    return false;
                return true;
            });
            if (!isFullAccess)
                throw Error("Signer public key is not full access");
            return true;
        });
    }
    authenticate(options = {}) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            const signRequest = {
                nonce: (_a = options.nonce) !== null && _a !== void 0 ? _a : (0, crypto_1.randomBytes)(32),
                recipient: (_b = options.recipient) !== null && _b !== void 0 ? _b : window.location.host,
                message: (_c = options.message) !== null && _c !== void 0 ? _c : "Authenticate",
            };
            const signed = yield this.signMessage(Object.assign(Object.assign({}, signRequest), options));
            yield this.verifyMessageNEP0413(signRequest, signed);
            return signed;
        });
    }
    signMessage(options) {
        var _a, _b, _c, _d, _e;
        return __awaiter(this, void 0, void 0, function* () {
            options.strategy = (_a = options.strategy) !== null && _a !== void 0 ? _a : this.defaultStrategy();
            options.provider = (_b = options.provider) !== null && _b !== void 0 ? _b : this.defaultProvider;
            (_c = options.onInitialized) === null || _c === void 0 ? void 0 : _c.call(options);
            (_e = (_d = options.strategy) === null || _d === void 0 ? void 0 : _d.onInitialized) === null || _e === void 0 ? void 0 : _e.call(_d);
            // Legacy format with receiver property, does not correspond to the current version of the standard
            if ("receiver" in options)
                return yield this.legacySignMessage(options);
            const data = yield options.provider(Object.assign(Object.assign({}, options), { request: {
                    type: "sign",
                    message: options.message,
                    recipient: options.recipient,
                    nonce: Array.from(options.nonce),
                    network: this.networkId,
                } }));
            if ((data === null || data === void 0 ? void 0 : data.payload) == null)
                throw Error("Signature not found");
            const { publicKey, signature, accountId } = JSON.parse(data.payload);
            return { publicKey, signature, accountId };
        });
    }
    legacySignMessage(_a) {
        var _b;
        var { message, receiver, nonce } = _a, delegate = __rest(_a, ["message", "receiver", "nonce"]);
        return __awaiter(this, void 0, void 0, function* () {
            if (nonce == null) {
                let nonceArray = new Uint8Array(32);
                nonce = [...crypto.getRandomValues(nonceArray)];
            }
            const data = yield ((_b = delegate.provider) === null || _b === void 0 ? void 0 : _b.call(delegate, Object.assign(Object.assign({}, delegate), { request: { type: "sign", message, receiver, nonce, network: this.networkId } })));
            if ((data === null || data === void 0 ? void 0 : data.payload) == null) {
                throw Error("Signature not found");
            }
            try {
                const { publicKey, signature, accountId } = JSON.parse(data.payload);
                const sign = new Uint8Array(Buffer.from(signature, "base64"));
                const json = JSON.stringify({ message, receiver, nonce });
                const msg = new Uint8Array(js_sha256_1.sha256.digest(`NEP0413:` + json));
                const isVerify = key_pair_1.PublicKey.from(publicKey).verify(msg, sign);
                if (isVerify === false)
                    throw Error();
                const account = yield this.account(accountId);
                const keys = yield account.getAccessKeys();
                const pb = publicKey.toString();
                const isValid = keys.some((k) => {
                    if (k.public_key !== pb)
                        return false;
                    if (k.access_key.permission !== "FullAccess")
                        return false;
                    return true;
                });
                if (isValid === false)
                    throw Error();
                return {
                    signature: new Uint8Array(Buffer.from(signature, "base64")),
                    publicKey: key_pair_1.PublicKey.from(publicKey),
                    message: `NEP0413:` + json,
                    receiver,
                    accountId,
                    nonce,
                };
            }
            catch (_c) {
                throw Error("Signature not correct");
            }
        });
    }
    signAndSendTransactions(_a) {
        var _b, _c, _d, _e, _f, _g, _h, _j;
        var { transactions } = _a, delegate = __rest(_a, ["transactions"]);
        return __awaiter(this, void 0, void 0, function* () {
            delegate.strategy = (_b = delegate.strategy) !== null && _b !== void 0 ? _b : this.defaultStrategy();
            delegate.provider = (_c = delegate.provider) !== null && _c !== void 0 ? _c : this.defaultProvider;
            (_d = delegate.onInitialized) === null || _d === void 0 ? void 0 : _d.call(delegate);
            (_f = (_e = delegate.strategy) === null || _e === void 0 ? void 0 : _e.onInitialized) === null || _f === void 0 ? void 0 : _f.call(_e);
            let results = [];
            try {
                for (const call of transactions) {
                    const r = yield this.silentSignAndSendTransaction(call);
                    results.push(r);
                }
                const payload = results.map((result) => result.transaction_outcome.id).join(",");
                const success = { status: provider_1.HereProviderStatus.SUCCESS, payload };
                (_g = delegate.onSuccess) === null || _g === void 0 ? void 0 : _g.call(delegate, success);
                (_j = (_h = delegate.strategy) === null || _h === void 0 ? void 0 : _h.onSuccess) === null || _j === void 0 ? void 0 : _j.call(_h, success);
                return results;
            }
            catch (e) {
                try {
                    // If silent sign return access denied or not enough balance we request mobile wallet
                    // OR its just transaction error
                    if (!(e instanceof AccessDenied) && (e === null || e === void 0 ? void 0 : e.type) !== "NotEnoughAllowance") {
                        (0, utils_1.internalThrow)(e, delegate);
                        throw e;
                    }
                    const uncompleted = transactions.slice(results.length);
                    const data = yield delegate.provider(Object.assign(Object.assign({}, delegate), { request: {
                            type: "call",
                            transactions: uncompleted.map((trx) => (Object.assign(Object.assign({}, trx), { actions: (0, utils_1.serializeActions)(trx.actions) }))),
                            network: this.networkId,
                        } }));
                    if (data.payload == null || data.account_id == null) {
                        throw Error("Transaction not found, but maybe executed");
                    }
                    const promises = data.payload.split(",").map((id) => this.rpc.txStatus(id, data.account_id));
                    return yield Promise.all(promises);
                }
                catch (error) {
                    (0, utils_1.internalThrow)(error, delegate);
                    throw error;
                }
            }
        });
    }
}
exports.HereWallet = HereWallet;
//# sourceMappingURL=wallet.js.map