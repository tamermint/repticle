"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyFullKeyBelongsToUser = exports.verifySignature = exports.authenticate = exports.authPayloadSchema = exports.AuthPayload = void 0;
const borsh = __importStar(require("borsh"));
const js_sha256_1 = __importDefault(require("js-sha256"));
const near_api_js_1 = __importDefault(require("near-api-js"));
class AuthPayload {
    constructor({ message, nonce, recipient, callbackUrl }) {
        this.tag = 2147484061;
        this.message = message;
        this.nonce = nonce;
        this.recipient = recipient;
        if (callbackUrl) {
            this.callbackUrl = callbackUrl;
        }
    }
}
exports.AuthPayload = AuthPayload;
exports.authPayloadSchema = new Map([
    [
        AuthPayload,
        {
            kind: "struct",
            fields: [
                ["tag", "u32"],
                ["message", "string"],
                ["nonce", [32]],
                ["recipient", "string"],
                ["callbackUrl", { kind: "option", type: "string" }],
            ],
        },
    ],
]);
function authenticate(request, result) {
    return __awaiter(this, void 0, void 0, function* () {
        // A user is correctly authenticated if:
        // - The key used to sign belongs to the user and is a Full Access Key
        // - The object signed contains the right message and domain
        const full_key_of_user = yield verifyFullKeyBelongsToUser(result);
        const valid_signature = verifySignature(request, result);
        return valid_signature && full_key_of_user;
    });
}
exports.authenticate = authenticate;
function verifySignature(request, result) {
    // Reconstruct the payload that was **actually signed**
    const payload = new AuthPayload(request);
    const borsh_payload = borsh.serialize(exports.authPayloadSchema, payload);
    const to_sign = Uint8Array.from(js_sha256_1.default.sha256.array(borsh_payload));
    // Reconstruct the signature from the parameter given in the URL
    let real_signature = Buffer.from(result.signature, "base64");
    // Use the public Key to verify that the private-counterpart signed the message
    const myPK = near_api_js_1.default.utils.PublicKey.from(result.publicKey);
    return myPK.verify(to_sign, real_signature);
}
exports.verifySignature = verifySignature;
function verifyFullKeyBelongsToUser(payload) {
    return __awaiter(this, void 0, void 0, function* () {
        // Call the public RPC asking for all the users' keys
        let data = yield fetch_all_user_keys(payload);
        // if there are no keys, then the user could not sign it!
        if (!data || !data.result || !data.result.keys)
            return false;
        // check all the keys to see if we find the used_key there
        for (const k in data.result.keys) {
            if (data.result.keys[k].public_key === payload.publicKey) {
                // Ensure the key is full access, meaning the user had to sign
                // the transaction through the wallet
                return data.result.keys[k].access_key.permission == "FullAccess";
            }
        }
        return false; // didn't find it
    });
}
exports.verifyFullKeyBelongsToUser = verifyFullKeyBelongsToUser;
// Aux method
function fetch_all_user_keys({ accountId }) {
    return __awaiter(this, void 0, void 0, function* () {
        const keys = yield fetch("https://rpc.testnet.near.org", {
            method: "post",
            headers: { "Content-Type": "application/json; charset=utf-8" },
            body: `{"jsonrpc":"2.0", "method":"query", "params":["access_key/${accountId}", ""], "id":1}`,
        })
            .then((data) => data.json())
            .then((result) => result);
        return keys;
    });
}
module.exports = { authenticate, verifyFullKeyBelongsToUser, verifySignature };
//# sourceMappingURL=authenticate.js.map