function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useState, useEffect } from 'react';
import { SingleItemContainer } from './SingleItemContainer';
import { mount } from '../utils/env';
import { warning } from '../utils/warning';
var SingletonHooksContainerMounted = false;
var SingletonHooksContainerRendered = false;
var SingletonHooksContainerMountedAutomatically = false;
var mountQueue = [];

var mountIntoContainerDefault = function mountIntoContainerDefault(item) {
  mountQueue.push(item);
  return function () {
    throw new Error('Can not unmount container! It is like a bug in react-singleton-hook library, because of unmountIfNoConsumers: true'); // mountQueue = mountQueue.filter(i => i !== item);
  };
};

var mountIntoContainer = mountIntoContainerDefault;
export var SingletonHooksContainer = function SingletonHooksContainer() {
  SingletonHooksContainerRendered = true;
  useEffect(function () {
    if (SingletonHooksContainerMounted) {
      warning('SingletonHooksContainer is mounted second time. ' + 'You should mount SingletonHooksContainer before any other component and never unmount it.' + 'Alternatively, dont use SingletonHooksContainer it at all, we will handle that for you.');
    }

    SingletonHooksContainerMounted = true;
  }, []);

  var _useState = useState([]),
      hooks = _useState[0],
      setHooks = _useState[1];

  useEffect(function () {
    mountIntoContainer = function mountIntoContainer(item) {
      setHooks(function (hooks) {
        return [].concat(hooks, [item]);
      });
      return function () {
        setHooks(function (hooks) {
          return hooks.filter(function (i) {
            return i !== item;
          });
        });
      };
    };

    setHooks(mountQueue);
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, hooks.map(function (h, i) {
    return /*#__PURE__*/React.createElement(SingleItemContainer, _extends({}, h, {
      key: i
    }));
  }));
};
export var addHook = function addHook(hook) {
  if (!SingletonHooksContainerRendered && !SingletonHooksContainerMountedAutomatically) {
    SingletonHooksContainerMountedAutomatically = true;
    mount(SingletonHooksContainer);
  }

  return mountIntoContainer(hook);
};
export var resetLocalStateForTests = function resetLocalStateForTests() {
  SingletonHooksContainerMounted = false;
  SingletonHooksContainerRendered = false;
  SingletonHooksContainerMountedAutomatically = false;
  mountQueue = [];
  mountIntoContainer = mountIntoContainerDefault;
};